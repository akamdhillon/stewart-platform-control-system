
motorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800afe8  0800afe8  0001afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b490  0800b490  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b490  0800b490  0001b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b498  0800b498  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c4  20000074  0800b518  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004338  0800b518  00024338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024589  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b6  00000000  00000000  0004462d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  000489e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  0004a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8c9  00000000  00000000  0004b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bea4  00000000  00000000  00068f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a884d  00000000  00000000  00084da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d5f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ddc  00000000  00000000  0012d644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afd0 	.word	0x0800afd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800afd0 	.word	0x0800afd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_I2C_SlaveTxCpltCallback>:
volatile uint8_t rxBuffer[RECEIVE_DATA_SIZE];
uint8_t motorData[RECEIVE_DATA_SIZE];



void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    // Transmission complete callback
    txDataReady = 0; // Reset flag after sending data
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000009c 	.word	0x2000009c

080005b4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
	memcpy(motorData,rxBuffer,RECEIVE_DATA_SIZE);
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80005c2:	6013      	str	r3, [r2, #0]
	I2C_Recieved = 1;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
	startRecieveIT = 1;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	200000a0 	.word	0x200000a0
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	20000090 	.word	0x20000090
 80005e8:	20000091 	.word	0x20000091

080005ec <StartI2CSendTask>:
    //txBuffer[0] = ...; // Your data here
    //txBuffer[1] = ...;
    txDataReady = 1;
}

void StartI2CSendTask(void const * argument) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    osDelay(10); // Initial delay
 80005f4:	200a      	movs	r0, #10
 80005f6:	f006 fcd0 	bl	8006f9a <osDelay>

    while(1) {
        if(txDataReady) {
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <StartI2CSendTask+0x30>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d007      	beq.n	8000614 <StartI2CSendTask+0x28>
            // Data is prepared and ready to be sent upon master request
            HAL_I2C_Slave_Transmit_IT(&hi2c1, txBuffer, SEND_DATA_SIZE); // Non-blocking
 8000604:	2208      	movs	r2, #8
 8000606:	4906      	ldr	r1, [pc, #24]	; (8000620 <StartI2CSendTask+0x34>)
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <StartI2CSendTask+0x38>)
 800060a:	f002 fa87 	bl	8002b1c <HAL_I2C_Slave_Transmit_IT>
            txDataReady = 0; // Reset the flag
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <StartI2CSendTask+0x30>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
        }
        osDelay(10); // Short delay or wait for an event
 8000614:	200a      	movs	r0, #10
 8000616:	f006 fcc0 	bl	8006f9a <osDelay>
        if(txDataReady) {
 800061a:	e7ee      	b.n	80005fa <StartI2CSendTask+0xe>
 800061c:	2000009c 	.word	0x2000009c
 8000620:	20000094 	.word	0x20000094
 8000624:	2000036c 	.word	0x2000036c

08000628 <StartI2CReceiveTask>:
    }
}



void StartI2CReceiveTask(void const * argument) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

    startRecieveIT = 1;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <StartI2CReceiveTask+0x38>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]

    osDelay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f006 fcaf 	bl	8006f9a <osDelay>

    while(1) {
    	if(startRecieveIT) {
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <StartI2CReceiveTask+0x38>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d007      	beq.n	8000656 <StartI2CReceiveTask+0x2e>
    		startRecieveIT = 0;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <StartI2CReceiveTask+0x38>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
    		HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)rxBuffer, RECEIVE_DATA_SIZE);
 800064c:	2204      	movs	r2, #4
 800064e:	4905      	ldr	r1, [pc, #20]	; (8000664 <StartI2CReceiveTask+0x3c>)
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <StartI2CReceiveTask+0x40>)
 8000652:	f002 fad3 	bl	8002bfc <HAL_I2C_Slave_Receive_IT>
    	}

        osDelay(10); // Short delay or wait for an event
 8000656:	200a      	movs	r0, #10
 8000658:	f006 fc9f 	bl	8006f9a <osDelay>
    	if(startRecieveIT) {
 800065c:	e7ee      	b.n	800063c <StartI2CReceiveTask+0x14>
 800065e:	bf00      	nop
 8000660:	20000091 	.word	0x20000091
 8000664:	200000a0 	.word	0x200000a0
 8000668:	2000036c 	.word	0x2000036c

0800066c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f009 f9e4 	bl	8009a46 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800067e:	4602      	mov	r2, r0
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800068a:	f000 fa1f 	bl	8000acc <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800068e:	4603      	mov	r3, r0
					__idx, __base); }
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0800afe8 	.word	0x0800afe8
 800069c:	0800a529 	.word	0x0800a529

080006a0 <HAL_UART_RxCpltCallback>:
    extern volatile uint32_t timer1;
    extern volatile uint8_t timer3;
    extern volatile uint8_t timer4;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <HAL_UART_RxCpltCallback+0x58>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d11d      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x4e>
		UART2_Received = 1;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_UART_RxCpltCallback+0x5c>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
		if(receivedChar == '\x7f') {
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_RxCpltCallback+0x60>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b7f      	cmp	r3, #127	; 0x7f
 80006be:	d110      	bne.n	80006e2 <HAL_UART_RxCpltCallback+0x42>
			const char backspaceSeq[3] = {'\b', ' ', '\b'};
 80006c0:	4a10      	ldr	r2, [pc, #64]	; (8000704 <HAL_UART_RxCpltCallback+0x64>)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	4611      	mov	r1, r2
 80006ca:	8019      	strh	r1, [r3, #0]
 80006cc:	3302      	adds	r3, #2
 80006ce:	0c12      	lsrs	r2, r2, #16
 80006d0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t*)backspaceSeq, sizeof(backspaceSeq), 100);
 80006d2:	f107 010c 	add.w	r1, r7, #12
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2203      	movs	r2, #3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fbb5 	bl	8005e4a <HAL_UART_Transmit>
		else {
			HAL_UART_Transmit(huart, &receivedChar, 1, 100);
		}

	}
}
 80006e0:	e005      	b.n	80006ee <HAL_UART_RxCpltCallback+0x4e>
			HAL_UART_Transmit(huart, &receivedChar, 1, 100);
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	4906      	ldr	r1, [pc, #24]	; (8000700 <HAL_UART_RxCpltCallback+0x60>)
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f005 fbae 	bl	8005e4a <HAL_UART_Transmit>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40004400 	.word	0x40004400
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	200000b4 	.word	0x200000b4
 8000704:	0800aff0 	.word	0x0800aff0

08000708 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void processCommand(std::string str) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

	//Remove any whitespace in the beginning.
	while(str.length() && (str[0] == ' ')) {
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f009 f93e 	bl	8009992 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
 800071c:	2100      	movs	r1, #0
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f009 f943 	bl	80099aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000724:	4603      	mov	r3, r0
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b20      	cmp	r3, #32
 800072a:	d101      	bne.n	8000730 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
 800072c:	2301      	movs	r3, #1
 800072e:	e000      	b.n	8000732 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
 8000730:	2300      	movs	r3, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
		str.erase(0,1);
 8000736:	2201      	movs	r2, #1
 8000738:	2100      	movs	r1, #0
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f009 f95e 	bl	80099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
	while(str.length() && (str[0] == ' ')) {
 8000740:	e7e6      	b.n	8000710 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8>
	}

	if(str.find("debug ") == 0) {
 8000742:	2200      	movs	r2, #0
 8000744:	495c      	ldr	r1, [pc, #368]	; (80008b8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0>)
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f009 f9b0 	bl	8009aac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d051      	beq.n	8000800 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf8>
		/* Do debug commands */

		if(str.length() > 5) {
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f009 f918 	bl	8009992 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000762:	4603      	mov	r3, r0
 8000764:	2b05      	cmp	r3, #5
 8000766:	bf8c      	ite	hi
 8000768:	2301      	movhi	r3, #1
 800076a:	2300      	movls	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d042      	beq.n	80007f8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>
			int num = stoi(str.substr(5));
 8000772:	f107 0008 	add.w	r0, r7, #8
 8000776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077a:	2205      	movs	r2, #5
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	f009 fa35 	bl	8009bec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	220a      	movs	r2, #10
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff6e 	bl	800066c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8000790:	63b8      	str	r0, [r7, #56]	; 0x38
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4618      	mov	r0, r3
 8000798:	f009 f8f5 	bl	8009986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			if (num > 31 || num < 0) {
 800079c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800079e:	2b1f      	cmp	r3, #31
 80007a0:	dc02      	bgt.n	80007a8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
 80007a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	da03      	bge.n	80007b0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>
				printf("Please enter a value between 0-31!\r\n");
 80007a8:	4844      	ldr	r0, [pc, #272]	; (80008bc <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b4>)
 80007aa:	f009 fd31 	bl	800a210 <puts>

	}
	else {
		printf("Invalid Input!\r\n");
	}
}
 80007ae:	e07e      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
				if(num == 0) debugEnable = 0;
 80007b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb6>
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	e077      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
					debugEnable ^= (1 << num);  // Toggle bit
 80007be:	2201      	movs	r2, #1
 80007c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4053      	eors	r3, r2
 80007ce:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 80007d0:	6013      	str	r3, [r2, #0]
					printf("Debug %i %s.\r\n", num, (debugEnable & (1 << num)) ? "enabled" : "disabled");
 80007d2:	2201      	movs	r2, #1
 80007d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4013      	ands	r3, r2
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe2>
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>)
 80007e8:	e000      	b.n	80007ec <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c0>)
 80007ec:	461a      	mov	r2, r3
 80007ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80007f0:	4836      	ldr	r0, [pc, #216]	; (80008cc <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c4>)
 80007f2:	f009 fc87 	bl	800a104 <iprintf>
}
 80007f6:	e05a      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
			printf("Missing parameter\r\n");
 80007f8:	4835      	ldr	r0, [pc, #212]	; (80008d0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c8>)
 80007fa:	f009 fd09 	bl	800a210 <puts>
}
 80007fe:	e056      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
	else if(str.find("test") == 0) {
 8000800:	2200      	movs	r2, #0
 8000802:	4934      	ldr	r1, [pc, #208]	; (80008d4 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1cc>)
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f009 f951 	bl	8009aac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf0c      	ite	eq
 8000810:	2301      	moveq	r3, #1
 8000812:	2300      	movne	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d003      	beq.n	8000822 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a>
		printf("Test working!\r\n");
 800081a:	482f      	ldr	r0, [pc, #188]	; (80008d8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d0>)
 800081c:	f009 fcf8 	bl	800a210 <puts>
}
 8000820:	e045      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
	else if (str.find("motor") == 0) {
 8000822:	2200      	movs	r2, #0
 8000824:	492d      	ldr	r1, [pc, #180]	; (80008dc <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>)
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f009 f940 	bl	8009aac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d035      	beq.n	80008a8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a0>
		if(str.length() > 5) {
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f009 f8a8 	bl	8009992 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000842:	4603      	mov	r3, r0
 8000844:	2b05      	cmp	r3, #5
 8000846:	bf8c      	ite	hi
 8000848:	2301      	movhi	r3, #1
 800084a:	2300      	movls	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d026      	beq.n	80008a0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x198>
			int num = stoi(str.substr(5));
 8000852:	f107 0020 	add.w	r0, r7, #32
 8000856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085a:	2205      	movs	r2, #5
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f009 f9c5 	bl	8009bec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	220a      	movs	r2, #10
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fefe 	bl	800066c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8000870:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f009 f885 	bl	8009986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			printf("Motor speed %i\r\n", num);
 800087c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>)
 8000880:	f009 fc40 	bl	800a104 <iprintf>
			motor1.setSpeed(num);
 8000884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1dc>)
 8000888:	f000 fd32 	bl	80012f0 <_ZN12StepperMotor8setSpeedEi>
			timer1 = 0;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e0>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
			debugEnable |= 1;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b8>)
 800089c:	6013      	str	r3, [r2, #0]
}
 800089e:	e006      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
			printf("Missing parameter\r\n");
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1c8>)
 80008a2:	f009 fcb5 	bl	800a210 <puts>
}
 80008a6:	e002      	b.n	80008ae <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
		printf("Invalid Input!\r\n");
 80008a8:	4810      	ldr	r0, [pc, #64]	; (80008ec <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e4>)
 80008aa:	f009 fcb1 	bl	800a210 <puts>
}
 80008ae:	bf00      	nop
 80008b0:	3740      	adds	r7, #64	; 0x40
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800aff4 	.word	0x0800aff4
 80008bc:	0800affc 	.word	0x0800affc
 80008c0:	200000b0 	.word	0x200000b0
 80008c4:	0800b020 	.word	0x0800b020
 80008c8:	0800b028 	.word	0x0800b028
 80008cc:	0800b034 	.word	0x0800b034
 80008d0:	0800b044 	.word	0x0800b044
 80008d4:	0800b058 	.word	0x0800b058
 80008d8:	0800b060 	.word	0x0800b060
 80008dc:	0800b070 	.word	0x0800b070
 80008e0:	0800b078 	.word	0x0800b078
 80008e4:	2000055c 	.word	0x2000055c
 80008e8:	20000554 	.word	0x20000554
 80008ec:	0800b08c 	.word	0x0800b08c

080008f0 <StartConsoleTask>:

void StartConsoleTask(void const * argument) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b092      	sub	sp, #72	; 0x48
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	std::string input = "";
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 fec5 	bl	800968c <_ZNSaIcEC1Ev>
 8000902:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	494a      	ldr	r1, [pc, #296]	; (8000a34 <StartConsoleTask+0x144>)
 800090c:	4618      	mov	r0, r3
 800090e:	f009 f935 	bl	8009b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4618      	mov	r0, r3
 8000918:	f008 feb9 	bl	800968e <_ZNSaIcED1Ev>
	char ch;

	osDelay(10);
 800091c:	200a      	movs	r0, #10
 800091e:	f006 fb3c 	bl	8006f9a <osDelay>

	//Start UART Recieve interrupt
	HAL_UART_Receive_IT(&huart2, &receivedChar, 1);
 8000922:	2201      	movs	r2, #1
 8000924:	4944      	ldr	r1, [pc, #272]	; (8000a38 <StartConsoleTask+0x148>)
 8000926:	4845      	ldr	r0, [pc, #276]	; (8000a3c <StartConsoleTask+0x14c>)
 8000928:	f005 fb21 	bl	8005f6e <HAL_UART_Receive_IT>

	while(1) {
		if(UART2_Received) {
 800092c:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <StartConsoleTask+0x150>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d063      	beq.n	80009fc <StartConsoleTask+0x10c>
			UART2_Received = 0;
 8000934:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <StartConsoleTask+0x150>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
			ch = receivedChar;
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <StartConsoleTask+0x148>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			switch(ch) {
 8000942:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000946:	2b0d      	cmp	r3, #13
 8000948:	d012      	beq.n	8000970 <StartConsoleTask+0x80>
 800094a:	2b7f      	cmp	r3, #127	; 0x7f
 800094c:	d138      	bne.n	80009c0 <StartConsoleTask+0xd0>
			case '\x7f':
				if (!input.empty()) input.pop_back();
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f009 f824 	bl	80099a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8000958:	4603      	mov	r3, r0
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d043      	beq.n	80009ec <StartConsoleTask+0xfc>
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4618      	mov	r0, r3
 800096a:	f009 f865 	bl	8009a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
				break;
 800096e:	e03d      	b.n	80009ec <StartConsoleTask+0xfc>
			case '\r':
				if(input.length()) {
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4618      	mov	r0, r3
 8000976:	f009 f80c 	bl	8009992 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d016      	beq.n	80009b8 <StartConsoleTask+0xc8>
					processCommand(input);
 800098a:	f107 020c 	add.w	r2, r7, #12
 800098e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f009 f8bd 	bl	8009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800099a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff feb2 	bl	8000708 <_Z14processCommandNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80009a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a8:	4618      	mov	r0, r3
 80009aa:	f008 ffec 	bl	8009986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					input.clear();
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 ffef 	bl	8009996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
				}
				printf("\r\n");
 80009b8:	4822      	ldr	r0, [pc, #136]	; (8000a44 <StartConsoleTask+0x154>)
 80009ba:	f009 fc29 	bl	800a210 <puts>
				break;
 80009be:	e018      	b.n	80009f2 <StartConsoleTask+0x102>
			default:
				if(input.length() < MAX_STRING_SIZE)	input += ch;
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 ffe4 	bl	8009992 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b1f      	cmp	r3, #31
 80009ce:	bf94      	ite	ls
 80009d0:	2301      	movls	r3, #1
 80009d2:	2300      	movhi	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <StartConsoleTask+0x100>
 80009da:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f009 f802 	bl	80099ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
				break;
 80009ea:	e001      	b.n	80009f0 <StartConsoleTask+0x100>
				break;
 80009ec:	bf00      	nop
 80009ee:	e000      	b.n	80009f2 <StartConsoleTask+0x102>
				break;
 80009f0:	bf00      	nop
			}
			HAL_UART_Receive_IT(&huart2, &receivedChar, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	4910      	ldr	r1, [pc, #64]	; (8000a38 <StartConsoleTask+0x148>)
 80009f6:	4811      	ldr	r0, [pc, #68]	; (8000a3c <StartConsoleTask+0x14c>)
 80009f8:	f005 fab9 	bl	8005f6e <HAL_UART_Receive_IT>
		}
		// Debug prints
		uint32_t currTick = HAL_GetTick();
 80009fc:	f001 f934 	bl	8001c68 <HAL_GetTick>
 8000a00:	6438      	str	r0, [r7, #64]	; 0x40
		if (currTick - ticks >= 1000) {
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <StartConsoleTask+0x158>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0e:	d38d      	bcc.n	800092c <StartConsoleTask+0x3c>
		    ticks = currTick;
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <StartConsoleTask+0x158>)
 8000a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a14:	6013      	str	r3, [r2, #0]
		    if (debugEnable & 1) {
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <StartConsoleTask+0x15c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d084      	beq.n	800092c <StartConsoleTask+0x3c>
		        printf("Time: %i Pulses: %i\r\n", currTick, timer1);
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <StartConsoleTask+0x160>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <StartConsoleTask+0x164>)
 8000a2c:	f009 fb6a 	bl	800a104 <iprintf>
		    }
		}
	}
 8000a30:	e77c      	b.n	800092c <StartConsoleTask+0x3c>
 8000a32:	bf00      	nop
 8000a34:	0800b09c 	.word	0x0800b09c
 8000a38:	200000b4 	.word	0x200000b4
 8000a3c:	200004f8 	.word	0x200004f8
 8000a40:	200000a8 	.word	0x200000a8
 8000a44:	0800b0a0 	.word	0x0800b0a0
 8000a48:	200000ac 	.word	0x200000ac
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	20000554 	.word	0x20000554
 8000a54:	0800b0a4 	.word	0x0800b0a4

08000a58 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	f009 f8fc 	bl	8009c5c <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	f009 f8f6 	bl	8009c5c <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	f009 f8e8 	bl	8009c5c <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf0c      	ite	eq
 8000a94:	2301      	moveq	r3, #1
 8000a96:	2300      	movne	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8000a9e:	f009 f8dd 	bl	8009c5c <__errno>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8000abe:	2300      	movs	r3, #0
	  }
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08b      	sub	sp, #44	; 0x2c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ffba 	bl	8000a58 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8000ae4:	f107 0118 	add.w	r1, r7, #24
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	4798      	blx	r3
 8000af0:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d102      	bne.n	8000b00 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8000afa:	68b8      	ldr	r0, [r7, #8]
 8000afc:	f008 fdce 	bl	800969c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8000b00:	f009 f8ac 	bl	8009c5c <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8000b08:	2b22      	cmp	r3, #34	; 0x22
 8000b0a:	d006      	beq.n	8000b1a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b10:	f7ff ffd0 	bl	8000ab4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8000b1e:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8000b24:	68b8      	ldr	r0, [r7, #8]
 8000b26:	f008 fdbf 	bl	80096a8 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	623b      	str	r3, [r7, #32]

      if (__idx)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d005      	beq.n	8000b40 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	601a      	str	r2, [r3, #0]

      return __ret;
 8000b40:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff9a 	bl	8000a80 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8000b4c:	4623      	mov	r3, r4
    }
 8000b4e:	4618      	mov	r0, r3
 8000b50:	372c      	adds	r7, #44	; 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
	...

08000b58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <vApplicationGetIdleTaskMemory+0x30>)
 8000b6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000b8 	.word	0x200000b8
 8000b88:	2000016c 	.word	0x2000016c

08000b8c <_write>:
    osMutexRelease(UARTMutexHandle);
    return ch;
}


int _write(int file, char *ptr, int len) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    if (file == 1 || file == 2) {
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d002      	beq.n	8000ba4 <_write+0x18>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d115      	bne.n	8000bd0 <_write+0x44>
        osMutexWait(UARTMutexHandle, osWaitForever); // Corrected to use the handle
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <_write+0x50>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 fa21 	bl	8006ff4 <osMutexWait>
        HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <_write+0x54>)
 8000bbe:	f005 f944 	bl	8005e4a <HAL_UART_Transmit>
        osMutexRelease(UARTMutexHandle); // Corrected to use the handle
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <_write+0x50>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f006 fa62 	bl	8007090 <osMutexRelease>
        return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	e001      	b.n	8000bd4 <_write+0x48>
    }
    return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000550 	.word	0x20000550
 8000be0:	200004f8 	.word	0x200004f8

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b0a6      	sub	sp, #152	; 0x98
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f001 f807 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f893 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 faad 	bl	8001150 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf6:	f000 fa8b 	bl	8001110 <MX_DMA_Init>
  MX_I2C1_Init();
 8000bfa:	f000 f8f7 	bl	8000dec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000bfe:	f000 fa5d 	bl	80010bc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c02:	f000 f9a9 	bl	8000f58 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000c06:	f000 f91f 	bl	8000e48 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c0a:	f000 f9fd 	bl	8001008 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UARTMutex */
  osMutexDef(UARTMutex);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  UARTMutexHandle = osMutexCreate(osMutex(UARTMutex));
 8000c1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 f9cf 	bl	8006fc2 <osMutexCreate>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a31      	ldr	r2, [pc, #196]	; (8000cec <main+0x108>)
 8000c28:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c2a:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <main+0x10c>)
 8000c2c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c30:	461d      	mov	r5, r3
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f006 f95c 	bl	8006f02 <osThreadCreate>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <main+0x110>)
 8000c4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2CSendTask */
  osThreadDef(I2CSendTask, StartI2CSendTask, osPriorityNormal, 0, 128);
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <main+0x114>)
 8000c52:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c56:	461d      	mov	r5, r3
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2CSendTaskHandle = osThreadCreate(osThread(I2CSendTask), NULL);
 8000c64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 f949 	bl	8006f02 <osThreadCreate>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <main+0x118>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* definition and creation of ConsoleTask */
  osThreadDef(ConsoleTask, StartConsoleTask, osPriorityNormal, 0, 512);
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <main+0x11c>)
 8000c78:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c7c:	461d      	mov	r5, r3
 8000c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsoleTaskHandle = osThreadCreate(osThread(ConsoleTask), NULL);
 8000c8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f006 f936 	bl	8006f02 <osThreadCreate>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <main+0x120>)
 8000c9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2CReceiveTask */
  osThreadDef(I2CReceiveTask, StartI2CReceiveTask, osPriorityNormal, 0, 128);
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <main+0x124>)
 8000c9e:	f107 0420 	add.w	r4, r7, #32
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2CReceiveTaskHandle = osThreadCreate(osThread(I2CReceiveTask), NULL);
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f006 f923 	bl	8006f02 <osThreadCreate>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <main+0x128>)
 8000cc0:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorControlTas */
  osThreadDef(MotorControlTas, StartMotorControlTask, osPriorityNormal, 0, 512);
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <main+0x12c>)
 8000cc4:	1d3c      	adds	r4, r7, #4
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f006 f912 	bl	8006f02 <osThreadCreate>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <main+0x130>)
 8000ce2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ce4:	f006 f906 	bl	8006ef4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <main+0x104>
 8000cea:	bf00      	nop
 8000cec:	20000550 	.word	0x20000550
 8000cf0:	0800b100 	.word	0x0800b100
 8000cf4:	2000053c 	.word	0x2000053c
 8000cf8:	0800b11c 	.word	0x0800b11c
 8000cfc:	20000540 	.word	0x20000540
 8000d00:	0800b138 	.word	0x0800b138
 8000d04:	20000544 	.word	0x20000544
 8000d08:	0800b154 	.word	0x0800b154
 8000d0c:	20000548 	.word	0x20000548
 8000d10:	0800b170 	.word	0x0800b170
 8000d14:	2000054c 	.word	0x2000054c

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2230      	movs	r2, #48	; 0x30
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f009 f904 	bl	8009f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <SystemClock_Config+0xcc>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <SystemClock_Config+0xd0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <SystemClock_Config+0xd0>)
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d90:	2354      	movs	r3, #84	; 0x54
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fc63 	bl	800466c <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dac:	f000 fa70 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fec5 	bl	8004b5c <HAL_RCC_ClockConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dd8:	f000 fa5a 	bl	8001290 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3750      	adds	r7, #80	; 0x50
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40007000 	.word	0x40007000

08000dec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <MX_I2C1_Init+0x54>)
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x58>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e04:	2220      	movs	r2, #32
 8000e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e2a:	f001 fd33 	bl	8002894 <HAL_I2C_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e34:	f000 fa2c 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000036c 	.word	0x2000036c
 8000e40:	40005400 	.word	0x40005400
 8000e44:	000186a0 	.word	0x000186a0

08000e48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b092      	sub	sp, #72	; 0x48
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2220      	movs	r2, #32
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f009 f85e 	bl	8009f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e7a:	4a36      	ldr	r2, [pc, #216]	; (8000f54 <MX_TIM1_Init+0x10c>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e80:	2253      	movs	r2, #83	; 0x53
 8000e82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e8c:	2263      	movs	r2, #99	; 0x63
 8000e8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea2:	482b      	ldr	r0, [pc, #172]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000ea4:	f004 f928 	bl	80050f8 <HAL_TIM_PWM_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f000 f9ef 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4823      	ldr	r0, [pc, #140]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000ec2:	f004 fea1 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000ecc:	f000 f9e0 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed0:	2360      	movs	r3, #96	; 0x60
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4816      	ldr	r0, [pc, #88]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000ef6:	f004 fb6b 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000f00:	f000 f9c6 	bl	8001290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000f28:	f004 fedc 	bl	8005ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000f32:	f000 f9ad 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f36:	2019      	movs	r0, #25
 8000f38:	f000 ff76 	bl	8001e28 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim1);
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000f3e:	f004 f879 	bl	8005034 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM1_Init+0x108>)
 8000f44:	f000 fba4 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3748      	adds	r7, #72	; 0x48
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200003c0 	.word	0x200003c0
 8000f54:	40010000 	.word	0x40010000

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <MX_TIM3_Init+0xac>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f8e:	2269      	movs	r2, #105	; 0x69
 8000f90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000fa0:	f004 f8aa 	bl	80050f8 <HAL_TIM_PWM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000faa:	f000 f971 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000fbe:	f004 fe23 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000fc8:	f000 f962 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fcc:	2360      	movs	r3, #96	; 0x60
 8000fce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 75;
 8000fd0:	234b      	movs	r3, #75	; 0x4b
 8000fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2204      	movs	r2, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000fe4:	f004 faf4 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000fee:	f000 f94f 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <MX_TIM3_Init+0xa8>)
 8000ff4:	f000 fb4c 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000408 	.word	0x20000408
 8001004:	40000400 	.word	0x40000400

08001008 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_TIM4_Init+0xac>)
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <MX_TIM4_Init+0xb0>)
 800102e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_TIM4_Init+0xac>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_TIM4_Init+0xac>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_TIM4_Init+0xac>)
 800103e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001042:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_TIM4_Init+0xac>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM4_Init+0xac>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001050:	4818      	ldr	r0, [pc, #96]	; (80010b4 <MX_TIM4_Init+0xac>)
 8001052:	f004 f851 	bl	80050f8 <HAL_TIM_PWM_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800105c:	f000 f918 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_TIM4_Init+0xac>)
 8001070:	f004 fdca 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800107a:	f000 f909 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107e:	2360      	movs	r3, #96	; 0x60
 8001080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_TIM4_Init+0xac>)
 8001096:	f004 fa9b 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80010a0:	f000 f8f6 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MX_TIM4_Init+0xac>)
 80010a6:	f000 faf3 	bl	8001690 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000450 	.word	0x20000450
 80010b8:	40000800 	.word	0x40000800

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART2_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f004 fe5c 	bl	8005db0 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f8c7 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200004f8 	.word	0x200004f8
 800110c:	40004400 	.word	0x40004400

08001110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_DMA_Init+0x3c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <MX_DMA_Init+0x3c>)
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2010      	movs	r0, #16
 8001138:	f000 fe5a 	bl	8001df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800113c:	2010      	movs	r0, #16
 800113e:	f000 fe73 	bl	8001e28 <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_GPIO_Init+0xb8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a26      	ldr	r2, [pc, #152]	; (8001208 <MX_GPIO_Init+0xb8>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_GPIO_Init+0xb8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_GPIO_Init+0xb8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <MX_GPIO_Init+0xb8>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_GPIO_Init+0xb8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <MX_GPIO_Init+0xbc>)
 80011de:	f001 fb3f 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_GPIO_Init+0xbc>)
 80011fc:	f001 f9ac 	bl	8002558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400

08001210 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f005 febe 	bl	8006f9a <osDelay>
 800121e:	e7fb      	b.n	8001218 <StartDefaultTask+0x8>

08001220 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001230:	d102      	bne.n	8001238 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001232:	f000 fd05 	bl	8001c40 <HAL_IncTick>
  }
  else if (htim->Instance == TIM4) {
    timer4 = 1;
  }
  /* USER CODE END Callback 1 */
}
 8001236:	e01b      	b.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x50>
  else if (htim->Instance == TIM1) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d105      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x2e>
    timer1++;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	e010      	b.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x50>
  else if (htim->Instance == TIM3) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d103      	bne.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x40>
    timer3 = 1;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
}
 800125e:	e007      	b.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x50>
  else if (htim->Instance == TIM4) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d102      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x50>
    timer4 = 1;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010000 	.word	0x40010000
 800127c:	20000554 	.word	0x20000554
 8001280:	40000400 	.word	0x40000400
 8001284:	20000558 	.word	0x20000558
 8001288:	40000800 	.word	0x40000800
 800128c:	20000559 	.word	0x20000559

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>

0800129a <_ZN12StepperMotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
}



// Constructor to initialize GPIO ports, pins, and PWM timer
StepperMotor::StepperMotor(GPIO_TypeDef *enablePort, uint16_t enablePin,
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	80fb      	strh	r3, [r7, #6]
             GPIO_TypeDef *dirPort, uint16_t dirPin,
             TIM_HandleTypeDef *htim, uint32_t timChannel)
    : enablePort(enablePort), enablePin(enablePin),
      dirPort(dirPort), dirPin(dirPin), htim(htim), timChannel(timChannel),
      currentStep(0), targetStep(0), isMoving(false) {}
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	809a      	strh	r2, [r3, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8b3a      	ldrh	r2, [r7, #24]
 80012c0:	819a      	strh	r2, [r3, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_ZN12StepperMotor8setSpeedEi>:
void StepperMotor::setTarget(int steps) {
    targetStep = steps;
    isMoving = true;
}

void StepperMotor::setSpeed(int speed) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    // Take input of speed from 0 to 100
    if (speed <= 0) {
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dc0a      	bgt.n	8001316 <_ZN12StepperMotor8setSpeedEi+0x26>
    	speed = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
//    	HAL_GPIO_WritePin(enablePort, enablePin, GPIO_PIN_RESET);
    	HAL_TIM_PWM_Stop(htim, timChannel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f003 fff2 	bl	80052f8 <HAL_TIM_PWM_Stop>
    	return;
 8001314:	e052      	b.n	80013bc <_ZN12StepperMotor8setSpeedEi+0xcc>
    }
    if (speed > MAX_FREQ) {
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800131c:	dd02      	ble.n	8001324 <_ZN12StepperMotor8setSpeedEi+0x34>
    	speed = MAX_FREQ;
 800131e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001322:	603b      	str	r3, [r7, #0]
    }

    uint32_t period = CLOCK_SPEED / speed;
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <_ZN12StepperMotor8setSpeedEi+0xd4>)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	fb92 f3f3 	sdiv	r3, r2, r3
 800132c:	60bb      	str	r3, [r7, #8]
    uint32_t pulse = (period) / 2;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
    period--;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3b01      	subs	r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
    if(pulse > 0xFFFF) pulse = 0xFFFF;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d302      	bcc.n	8001348 <_ZN12StepperMotor8setSpeedEi+0x58>
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(htim, period);           // Set ARR for frequency
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim, timChannel, pulse);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <_ZN12StepperMotor8setSpeedEi+0x7e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
 800136c:	e018      	b.n	80013a0 <_ZN12StepperMotor8setSpeedEi+0xb0>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d105      	bne.n	8001382 <_ZN12StepperMotor8setSpeedEi+0x92>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
 8001380:	e00e      	b.n	80013a0 <_ZN12StepperMotor8setSpeedEi+0xb0>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d105      	bne.n	8001396 <_ZN12StepperMotor8setSpeedEi+0xa6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
 8001394:	e004      	b.n	80013a0 <_ZN12StepperMotor8setSpeedEi+0xb0>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(htim, timChannel);  // Start PWM output
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4610      	mov	r0, r2
 80013ac:	f003 fef4 	bl	8005198 <HAL_TIM_PWM_Start>

	printf("Period: %i\r\n", period+1);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <_ZN12StepperMotor8setSpeedEi+0xd8>)
 80013b8:	f008 fea4 	bl	800a104 <iprintf>
}
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	000f4240 	.word	0x000f4240
 80013c8:	0800b18c 	.word	0x0800b18c

080013cc <StartMotorControlTask>:

StepperMotor motor1(GPIOB, GPIO_PIN_10, GPIOA, GPIO_PIN_9, &htim1, TIM_CHANNEL_2);
uint32_t pulses1 = 0;

void StartMotorControlTask(void const * argument) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	while(1) {
 80013d4:	e7fe      	b.n	80013d4 <StartMotorControlTask+0x8>
	...

080013d8 <_Z41__static_initialization_and_destruction_0ii>:
//		if(timer1 == 1) {
//			timer1 = 0;
//			pulses1++;
//		}
	}
}
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d112      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x36>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10d      	bne.n	800140e <_Z41__static_initialization_and_destruction_0ii+0x36>
StepperMotor motor1(GPIOB, GPIO_PIN_10, GPIOA, GPIO_PIN_9, &htim1, TIM_CHANNEL_2);
 80013f2:	2304      	movs	r3, #4
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001406:	4906      	ldr	r1, [pc, #24]	; (8001420 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800140a:	f7ff ff46 	bl	800129a <_ZN12StepperMotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200003c0 	.word	0x200003c0
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	2000055c 	.word	0x2000055c

08001428 <_GLOBAL__sub_I__ZN12StepperMotorC2EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefm>:
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
 800142c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff ffd1 	bl	80013d8 <_Z41__static_initialization_and_destruction_0ii>
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_MspInit+0x54>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_MspInit+0x54>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_MspInit+0x54>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_MspInit+0x54>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_MspInit+0x54>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	210f      	movs	r1, #15
 800147a:	f06f 0001 	mvn.w	r0, #1
 800147e:	f000 fcb7 	bl	8001df0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_I2C_MspInit+0xa4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d13c      	bne.n	800152c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_I2C_MspInit+0xa8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_I2C_MspInit+0xa8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_I2C_MspInit+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4814      	ldr	r0, [pc, #80]	; (800153c <HAL_I2C_MspInit+0xac>)
 80014ec:	f001 f834 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_I2C_MspInit+0xa8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_I2C_MspInit+0xa8>)
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2105      	movs	r1, #5
 8001510:	201f      	movs	r0, #31
 8001512:	f000 fc6d 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001516:	201f      	movs	r0, #31
 8001518:	f000 fc86 	bl	8001e28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2105      	movs	r1, #5
 8001520:	2020      	movs	r0, #32
 8001522:	f000 fc65 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001526:	2020      	movs	r0, #32
 8001528:	f000 fc7e 	bl	8001e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_TIM_PWM_MspInit+0x138>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12e      	bne.n	80015b0 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	2018      	movs	r0, #24
 8001574:	f000 fc3c 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001578:	2018      	movs	r0, #24
 800157a:	f000 fc55 	bl	8001e28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	2019      	movs	r0, #25
 8001584:	f000 fc34 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001588:	2019      	movs	r0, #25
 800158a:	f000 fc4d 	bl	8001e28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2105      	movs	r1, #5
 8001592:	201a      	movs	r0, #26
 8001594:	f000 fc2c 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001598:	201a      	movs	r0, #26
 800159a:	f000 fc45 	bl	8001e28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2105      	movs	r1, #5
 80015a2:	201b      	movs	r0, #27
 80015a4:	f000 fc24 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015a8:	201b      	movs	r0, #27
 80015aa:	f000 fc3d 	bl	8001e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015ae:	e05e      	b.n	800166e <HAL_TIM_PWM_MspInit+0x12e>
  else if(htim_pwm->Instance==TIM3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_TIM_PWM_MspInit+0x140>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d146      	bne.n	8001648 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a2e      	ldr	r2, [pc, #184]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 80015d8:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_TIM_PWM_MspInit+0x148>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 80015de:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80015e2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 80015f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 80015fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fe:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800161a:	481a      	ldr	r0, [pc, #104]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 800161c:	f000 fc12 	bl	8001e44 <HAL_DMA_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_TIM_PWM_MspInit+0xea>
      Error_Handler();
 8001626:	f7ff fe33 	bl	8001290 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_TIM_PWM_MspInit+0x144>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2105      	movs	r1, #5
 800163a:	201d      	movs	r0, #29
 800163c:	f000 fbd8 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001640:	201d      	movs	r0, #29
 8001642:	f000 fbf1 	bl	8001e28 <HAL_NVIC_EnableIRQ>
}
 8001646:	e012      	b.n	800166e <HAL_TIM_PWM_MspInit+0x12e>
  else if(htim_pwm->Instance==TIM4)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_TIM_PWM_MspInit+0x14c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10d      	bne.n	800166e <HAL_TIM_PWM_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_TIM_PWM_MspInit+0x13c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40010000 	.word	0x40010000
 800167c:	40023800 	.word	0x40023800
 8001680:	40000400 	.word	0x40000400
 8001684:	20000498 	.word	0x20000498
 8001688:	40026088 	.word	0x40026088
 800168c:	40000800 	.word	0x40000800

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a36      	ldr	r2, [pc, #216]	; (8001788 <HAL_TIM_MspPostInit+0xf8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d11f      	bne.n	80016f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a34      	ldr	r2, [pc, #208]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4829      	ldr	r0, [pc, #164]	; (8001790 <HAL_TIM_MspPostInit+0x100>)
 80016ec:	f000 ff34 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016f0:	e046      	b.n	8001780 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_TIM_MspPostInit+0x104>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d11e      	bne.n	800173a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6313      	str	r3, [r2, #48]	; 0x30
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001728:	2302      	movs	r3, #2
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4819      	ldr	r0, [pc, #100]	; (8001798 <HAL_TIM_MspPostInit+0x108>)
 8001734:	f000 ff10 	bl	8002558 <HAL_GPIO_Init>
}
 8001738:	e022      	b.n	8001780 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_TIM_MspPostInit+0x10c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d11d      	bne.n	8001780 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_TIM_MspPostInit+0xfc>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001760:	2340      	movs	r3, #64	; 0x40
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001770:	2302      	movs	r3, #2
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_TIM_MspPostInit+0x110>)
 800177c:	f000 feec 	bl	8002558 <HAL_GPIO_Init>
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40000400 	.word	0x40000400
 8001798:	40020800 	.word	0x40020800
 800179c:	40000800 	.word	0x40000800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_UART_MspInit+0x94>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d133      	bne.n	800182e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_UART_MspInit+0x98>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_UART_MspInit+0x98>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_UART_MspInit+0x98>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x98>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_UART_MspInit+0x98>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_UART_MspInit+0x98>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fe:	230c      	movs	r3, #12
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800180e:	2307      	movs	r3, #7
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_UART_MspInit+0x9c>)
 800181a:	f000 fe9d 	bl	8002558 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	2026      	movs	r0, #38	; 0x26
 8001824:	f000 fae4 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001828:	2026      	movs	r0, #38	; 0x26
 800182a:	f000 fafd 	bl	8001e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_InitTick+0xe8>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_InitTick+0xe8>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_InitTick+0xe8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001870:	f107 0210 	add.w	r2, r7, #16
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fb4e 	bl	8004f1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d103      	bne.n	8001892 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800188a:	f003 fb1f 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800188e:	6378      	str	r0, [r7, #52]	; 0x34
 8001890:	e004      	b.n	800189c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001892:	f003 fb1b 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8001896:	4603      	mov	r3, r0
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_InitTick+0xec>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9b      	lsrs	r3, r3, #18
 80018a6:	3b01      	subs	r3, #1
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_InitTick+0xf0>)
 80018ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_InitTick+0xf0>)
 80018b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018ba:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <HAL_InitTick+0xf0>)
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_InitTick+0xf0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_InitTick+0xf0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_InitTick+0xf0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80018d2:	4818      	ldr	r0, [pc, #96]	; (8001934 <HAL_InitTick+0xf0>)
 80018d4:	f003 fb54 	bl	8004f80 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11b      	bne.n	800191e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <HAL_InitTick+0xf0>)
 80018e8:	f003 fba4 	bl	8005034 <HAL_TIM_Base_Start_IT>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d111      	bne.n	800191e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fa:	201c      	movs	r0, #28
 80018fc:	f000 fa94 	bl	8001e28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d808      	bhi.n	8001918 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001906:	2200      	movs	r2, #0
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	201c      	movs	r0, #28
 800190c:	f000 fa70 	bl	8001df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_InitTick+0xf4>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e002      	b.n	800191e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800191e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001922:	4618      	mov	r0, r3
 8001924:	3738      	adds	r7, #56	; 0x38
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	431bde83 	.word	0x431bde83
 8001934:	20000580 	.word	0x20000580
 8001938:	20000004 	.word	0x20000004

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <DMA1_Stream5_IRQHandler+0x10>)
 800196e:	f000 fba9 	bl	80020c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000498 	.word	0x20000498

0800197c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001982:	f003 fd1d 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200003c0 	.word	0x200003c0

08001990 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001996:	f003 fd13 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003c0 	.word	0x200003c0

080019a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80019aa:	f003 fd09 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200003c0 	.word	0x200003c0

080019b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM1_CC_IRQHandler+0x10>)
 80019be:	f003 fcff 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200003c0 	.word	0x200003c0

080019cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM2_IRQHandler+0x10>)
 80019d2:	f003 fcf5 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000580 	.word	0x20000580

080019e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM3_IRQHandler+0x10>)
 80019e6:	f003 fceb 	bl	80053c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000408 	.word	0x20000408

080019f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <I2C1_EV_IRQHandler+0x10>)
 80019fa:	f001 f96f 	bl	8002cdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000036c 	.word	0x2000036c

08001a08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <I2C1_ER_IRQHandler+0x10>)
 8001a0e:	f001 fad6 	bl	8002fbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000036c 	.word	0x2000036c

08001a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <USART2_IRQHandler+0x10>)
 8001a22:	f004 fad5 	bl	8005fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200004f8 	.word	0x200004f8

08001a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_kill>:

int _kill(int pid, int sig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4a:	f008 f907 	bl	8009c5c <__errno>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2216      	movs	r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
  return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_exit>:

void _exit (int status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffe7 	bl	8001a40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0x12>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
  }

  return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_close>:
  }
  return len;
}

int _close(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_isatty>:

int _isatty(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f008 f888 	bl	8009c5c <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20018000 	.word	0x20018000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	200005c8 	.word	0x200005c8
 8001b80:	20004338 	.word	0x20004338

08001b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc4:	4c0b      	ldr	r4, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd2:	f7ff ffd7 	bl	8001b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f008 f93d 	bl	8009e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7ff f803 	bl	8000be4 <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001bec:	0800b4a4 	.word	0x0800b4a4
  ldr r2, =_sbss
 8001bf0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001bf4:	20004338 	.word	0x20004338

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f8d8 	bl	8001dda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f7ff fe0a 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fc02 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000008 	.word	0x20000008
 8001c64:	200005cc 	.word	0x200005cc

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200005cc 	.word	0x200005cc

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff4c 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e02:	f7ff ff61 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	6978      	ldr	r0, [r7, #20]
 8001e0e:	f7ff ffb1 	bl	8001d74 <NVIC_EncodePriority>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff80 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff54 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ff0a 	bl	8001c68 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e099      	b.n	8001f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e80:	e00f      	b.n	8001ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e82:	f7ff fef1 	bl	8001c68 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d908      	bls.n	8001ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2203      	movs	r2, #3
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e078      	b.n	8001f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e8      	bne.n	8001e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_DMA_Init+0x158>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4313      	orrs	r3, r2
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f023 0307 	bic.w	r3, r3, #7
 8001f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d117      	bne.n	8001f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00e      	beq.n	8001f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa89 	bl	8002460 <DMA_CheckFifoParam>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f62:	2301      	movs	r3, #1
 8001f64:	e016      	b.n	8001f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fa40 	bl	80023f4 <DMA_CalcBaseAndBitshift>
 8001f74:	4603      	mov	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	223f      	movs	r2, #63	; 0x3f
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	f010803f 	.word	0xf010803f

08001fa0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fae:	f7ff fe5b 	bl	8001c68 <HAL_GetTick>
 8001fb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d008      	beq.n	8001fd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e052      	b.n	8002078 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0216 	bic.w	r2, r2, #22
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_DMA_Abort+0x62>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002022:	e013      	b.n	800204c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002024:	f7ff fe20 	bl	8001c68 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b05      	cmp	r3, #5
 8002030:	d90c      	bls.n	800204c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e015      	b.n	8002078 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e4      	bne.n	8002024 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	223f      	movs	r2, #63	; 0x3f
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d004      	beq.n	800209e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00c      	b.n	80020b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2205      	movs	r2, #5
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d0:	4b8e      	ldr	r3, [pc, #568]	; (800230c <HAL_DMA_IRQHandler+0x248>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a8e      	ldr	r2, [pc, #568]	; (8002310 <HAL_DMA_IRQHandler+0x24c>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0a9b      	lsrs	r3, r3, #10
 80020dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2208      	movs	r2, #8
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01a      	beq.n	8002130 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0204 	bic.w	r2, r2, #4
 8002116:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2208      	movs	r2, #8
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2201      	movs	r2, #1
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d012      	beq.n	8002166 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2201      	movs	r2, #1
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f043 0202 	orr.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2204      	movs	r2, #4
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d012      	beq.n	800219c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2204      	movs	r2, #4
 800218a:	409a      	lsls	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2210      	movs	r2, #16
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d043      	beq.n	8002234 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03c      	beq.n	8002234 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2210      	movs	r2, #16
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d018      	beq.n	8002206 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d108      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d024      	beq.n	8002234 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	e01f      	b.n	8002234 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
 8002204:	e016      	b.n	8002234 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0208 	bic.w	r2, r2, #8
 8002222:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	2220      	movs	r2, #32
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 808f 	beq.w	8002364 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8087 	beq.w	8002364 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225a:	2220      	movs	r2, #32
 800225c:	409a      	lsls	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b05      	cmp	r3, #5
 800226c:	d136      	bne.n	80022dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0216 	bic.w	r2, r2, #22
 800227c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <HAL_DMA_IRQHandler+0x1da>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0208 	bic.w	r2, r2, #8
 80022ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	223f      	movs	r2, #63	; 0x3f
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d07e      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
        }
        return;
 80022da:	e079      	b.n	80023d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01d      	beq.n	8002326 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d031      	beq.n	8002364 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
 8002308:	e02c      	b.n	8002364 <HAL_DMA_IRQHandler+0x2a0>
 800230a:	bf00      	nop
 800230c:	20000000 	.word	0x20000000
 8002310:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d023      	beq.n	8002364 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
 8002324:	e01e      	b.n	8002364 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10f      	bne.n	8002354 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0210 	bic.w	r2, r2, #16
 8002342:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	2b00      	cmp	r3, #0
 800236a:	d032      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d022      	beq.n	80023be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2205      	movs	r2, #5
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3301      	adds	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	d307      	bcc.n	80023ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f2      	bne.n	8002390 <HAL_DMA_IRQHandler+0x2cc>
 80023aa:	e000      	b.n	80023ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
 80023ce:	e000      	b.n	80023d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023d0:	bf00      	nop
    }
  }
}
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e6:	b2db      	uxtb	r3, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b10      	subs	r3, #16
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <DMA_CalcBaseAndBitshift+0x64>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240e:	4a13      	ldr	r2, [pc, #76]	; (800245c <DMA_CalcBaseAndBitshift+0x68>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d909      	bls.n	8002436 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	; 0x58
 8002434:	e007      	b.n	8002446 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	aaaaaaab 	.word	0xaaaaaaab
 800245c:	0800b1bc 	.word	0x0800b1bc

08002460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11f      	bne.n	80024ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d856      	bhi.n	800252e <DMA_CheckFifoParam+0xce>
 8002480:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <DMA_CheckFifoParam+0x28>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	08002499 	.word	0x08002499
 800248c:	080024ab 	.word	0x080024ab
 8002490:	08002499 	.word	0x08002499
 8002494:	0800252f 	.word	0x0800252f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d046      	beq.n	8002532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a8:	e043      	b.n	8002532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024b2:	d140      	bne.n	8002536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b8:	e03d      	b.n	8002536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c2:	d121      	bne.n	8002508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d837      	bhi.n	800253a <DMA_CheckFifoParam+0xda>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <DMA_CheckFifoParam+0x70>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e7 	.word	0x080024e7
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	080024f9 	.word	0x080024f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e030      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d025      	beq.n	800253e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f6:	e022      	b.n	800253e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002500:	d11f      	bne.n	8002542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002506:	e01c      	b.n	8002542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d903      	bls.n	8002516 <DMA_CheckFifoParam+0xb6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d003      	beq.n	800251c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002514:	e018      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      break;
 800251a:	e015      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e00b      	b.n	8002546 <DMA_CheckFifoParam+0xe6>
      break;
 800252e:	bf00      	nop
 8002530:	e00a      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e008      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e006      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e004      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e002      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;   
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
    }
  } 
  
  return status; 
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e159      	b.n	8002828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	f040 8148 	bne.w	8002822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d005      	beq.n	80025aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d130      	bne.n	800260c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b03      	cmp	r3, #3
 8002616:	d017      	beq.n	8002648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d123      	bne.n	800269c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a2 	beq.w	8002822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b57      	ldr	r3, [pc, #348]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b54      	ldr	r3, [pc, #336]	; (8002840 <HAL_GPIO_Init+0x2e8>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x2ec>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a49      	ldr	r2, [pc, #292]	; (8002848 <HAL_GPIO_Init+0x2f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x202>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a48      	ldr	r2, [pc, #288]	; (800284c <HAL_GPIO_Init+0x2f4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x1fe>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_GPIO_Init+0x2f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a46      	ldr	r2, [pc, #280]	; (8002854 <HAL_GPIO_Init+0x2fc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x1f6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a45      	ldr	r2, [pc, #276]	; (8002858 <HAL_GPIO_Init+0x300>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x1f2>
 8002746:	2304      	movs	r3, #4
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274a:	2307      	movs	r3, #7
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x204>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x2ec>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_GPIO_Init+0x304>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_GPIO_Init+0x304>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_GPIO_Init+0x304>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_GPIO_Init+0x304>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <HAL_GPIO_Init+0x304>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f2:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_GPIO_Init+0x304>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_GPIO_Init+0x304>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_GPIO_Init+0x304>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f aea2 	bls.w	8002574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e12b      	b.n	8002afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fde8 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f8:	f002 fae8 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a81      	ldr	r2, [pc, #516]	; (8002b08 <HAL_I2C_Init+0x274>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d807      	bhi.n	8002918 <HAL_I2C_Init+0x84>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a80      	ldr	r2, [pc, #512]	; (8002b0c <HAL_I2C_Init+0x278>)
 800290c:	4293      	cmp	r3, r2
 800290e:	bf94      	ite	ls
 8002910:	2301      	movls	r3, #1
 8002912:	2300      	movhi	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e006      	b.n	8002926 <HAL_I2C_Init+0x92>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a7d      	ldr	r2, [pc, #500]	; (8002b10 <HAL_I2C_Init+0x27c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0e7      	b.n	8002afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a78      	ldr	r2, [pc, #480]	; (8002b14 <HAL_I2C_Init+0x280>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <HAL_I2C_Init+0x274>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d802      	bhi.n	8002968 <HAL_I2C_Init+0xd4>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	e009      	b.n	800297c <HAL_I2C_Init+0xe8>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <HAL_I2C_Init+0x284>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	3301      	adds	r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800298e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	495c      	ldr	r1, [pc, #368]	; (8002b08 <HAL_I2C_Init+0x274>)
 8002998:	428b      	cmp	r3, r1
 800299a:	d819      	bhi.n	80029d0 <HAL_I2C_Init+0x13c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e59      	subs	r1, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029b0:	400b      	ands	r3, r1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_I2C_Init+0x138>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e59      	subs	r1, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	e051      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029cc:	2304      	movs	r3, #4
 80029ce:	e04f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <HAL_I2C_Init+0x168>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e012      	b.n	8002a22 <HAL_I2C_Init+0x18e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x196>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e022      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10e      	bne.n	8002a50 <HAL_I2C_Init+0x1bc>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e58      	subs	r0, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	440b      	add	r3, r1
 8002a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4e:	e00f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	6809      	ldr	r1, [r1, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6911      	ldr	r1, [r2, #16]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68d2      	ldr	r2, [r2, #12]
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	000186a0 	.word	0x000186a0
 8002b0c:	001e847f 	.word	0x001e847f
 8002b10:	003d08ff 	.word	0x003d08ff
 8002b14:	431bde83 	.word	0x431bde83
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d158      	bne.n	8002be8 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_I2C_Slave_Transmit_IT+0x26>
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e051      	b.n	8002bea <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2C_Slave_Transmit_IT+0x38>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e04a      	b.n	8002bea <HAL_I2C_Slave_Transmit_IT+0xce>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d007      	beq.n	8002b7a <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b88:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bca:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002be2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	ffff0000 	.word	0xffff0000

08002bfc <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d158      	bne.n	8002cc8 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_I2C_Slave_Receive_IT+0x26>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e051      	b.n	8002cca <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Slave_Receive_IT+0x38>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e04a      	b.n	8002cca <HAL_I2C_Slave_Receive_IT+0xce>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2222      	movs	r2, #34	; 0x22
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002caa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002cc2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2302      	movs	r3, #2
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	ffff0000 	.word	0xffff0000

08002cdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d003      	beq.n	8002d14 <HAL_I2C_EV_IRQHandler+0x38>
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	f040 80c1 	bne.w	8002e96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_I2C_EV_IRQHandler+0x6e>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d34:	d003      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0x62>
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_EV_IRQHandler+0x66>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x68>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	f000 8132 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_I2C_EV_IRQHandler+0x92>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	0a5b      	lsrs	r3, r3, #9
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 fc67 	bl	8004634 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fd6f 	bl	800384a <I2C_Master_SB>
 8002d6c:	e092      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	08db      	lsrs	r3, r3, #3
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0xb2>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	0a5b      	lsrs	r3, r3, #9
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fde5 	bl	8003956 <I2C_Master_ADD10>
 8002d8c:	e082      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0xd2>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	0a5b      	lsrs	r3, r3, #9
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fdff 	bl	80039aa <I2C_Master_ADDR>
 8002dac:	e072      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03b      	beq.n	8002e32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc8:	f000 80f3 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	09db      	lsrs	r3, r3, #7
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9df 	bl	80031b4 <I2C_MasterTransmit_TXE>
 8002df6:	e04d      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80d6 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	0a5b      	lsrs	r3, r3, #9
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80cf 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e14:	7bbb      	ldrb	r3, [r7, #14]
 8002e16:	2b21      	cmp	r3, #33	; 0x21
 8002e18:	d103      	bne.n	8002e22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa66 	bl	80032ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e20:	e0c7      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	f040 80c4 	bne.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fad4 	bl	80033d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e30:	e0bf      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e40:	f000 80b7 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00f      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x194>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x194>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fb49 	bl	8003500 <I2C_MasterReceive_RXNE>
 8002e6e:	e011      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 809a 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	0a5b      	lsrs	r3, r3, #9
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8093 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fbf2 	bl	8003676 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	e08e      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e007      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x20e>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	0a5b      	lsrs	r3, r3, #9
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 ffb0 	bl	8003e48 <I2C_Slave_ADDR>
 8002ee8:	e066      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_I2C_EV_IRQHandler+0x22e>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	0a5b      	lsrs	r3, r3, #9
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 ffea 	bl	8003edc <I2C_Slave_STOPF>
 8002f08:	e056      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f0a:	7bbb      	ldrb	r3, [r7, #14]
 8002f0c:	2b21      	cmp	r3, #33	; 0x21
 8002f0e:	d002      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f10:	7bbb      	ldrb	r3, [r7, #14]
 8002f12:	2b29      	cmp	r3, #41	; 0x29
 8002f14:	d125      	bne.n	8002f62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	09db      	lsrs	r3, r3, #7
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00f      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x266>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	0a9b      	lsrs	r3, r3, #10
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x266>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fec6 	bl	8003ccc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f40:	e039      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d033      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	0a5b      	lsrs	r3, r3, #9
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02d      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fef3 	bl	8003d46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f60:	e029      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00f      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	0a9b      	lsrs	r3, r3, #10
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fefe 	bl	8003d88 <I2C_SlaveReceive_RXNE>
 8002f8c:	e014      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	0a5b      	lsrs	r3, r3, #9
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 ff2c 	bl	8003e04 <I2C_SlaveReceive_BTF>
 8002fac:	e004      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08a      	sub	sp, #40	; 0x28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <HAL_I2C_ER_IRQHandler+0x4e>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800300a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_I2C_ER_IRQHandler+0x78>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003034:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	0a9b      	lsrs	r3, r3, #10
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03f      	beq.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d039      	beq.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800304e:	7efb      	ldrb	r3, [r7, #27]
 8003050:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003068:	7ebb      	ldrb	r3, [r7, #26]
 800306a:	2b20      	cmp	r3, #32
 800306c:	d112      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10f      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b21      	cmp	r3, #33	; 0x21
 8003078:	d008      	beq.n	800308c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b29      	cmp	r3, #41	; 0x29
 800307e:	d005      	beq.n	800308c <HAL_I2C_ER_IRQHandler+0xce>
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b28      	cmp	r3, #40	; 0x28
 8003084:	d106      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b21      	cmp	r3, #33	; 0x21
 800308a:	d103      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f001 f855 	bl	800413c <I2C_Slave_AF>
 8003092:	e016      	b.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030a6:	7efb      	ldrb	r3, [r7, #27]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d002      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80030ac:	7efb      	ldrb	r3, [r7, #27]
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	0adb      	lsrs	r3, r3, #11
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x12e>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80030ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f001 f88c 	bl	800421c <I2C_ITError>
  }
}
 8003104:	bf00      	nop
 8003106:	3728      	adds	r7, #40	; 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
 8003140:	4613      	mov	r3, r2
 8003142:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d150      	bne.n	800327c <I2C_MasterTransmit_TXE+0xc8>
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b21      	cmp	r3, #33	; 0x21
 80031de:	d14d      	bne.n	800327c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d01d      	beq.n	8003222 <I2C_MasterTransmit_TXE+0x6e>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d01a      	beq.n	8003222 <I2C_MasterTransmit_TXE+0x6e>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f2:	d016      	beq.n	8003222 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003202:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2211      	movs	r2, #17
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ff76 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003220:	e060      	b.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003230:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d107      	bne.n	800326c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff7d 	bl	8003164 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800326a:	e03b      	b.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff49 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800327a:	e033      	b.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b21      	cmp	r3, #33	; 0x21
 8003280:	d005      	beq.n	800328e <I2C_MasterTransmit_TXE+0xda>
 8003282:	7bbb      	ldrb	r3, [r7, #14]
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d12d      	bne.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b22      	cmp	r3, #34	; 0x22
 800328c:	d12a      	bne.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d108      	bne.n	80032aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032a8:	e01c      	b.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d103      	bne.n	80032be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f88e 	bl	80033d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80032bc:	e012      	b.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032e2:	e7ff      	b.n	80032e4 <I2C_MasterTransmit_TXE+0x130>
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b21      	cmp	r3, #33	; 0x21
 8003304:	d164      	bne.n	80033d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d012      	beq.n	8003336 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003334:	e04c      	b.n	80033d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d01d      	beq.n	8003378 <I2C_MasterTransmit_BTF+0x8c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b20      	cmp	r3, #32
 8003340:	d01a      	beq.n	8003378 <I2C_MasterTransmit_BTF+0x8c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003348:	d016      	beq.n	8003378 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003358:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2211      	movs	r2, #17
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fecb 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
}
 8003376:	e02b      	b.n	80033d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003386:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d107      	bne.n	80033c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fed2 	bl	8003164 <HAL_I2C_MemTxCpltCallback>
}
 80033c0:	e006      	b.n	80033d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fe9e 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11d      	bne.n	800342c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10b      	bne.n	8003410 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800340e:	e073      	b.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	b29b      	uxth	r3, r3
 8003416:	121b      	asrs	r3, r3, #8
 8003418:	b2da      	uxtb	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	651a      	str	r2, [r3, #80]	; 0x50
}
 800342a:	e065      	b.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10b      	bne.n	800344c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	b2da      	uxtb	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	651a      	str	r2, [r3, #80]	; 0x50
}
 800344a:	e055      	b.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003450:	2b02      	cmp	r3, #2
 8003452:	d151      	bne.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b22      	cmp	r3, #34	; 0x22
 8003458:	d10d      	bne.n	8003476 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003468:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003474:	e040      	b.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d015      	beq.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b21      	cmp	r3, #33	; 0x21
 8003484:	d112      	bne.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034aa:	e025      	b.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d120      	bne.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b21      	cmp	r3, #33	; 0x21
 80034ba:	d11d      	bne.n	80034f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fe36 	bl	8003164 <HAL_I2C_MemTxCpltCallback>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b22      	cmp	r3, #34	; 0x22
 8003512:	f040 80ac 	bne.w	800366e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d921      	bls.n	8003568 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b03      	cmp	r3, #3
 8003552:	f040 808c 	bne.w	800366e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003564:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003566:	e082      	b.n	800366e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2b02      	cmp	r3, #2
 800356e:	d075      	beq.n	800365c <I2C_MasterReceive_RXNE+0x15c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d002      	beq.n	800357c <I2C_MasterReceive_RXNE+0x7c>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d16f      	bne.n	800365c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f001 f827 	bl	80045d0 <I2C_WaitOnSTOPRequestThroughIT>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d142      	bne.n	800360e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d10a      	bne.n	80035f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fdc1 	bl	8003178 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035f6:	e03a      	b.n	800366e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2212      	movs	r2, #18
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fd8a 	bl	8003120 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800360c:	e02f      	b.n	800366e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800361c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fd99 	bl	800318c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800365a:	e008      	b.n	800366e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366a:	605a      	str	r2, [r3, #4]
}
 800366c:	e7ff      	b.n	800366e <I2C_MasterReceive_RXNE+0x16e>
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b04      	cmp	r3, #4
 800368c:	d11b      	bne.n	80036c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036c4:	e0bd      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d129      	bne.n	8003724 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d00a      	beq.n	80036fc <I2C_MasterReceive_BTF+0x86>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d007      	beq.n	80036fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003722:	e08e      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d176      	bne.n	800381c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <I2C_MasterReceive_BTF+0xc4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d108      	bne.n	800374c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e019      	b.n	8003780 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d002      	beq.n	8003758 <I2C_MasterReceive_BTF+0xe2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d108      	bne.n	800376a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e00a      	b.n	8003780 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b10      	cmp	r3, #16
 800376e:	d007      	beq.n	8003780 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d10a      	bne.n	8003806 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fcba 	bl	8003178 <HAL_I2C_MemRxCpltCallback>
}
 8003804:	e01d      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2212      	movs	r2, #18
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fc83 	bl	8003120 <HAL_I2C_MasterRxCpltCallback>
}
 800381a:	e012      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d117      	bne.n	800388e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003876:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003878:	e067      	b.n	800394a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
}
 800388c:	e05d      	b.n	800394a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003896:	d133      	bne.n	8003900 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	; 0x21
 80038a2:	d109      	bne.n	80038b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	e008      	b.n	80038ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <I2C_Master_SB+0x92>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d108      	bne.n	80038ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d032      	beq.n	800394a <I2C_Master_SB+0x100>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d02d      	beq.n	800394a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fc:	605a      	str	r2, [r3, #4]
}
 80038fe:	e024      	b.n	800394a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10e      	bne.n	8003926 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	b29b      	uxth	r3, r3
 800390e:	11db      	asrs	r3, r3, #7
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f003 0306 	and.w	r3, r3, #6
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f063 030f 	orn	r3, r3, #15
 800391c:	b2da      	uxtb	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]
}
 8003924:	e011      	b.n	800394a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10d      	bne.n	800394a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	b29b      	uxth	r3, r3
 8003934:	11db      	asrs	r3, r3, #7
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0306 	and.w	r3, r3, #6
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f063 030e 	orn	r3, r3, #14
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <I2C_Master_ADD10+0x26>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <I2C_Master_ADD10+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399c:	605a      	str	r2, [r3, #4]
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b091      	sub	sp, #68	; 0x44
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b22      	cmp	r3, #34	; 0x22
 80039d2:	f040 8169 	bne.w	8003ca8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <I2C_Master_ADDR+0x54>
 80039de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d10b      	bne.n	80039fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	e160      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <I2C_Master_ADDR+0x98>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a0e:	d118      	bne.n	8003a42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a10:	2300      	movs	r3, #0
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a40:	e13e      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e115      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 808a 	bne.w	8003b94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a86:	d137      	bne.n	8003af8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d113      	bne.n	8003ad0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	e0e7      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e0d3      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d02e      	beq.n	8003b5c <I2C_Master_ADDR+0x1b2>
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d02b      	beq.n	8003b5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b06:	2b12      	cmp	r3, #18
 8003b08:	d102      	bne.n	8003b10 <I2C_Master_ADDR+0x166>
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d125      	bne.n	8003b5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00e      	beq.n	8003b34 <I2C_Master_ADDR+0x18a>
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d00b      	beq.n	8003b34 <I2C_Master_ADDR+0x18a>
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d008      	beq.n	8003b34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e007      	b.n	8003b44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	e0a1      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e085      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d14d      	bne.n	8003c3a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d016      	beq.n	8003bd2 <I2C_Master_ADDR+0x228>
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d013      	beq.n	8003bd2 <I2C_Master_ADDR+0x228>
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d010      	beq.n	8003bd2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d117      	bne.n	8003c22 <I2C_Master_ADDR+0x278>
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf8:	d00b      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d008      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d005      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d002      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d107      	bne.n	8003c22 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	e032      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d117      	bne.n	8003c8a <I2C_Master_ADDR+0x2e0>
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c60:	d00b      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d008      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d005      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d002      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ca6:	e00b      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
}
 8003cbe:	e7ff      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
 8003cc0:	bf00      	nop
 8003cc2:	3744      	adds	r7, #68	; 0x44
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02b      	beq.n	8003d3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d114      	bne.n	8003d3e <I2C_SlaveTransmit_TXE+0x72>
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b29      	cmp	r3, #41	; 0x29
 8003d18:	d111      	bne.n	8003d3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2228      	movs	r2, #40	; 0x28
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fc fc2b 	bl	8000594 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d02c      	beq.n	8003dfc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d114      	bne.n	8003dfc <I2C_SlaveReceive_RXNE+0x74>
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd6:	d111      	bne.n	8003dfc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2222      	movs	r2, #34	; 0x22
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2228      	movs	r2, #40	; 0x28
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc fbdc 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d012      	beq.n	8003e3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e62:	2b28      	cmp	r3, #40	; 0x28
 8003e64:	d127      	bne.n	8003eb6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	09db      	lsrs	r3, r3, #7
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	81bb      	strh	r3, [r7, #12]
 8003e98:	e002      	b.n	8003ea0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ea8:	89ba      	ldrh	r2, [r7, #12]
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff f940 	bl	8003134 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003eb4:	e00e      	b.n	8003ed4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003efa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d172      	bne.n	8004020 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b22      	cmp	r3, #34	; 0x22
 8003f3e:	d002      	beq.n	8003f46 <I2C_Slave_STOPF+0x6a>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d135      	bne.n	8003fb2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fa2a 	bl	80023d8 <HAL_DMA_GetState>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d049      	beq.n	800401e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a69      	ldr	r2, [pc, #420]	; (8004134 <I2C_Slave_STOPF+0x258>)
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe f872 	bl	8002080 <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d03d      	beq.n	800401e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fb0:	e035      	b.n	800401e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f9f4 	bl	80023d8 <HAL_DMA_GetState>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d014      	beq.n	8004020 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <I2C_Slave_STOPF+0x258>)
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe f83c 	bl	8002080 <HAL_DMA_Abort_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004018:	4610      	mov	r0, r2
 800401a:	4798      	blx	r3
 800401c:	e000      	b.n	8004020 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800401e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03e      	beq.n	80040a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d112      	bne.n	800405e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d112      	bne.n	8004092 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f8b3 	bl	800421c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80040b6:	e039      	b.n	800412c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b2a      	cmp	r3, #42	; 0x2a
 80040bc:	d109      	bne.n	80040d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2228      	movs	r2, #40	; 0x28
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fc fa71 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b28      	cmp	r3, #40	; 0x28
 80040dc:	d111      	bne.n	8004102 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <I2C_Slave_STOPF+0x25c>)
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff f828 	bl	8003150 <HAL_I2C_ListenCpltCallback>
}
 8004100:	e014      	b.n	800412c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	2b22      	cmp	r3, #34	; 0x22
 8004108:	d002      	beq.n	8004110 <I2C_Slave_STOPF+0x234>
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b22      	cmp	r3, #34	; 0x22
 800410e:	d10d      	bne.n	800412c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fc fa44 	bl	80005b4 <HAL_I2C_SlaveRxCpltCallback>
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	08004481 	.word	0x08004481
 8004138:	ffff0000 	.word	0xffff0000

0800413c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d002      	beq.n	800415e <I2C_Slave_AF+0x22>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d129      	bne.n	80041b2 <I2C_Slave_AF+0x76>
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b28      	cmp	r3, #40	; 0x28
 8004162:	d126      	bne.n	80041b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <I2C_Slave_AF+0xdc>)
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004178:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004182:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe ffd0 	bl	8003150 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80041b0:	e02e      	b.n	8004210 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b21      	cmp	r3, #33	; 0x21
 80041b6:	d126      	bne.n	8004206 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <I2C_Slave_AF+0xdc>)
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2221      	movs	r2, #33	; 0x21
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc f9c8 	bl	8000594 <HAL_I2C_SlaveTxCpltCallback>
}
 8004204:	e004      	b.n	8004210 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800420e:	615a      	str	r2, [r3, #20]
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	ffff0000 	.word	0xffff0000

0800421c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004232:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	2b10      	cmp	r3, #16
 8004238:	d002      	beq.n	8004240 <I2C_ITError+0x24>
 800423a:	7bbb      	ldrb	r3, [r7, #14]
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d10a      	bne.n	8004256 <I2C_ITError+0x3a>
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b22      	cmp	r3, #34	; 0x22
 8004244:	d107      	bne.n	8004256 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004254:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800425c:	2b28      	cmp	r3, #40	; 0x28
 800425e:	d107      	bne.n	8004270 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2228      	movs	r2, #40	; 0x28
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800426e:	e015      	b.n	800429c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427e:	d00a      	beq.n	8004296 <I2C_ITError+0x7a>
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b60      	cmp	r3, #96	; 0x60
 8004284:	d007      	beq.n	8004296 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042aa:	d162      	bne.n	8004372 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d020      	beq.n	800430c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	4a6a      	ldr	r2, [pc, #424]	; (8004478 <I2C_ITError+0x25c>)
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd fed2 	bl	8002080 <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8089 	beq.w	80043f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004306:	4610      	mov	r0, r2
 8004308:	4798      	blx	r3
 800430a:	e074      	b.n	80043f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	4a59      	ldr	r2, [pc, #356]	; (8004478 <I2C_ITError+0x25c>)
 8004312:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd feb1 	bl	8002080 <HAL_DMA_Abort_IT>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d068      	beq.n	80043f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d10b      	bne.n	800434a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800436c:	4610      	mov	r0, r2
 800436e:	4798      	blx	r3
 8004370:	e041      	b.n	80043f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b60      	cmp	r3, #96	; 0x60
 800437c:	d125      	bne.n	80043ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d10b      	bne.n	80043b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe feec 	bl	80031a0 <HAL_I2C_AbortCpltCallback>
 80043c8:	e015      	b.n	80043f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d10b      	bne.n	80043f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fe fecb 	bl	800318c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d113      	bne.n	8004470 <I2C_ITError+0x254>
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b28      	cmp	r3, #40	; 0x28
 800444c:	d110      	bne.n	8004470 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <I2C_ITError+0x260>)
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fe fe70 	bl	8003150 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08004481 	.word	0x08004481
 800447c:	ffff0000 	.word	0xffff0000

08004480 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <I2C_DMAAbort+0x148>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	08db      	lsrs	r3, r3, #3
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <I2C_DMAAbort+0x14c>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0a1a      	lsrs	r2, r3, #8
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	00da      	lsls	r2, r3, #3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80044c6:	e00a      	b.n	80044de <I2C_DMAAbort+0x5e>
    }
    count--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044dc:	d0ea      	beq.n	80044b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	2200      	movs	r2, #0
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	2200      	movs	r2, #0
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	2200      	movs	r2, #0
 8004522:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2200      	movs	r2, #0
 8004532:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b60      	cmp	r3, #96	; 0x60
 800454e:	d10e      	bne.n	800456e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7fe fe1a 	bl	80031a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800456c:	e027      	b.n	80045be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004574:	2b28      	cmp	r3, #40	; 0x28
 8004576:	d117      	bne.n	80045a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004596:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2228      	movs	r2, #40	; 0x28
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045a6:	e007      	b.n	80045b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f7fe fde7 	bl	800318c <HAL_I2C_ErrorCallback>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000
 80045cc:	14f8b589 	.word	0x14f8b589

080045d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	0a1a      	lsrs	r2, r3, #8
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e008      	b.n	8004620 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461c:	d0e9      	beq.n	80045f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000000 	.word	0x20000000
 8004630:	14f8b589 	.word	0x14f8b589

08004634 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004644:	d103      	bne.n	800464e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800464c:	e007      	b.n	800465e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004656:	d102      	bne.n	800465e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2208      	movs	r2, #8
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e267      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	4b88      	ldr	r3, [pc, #544]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b85      	ldr	r3, [pc, #532]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d112      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b82      	ldr	r3, [pc, #520]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b7e      	ldr	r3, [pc, #504]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e242      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b76      	ldr	r3, [pc, #472]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b70      	ldr	r3, [pc, #448]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6d      	ldr	r3, [pc, #436]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6c      	ldr	r2, [pc, #432]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b69      	ldr	r3, [pc, #420]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b66      	ldr	r3, [pc, #408]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd faa0 	bl	8001c68 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fa9c 	bl	8001c68 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e207      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b5b      	ldr	r3, [pc, #364]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd fa8c 	bl	8001c68 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd fa88 	bl	8001c68 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1f3      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	4b51      	ldr	r3, [pc, #324]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	4b4a      	ldr	r3, [pc, #296]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b47      	ldr	r3, [pc, #284]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b44      	ldr	r3, [pc, #272]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	4b41      	ldr	r3, [pc, #260]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c7      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4937      	ldr	r1, [pc, #220]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	e03a      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047dc:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_RCC_OscConfig+0x244>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd fa41 	bl	8001c68 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fd fa3d 	bl	8001c68 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1a8      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4925      	ldr	r1, [pc, #148]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	e015      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCC_OscConfig+0x244>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fd fa20 	bl	8001c68 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482c:	f7fd fa1c 	bl	8001c68 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e187      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d036      	beq.n	80048c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_RCC_OscConfig+0x248>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd fa00 	bl	8001c68 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd f9fc 	bl	8001c68 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e167      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
 800488a:	e01b      	b.n	80048c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_OscConfig+0x248>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fd f9e9 	bl	8001c68 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	e00e      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489a:	f7fd f9e5 	bl	8001c68 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d907      	bls.n	80048b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e150      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	42470000 	.word	0x42470000
 80048b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ea      	bne.n	800489a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8097 	beq.w	8004a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a7c      	ldr	r2, [pc, #496]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b7a      	ldr	r3, [pc, #488]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b77      	ldr	r3, [pc, #476]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7fd f9a5 	bl	8001c68 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fd f9a1 	bl	8001c68 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e10c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b6a      	ldr	r3, [pc, #424]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x2ea>
 8004948:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a63      	ldr	r2, [pc, #396]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	e01c      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b5c      	ldr	r3, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a5b      	ldr	r2, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004978:	4b58      	ldr	r3, [pc, #352]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4b55      	ldr	r3, [pc, #340]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a54      	ldr	r2, [pc, #336]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fd f966 	bl	8001c68 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fd f962 	bl	8001c68 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0cb      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b49      	ldr	r3, [pc, #292]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ee      	beq.n	80049a0 <HAL_RCC_OscConfig+0x334>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7fd f950 	bl	8001c68 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fd f94c 	bl	8001c68 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0b5      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b39      	ldr	r3, [pc, #228]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	4a38      	ldr	r2, [pc, #224]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a1 	beq.w	8004b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d05c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d141      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd f920 	bl	8001c68 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fd f91c 	bl	8001c68 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e087      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	491b      	ldr	r1, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd f8f5 	bl	8001c68 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd f8f1 	bl	8001c68 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e05c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x416>
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fd f8de 	bl	8001c68 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd f8da 	bl	8001c68 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e045      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x444>
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e038      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d121      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fd f80c 	bl	8001c68 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fd f808 	bl	8001c68 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f821 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc fd9e 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0800b1a4 	.word	0x0800b1a4
 8004d20:	20000000 	.word	0x20000000
 8004d24:	20000004 	.word	0x20000004

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b090      	sub	sp, #64	; 0x40
 8004d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
 8004d34:	2300      	movs	r3, #0
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	4b59      	ldr	r3, [pc, #356]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x40>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	f200 80a1 	bhi.w	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x34>
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5a:	e09b      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d60:	e09b      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d66:	e098      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d68:	4b4f      	ldr	r3, [pc, #316]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d72:	4b4d      	ldr	r3, [pc, #308]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	2200      	movs	r2, #0
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	627a      	str	r2, [r7, #36]	; 0x24
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d90:	2100      	movs	r1, #0
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d94:	fb03 f201 	mul.w	r2, r3, r1
 8004d98:	2300      	movs	r3, #0
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	4a43      	ldr	r2, [pc, #268]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004da2:	fba0 1202 	umull	r1, r2, r0, r2
 8004da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da8:	460a      	mov	r2, r1
 8004daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	4413      	add	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	2200      	movs	r2, #0
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dc2:	f7fb fa65 	bl	8000290 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dce:	e053      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	617a      	str	r2, [r7, #20]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004de2:	f04f 0b00 	mov.w	fp, #0
 8004de6:	4652      	mov	r2, sl
 8004de8:	465b      	mov	r3, fp
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8004e02:	eb63 090b 	sbc.w	r9, r3, fp
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	00eb      	lsls	r3, r5, #3
 8004e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e30:	00e2      	lsls	r2, r4, #3
 8004e32:	4614      	mov	r4, r2
 8004e34:	461d      	mov	r5, r3
 8004e36:	eb14 030a 	adds.w	r3, r4, sl
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	eb45 030b 	adc.w	r3, r5, fp
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	028b      	lsls	r3, r1, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e58:	4621      	mov	r1, r4
 8004e5a:	028a      	lsls	r2, r1, #10
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	2200      	movs	r2, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6c:	f7fb fa10 	bl	8000290 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	3301      	adds	r3, #1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3740      	adds	r7, #64	; 0x40
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	017d7840 	.word	0x017d7840

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000000 	.word	0x20000000

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800b1b4 	.word	0x0800b1b4

08004ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ef8:	f7ff ffdc 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0b5b      	lsrs	r3, r3, #13
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800b1b4 	.word	0x0800b1b4

08004f1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	220f      	movs	r2, #15
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f2c:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_RCC_GetClockConfig+0x5c>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCC_GetClockConfig+0x5c>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCC_GetClockConfig+0x5c>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	08db      	lsrs	r3, r3, #3
 8004f56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RCC_GetClockConfig+0x60>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0207 	and.w	r2, r3, #7
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40023c00 	.word	0x40023c00

08004f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e041      	b.n	8005016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f839 	bl	800501e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 fbf0 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b01      	cmp	r3, #1
 8005046:	d001      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e044      	b.n	80050d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x6c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d013      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1a      	ldr	r2, [pc, #104]	; (80050e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a19      	ldr	r2, [pc, #100]	; (80050ec <HAL_TIM_Base_Start_IT+0xb8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a17      	ldr	r2, [pc, #92]	; (80050f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d111      	bne.n	80050c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d010      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	e007      	b.n	80050d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800
 80050f0:	40000c00 	.word	0x40000c00
 80050f4:	40014000 	.word	0x40014000

080050f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e041      	b.n	800518e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc fa0e 	bl	8001540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f000 fb34 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start+0x24>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e022      	b.n	8005202 <HAL_TIM_PWM_Start+0x6a>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d109      	bne.n	80051d6 <HAL_TIM_PWM_Start+0x3e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	e015      	b.n	8005202 <HAL_TIM_PWM_Start+0x6a>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d109      	bne.n	80051f0 <HAL_TIM_PWM_Start+0x58>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e008      	b.n	8005202 <HAL_TIM_PWM_Start+0x6a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e068      	b.n	80052dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0x82>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005218:	e013      	b.n	8005242 <HAL_TIM_PWM_Start+0xaa>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d104      	bne.n	800522a <HAL_TIM_PWM_Start+0x92>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005228:	e00b      	b.n	8005242 <HAL_TIM_PWM_Start+0xaa>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d104      	bne.n	800523a <HAL_TIM_PWM_Start+0xa2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005238:	e003      	b.n	8005242 <HAL_TIM_PWM_Start+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fcb6 	bl	8005bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a23      	ldr	r2, [pc, #140]	; (80052e4 <HAL_TIM_PWM_Start+0x14c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d107      	bne.n	800526a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_TIM_PWM_Start+0x14c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d013      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_TIM_PWM_Start+0x150>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <HAL_TIM_PWM_Start+0x154>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <HAL_TIM_PWM_Start+0x158>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x10e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <HAL_TIM_PWM_Start+0x15c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d010      	beq.n	80052da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	e007      	b.n	80052da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40014000 	.word	0x40014000

080052f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fc56 	bl	8005bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a29      	ldr	r2, [pc, #164]	; (80053bc <HAL_TIM_PWM_Stop+0xc4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d117      	bne.n	800534a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	f241 1311 	movw	r3, #4369	; 0x1111
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <HAL_TIM_PWM_Stop+0x52>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	f240 4344 	movw	r3, #1092	; 0x444
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d107      	bne.n	800534a <HAL_TIM_PWM_Stop+0x52>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	f241 1311 	movw	r3, #4369	; 0x1111
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <HAL_TIM_PWM_Stop+0x82>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f240 4344 	movw	r3, #1092	; 0x444
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <HAL_TIM_PWM_Stop+0x82>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Stop+0x92>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	e013      	b.n	80053b2 <HAL_TIM_PWM_Stop+0xba>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Stop+0xa2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_PWM_Stop+0xba>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Stop+0xb2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_PWM_Stop+0xba>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40010000 	.word	0x40010000

080053c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d122      	bne.n	800541c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d11b      	bne.n	800541c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0202 	mvn.w	r2, #2
 80053ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9b0 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9a2 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f9b3 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d122      	bne.n	8005470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d11b      	bne.n	8005470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0204 	mvn.w	r2, #4
 8005440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f986 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 800545c:	e005      	b.n	800546a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f978 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f989 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b08      	cmp	r3, #8
 800547c:	d122      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b08      	cmp	r3, #8
 800548a:	d11b      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0208 	mvn.w	r2, #8
 8005494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2204      	movs	r2, #4
 800549a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f95c 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f94e 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f95f 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d122      	bne.n	8005518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0210 	mvn.w	r2, #16
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2208      	movs	r2, #8
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f932 	bl	8005768 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f924 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f935 	bl	800577c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0201 	mvn.w	r2, #1
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb fe6e 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555c:	2b80      	cmp	r3, #128	; 0x80
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fc16 	bl	8005d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b40      	cmp	r3, #64	; 0x40
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8fa 	bl	8005790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0220 	mvn.w	r2, #32
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fbe0 	bl	8005d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e0ae      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b0c      	cmp	r3, #12
 80055fa:	f200 809f 	bhi.w	800573c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005639 	.word	0x08005639
 8005608:	0800573d 	.word	0x0800573d
 800560c:	0800573d 	.word	0x0800573d
 8005610:	0800573d 	.word	0x0800573d
 8005614:	08005679 	.word	0x08005679
 8005618:	0800573d 	.word	0x0800573d
 800561c:	0800573d 	.word	0x0800573d
 8005620:	0800573d 	.word	0x0800573d
 8005624:	080056bb 	.word	0x080056bb
 8005628:	0800573d 	.word	0x0800573d
 800562c:	0800573d 	.word	0x0800573d
 8005630:	0800573d 	.word	0x0800573d
 8005634:	080056fb 	.word	0x080056fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f930 	bl	80058a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0208 	orr.w	r2, r2, #8
 8005652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0204 	bic.w	r2, r2, #4
 8005662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6999      	ldr	r1, [r3, #24]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	619a      	str	r2, [r3, #24]
      break;
 8005676:	e064      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f976 	bl	8005970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	021a      	lsls	r2, r3, #8
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	619a      	str	r2, [r3, #24]
      break;
 80056b8:	e043      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 f9c1 	bl	8005a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0208 	orr.w	r2, r2, #8
 80056d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0204 	bic.w	r2, r2, #4
 80056e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69d9      	ldr	r1, [r3, #28]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	61da      	str	r2, [r3, #28]
      break;
 80056f8:	e023      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fa0b 	bl	8005b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	021a      	lsls	r2, r3, #8
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	61da      	str	r2, [r3, #28]
      break;
 800573a:	e002      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a34      	ldr	r2, [pc, #208]	; (8005888 <TIM_Base_SetConfig+0xe4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00f      	beq.n	80057dc <TIM_Base_SetConfig+0x38>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c2:	d00b      	beq.n	80057dc <TIM_Base_SetConfig+0x38>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a31      	ldr	r2, [pc, #196]	; (800588c <TIM_Base_SetConfig+0xe8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_Base_SetConfig+0x38>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a30      	ldr	r2, [pc, #192]	; (8005890 <TIM_Base_SetConfig+0xec>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_Base_SetConfig+0x38>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <TIM_Base_SetConfig+0xf0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d108      	bne.n	80057ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a25      	ldr	r2, [pc, #148]	; (8005888 <TIM_Base_SetConfig+0xe4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01b      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d017      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <TIM_Base_SetConfig+0xe8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a21      	ldr	r2, [pc, #132]	; (8005890 <TIM_Base_SetConfig+0xec>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a20      	ldr	r2, [pc, #128]	; (8005894 <TIM_Base_SetConfig+0xf0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <TIM_Base_SetConfig+0xf4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1e      	ldr	r2, [pc, #120]	; (800589c <TIM_Base_SetConfig+0xf8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_Base_SetConfig+0x8a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <TIM_Base_SetConfig+0xfc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d108      	bne.n	8005840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a08      	ldr	r2, [pc, #32]	; (8005888 <TIM_Base_SetConfig+0xe4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d103      	bne.n	8005874 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	615a      	str	r2, [r3, #20]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40010000 	.word	0x40010000
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f023 0201 	bic.w	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 0302 	bic.w	r3, r3, #2
 80058ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a1c      	ldr	r2, [pc, #112]	; (800596c <TIM_OC1_SetConfig+0xc8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0308 	bic.w	r3, r3, #8
 8005906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 0304 	bic.w	r3, r3, #4
 8005918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a13      	ldr	r2, [pc, #76]	; (800596c <TIM_OC1_SetConfig+0xc8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d111      	bne.n	8005946 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40010000 	.word	0x40010000

08005970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0210 	bic.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0320 	bic.w	r3, r3, #32
 80059ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <TIM_OC2_SetConfig+0xd4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d10d      	bne.n	80059ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <TIM_OC2_SetConfig+0xd4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d113      	bne.n	8005a1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40010000 	.word	0x40010000

08005a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <TIM_OC3_SetConfig+0xd0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <TIM_OC3_SetConfig+0xd0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d113      	bne.n	8005af2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40010000 	.word	0x40010000

08005b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	031b      	lsls	r3, r3, #12
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <TIM_OC4_SetConfig+0x9c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	019b      	lsls	r3, r3, #6
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000

08005bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2201      	movs	r2, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1a      	ldr	r2, [r3, #32]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	401a      	ands	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e050      	b.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d013      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10c      	bne.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40014000 	.word	0x40014000

08005ce4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e03d      	b.n	8005d7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e03f      	b.n	8005e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fb fce4 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2224      	movs	r2, #36	; 0x24
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fddf 	bl	80069b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b08a      	sub	sp, #40	; 0x28
 8005e4e:	af02      	add	r7, sp, #8
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d17c      	bne.n	8005f64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_UART_Transmit+0x2c>
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e075      	b.n	8005f66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_UART_Transmit+0x3e>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e06e      	b.n	8005f66 <HAL_UART_Transmit+0x11c>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2221      	movs	r2, #33	; 0x21
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e9e:	f7fb fee3 	bl	8001c68 <HAL_GetTick>
 8005ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d108      	bne.n	8005ecc <HAL_UART_Transmit+0x82>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e003      	b.n	8005ed4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005edc:	e02a      	b.n	8005f34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2180      	movs	r1, #128	; 0x80
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fb1f 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e036      	b.n	8005f66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	3302      	adds	r3, #2
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	e007      	b.n	8005f26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1cf      	bne.n	8005ede <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	2140      	movs	r1, #64	; 0x40
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 faef 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e006      	b.n	8005f66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e000      	b.n	8005f66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d11d      	bne.n	8005fc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Receive_IT+0x26>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e016      	b.n	8005fc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Receive_IT+0x38>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e00f      	b.n	8005fc6 <HAL_UART_Receive_IT+0x58>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fb24 	bl	8006608 <UART_Start_Receive_IT>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	e000      	b.n	8005fc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0ba      	sub	sp, #232	; 0xe8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800600e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10f      	bne.n	8006036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <HAL_UART_IRQHandler+0x66>
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fc07 	bl	8006842 <UART_Receive_IT>
      return;
 8006034:	e256      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80de 	beq.w	80061fc <HAL_UART_IRQHandler+0x22c>
 8006040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80d1 	beq.w	80061fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_UART_IRQHandler+0xae>
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_UART_IRQHandler+0xd2>
 800608a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0xf6>
 80060ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d011      	beq.n	80060f6 <HAL_UART_IRQHandler+0x126>
 80060d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0208 	orr.w	r2, r3, #8
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 81ed 	beq.w	80064da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_UART_IRQHandler+0x14e>
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb92 	bl	8006842 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d103      	bne.n	800614a <HAL_UART_IRQHandler+0x17a>
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d04f      	beq.n	80061ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa9a 	bl	8006684 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d141      	bne.n	80061e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800618a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800618e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1d9      	bne.n	800615e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d013      	beq.n	80061da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	4a7d      	ldr	r2, [pc, #500]	; (80063ac <HAL_UART_IRQHandler+0x3dc>)
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fb ff5e 	bl	8002080 <HAL_DMA_Abort_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d016      	beq.n	80061f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	e00e      	b.n	80061f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f990 	bl	8006500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	e00a      	b.n	80061f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f98c 	bl	8006500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	e006      	b.n	80061f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f988 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061f6:	e170      	b.n	80064da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	bf00      	nop
    return;
 80061fa:	e16e      	b.n	80064da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	2b01      	cmp	r3, #1
 8006202:	f040 814a 	bne.w	800649a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8143 	beq.w	800649a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 813c 	beq.w	800649a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	f040 80b4 	bne.w	80063b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8140 	beq.w	80064de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006266:	429a      	cmp	r2, r3
 8006268:	f080 8139 	bcs.w	80064de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006272:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627e:	f000 8088 	beq.w	8006392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800629c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d9      	bne.n	8006282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3314      	adds	r3, #20
 80062d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e1      	bne.n	80062ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800632e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006330:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800633c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e3      	bne.n	800630a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006374:	65ba      	str	r2, [r7, #88]	; 0x58
 8006376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800637a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	4618      	mov	r0, r3
 800638e:	f7fb fe07 	bl	8001fa0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800639a:	b29b      	uxth	r3, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f8b6 	bl	8006514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a8:	e099      	b.n	80064de <HAL_UART_IRQHandler+0x50e>
 80063aa:	bf00      	nop
 80063ac:	0800674b 	.word	0x0800674b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 808b 	beq.w	80064e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8086 	beq.w	80064e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063fa:	647a      	str	r2, [r7, #68]	; 0x44
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e3      	bne.n	80063d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	623b      	str	r3, [r7, #32]
   return(result);
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e3      	bne.n	800640e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	60fb      	str	r3, [r7, #12]
   return(result);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0310 	bic.w	r3, r3, #16
 800646a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006478:	61fa      	str	r2, [r7, #28]
 800647a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	617b      	str	r3, [r7, #20]
   return(result);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e3      	bne.n	8006454 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800648c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f83e 	bl	8006514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006498:	e023      	b.n	80064e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_UART_IRQHandler+0x4ea>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f95d 	bl	8006772 <UART_Transmit_IT>
    return;
 80064b8:	e014      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <HAL_UART_IRQHandler+0x514>
 80064c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f99d 	bl	8006812 <UART_EndTransmit_IT>
    return;
 80064d8:	e004      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
    return;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
      return;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
      return;
 80064e2:	bf00      	nop
  }
}
 80064e4:	37e8      	adds	r7, #232	; 0xe8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop

080064ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b090      	sub	sp, #64	; 0x40
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	e050      	b.n	80065e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006544:	d04c      	beq.n	80065e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <UART_WaitOnFlagUntilTimeout+0x30>
 800654c:	f7fb fb8c 	bl	8001c68 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006558:	429a      	cmp	r2, r3
 800655a:	d241      	bcs.n	80065e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800657c:	637a      	str	r2, [r7, #52]	; 0x34
 800657e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e5      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	613b      	str	r3, [r7, #16]
   return(result);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b0:	623a      	str	r2, [r7, #32]
 80065b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	69f9      	ldr	r1, [r7, #28]
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e5      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e00f      	b.n	8006600 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d09f      	beq.n	800653e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3740      	adds	r7, #64	; 0x40
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2222      	movs	r2, #34	; 0x22
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006654:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0220 	orr.w	r2, r2, #32
 8006674:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b095      	sub	sp, #84	; 0x54
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ac:	643a      	str	r2, [r7, #64]	; 0x40
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d119      	bne.n	8006730 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60bb      	str	r3, [r7, #8]
   return(result);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f023 0310 	bic.w	r3, r3, #16
 8006712:	647b      	str	r3, [r7, #68]	; 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800671c:	61ba      	str	r2, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	613b      	str	r3, [r7, #16]
   return(result);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800673e:	bf00      	nop
 8006740:	3754      	adds	r7, #84	; 0x54
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fecb 	bl	8006500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b21      	cmp	r3, #33	; 0x21
 8006784:	d13e      	bne.n	8006804 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678e:	d114      	bne.n	80067ba <UART_Transmit_IT+0x48>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d110      	bne.n	80067ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	1c9a      	adds	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	621a      	str	r2, [r3, #32]
 80067b8:	e008      	b.n	80067cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6211      	str	r1, [r2, #32]
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4619      	mov	r1, r3
 80067da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10f      	bne.n	8006800 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	e000      	b.n	8006806 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006804:	2302      	movs	r3, #2
  }
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fe5a 	bl	80064ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08c      	sub	sp, #48	; 0x30
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b22      	cmp	r3, #34	; 0x22
 8006854:	f040 80ab 	bne.w	80069ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d117      	bne.n	8006892 <UART_Receive_IT+0x50>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d113      	bne.n	8006892 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006880:	b29a      	uxth	r2, r3
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28
 8006890:	e026      	b.n	80068e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a4:	d007      	beq.n	80068b6 <UART_Receive_IT+0x74>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <UART_Receive_IT+0x82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e008      	b.n	80068d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d15a      	bne.n	80069aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0220 	bic.w	r2, r2, #32
 8006902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	2b01      	cmp	r3, #1
 8006932:	d135      	bne.n	80069a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f023 0310 	bic.w	r3, r3, #16
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	623a      	str	r2, [r7, #32]
 800695c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	69f9      	ldr	r1, [r7, #28]
 8006960:	6a3a      	ldr	r2, [r7, #32]
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	61bb      	str	r3, [r7, #24]
   return(result);
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e5      	bne.n	800693a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b10      	cmp	r3, #16
 800697a:	d10a      	bne.n	8006992 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fdbb 	bl	8006514 <HAL_UARTEx_RxEventCallback>
 800699e:	e002      	b.n	80069a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7f9 fe7d 	bl	80006a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e002      	b.n	80069b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e000      	b.n	80069b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069ae:	2302      	movs	r3, #2
  }
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3730      	adds	r7, #48	; 0x30
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069bc:	b0c0      	sub	sp, #256	; 0x100
 80069be:	af00      	add	r7, sp, #0
 80069c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	ea40 0301 	orr.w	r3, r0, r1
 80069e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a10:	f021 010c 	bic.w	r1, r1, #12
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	6999      	ldr	r1, [r3, #24]
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	ea40 0301 	orr.w	r3, r0, r1
 8006a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b8f      	ldr	r3, [pc, #572]	; (8006c84 <UART_SetConfig+0x2cc>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d005      	beq.n	8006a58 <UART_SetConfig+0xa0>
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b8d      	ldr	r3, [pc, #564]	; (8006c88 <UART_SetConfig+0x2d0>)
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d104      	bne.n	8006a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fe fa4c 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a60:	e003      	b.n	8006a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a62:	f7fe fa33 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8006a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a74:	f040 810c 	bne.w	8006c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a92:	415b      	adcs	r3, r3
 8006a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	eb12 0801 	adds.w	r8, r2, r1
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	eb43 0901 	adc.w	r9, r3, r1
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aba:	4690      	mov	r8, r2
 8006abc:	4699      	mov	r9, r3
 8006abe:	4623      	mov	r3, r4
 8006ac0:	eb18 0303 	adds.w	r3, r8, r3
 8006ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ac8:	462b      	mov	r3, r5
 8006aca:	eb49 0303 	adc.w	r3, r9, r3
 8006ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	18db      	adds	r3, r3, r3
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
 8006aec:	4613      	mov	r3, r2
 8006aee:	eb42 0303 	adc.w	r3, r2, r3
 8006af2:	657b      	str	r3, [r7, #84]	; 0x54
 8006af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006afc:	f7f9 fbc8 	bl	8000290 <__aeabi_uldivmod>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4b61      	ldr	r3, [pc, #388]	; (8006c8c <UART_SetConfig+0x2d4>)
 8006b06:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	011c      	lsls	r4, r3, #4
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b30:	4641      	mov	r1, r8
 8006b32:	eb12 0a01 	adds.w	sl, r2, r1
 8006b36:	4649      	mov	r1, r9
 8006b38:	eb43 0b01 	adc.w	fp, r3, r1
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b50:	4692      	mov	sl, r2
 8006b52:	469b      	mov	fp, r3
 8006b54:	4643      	mov	r3, r8
 8006b56:	eb1a 0303 	adds.w	r3, sl, r3
 8006b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	eb4b 0303 	adc.w	r3, fp, r3
 8006b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	18db      	adds	r3, r3, r3
 8006b80:	643b      	str	r3, [r7, #64]	; 0x40
 8006b82:	4613      	mov	r3, r2
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	647b      	str	r3, [r7, #68]	; 0x44
 8006b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b92:	f7f9 fb7d 	bl	8000290 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4b3b      	ldr	r3, [pc, #236]	; (8006c8c <UART_SetConfig+0x2d4>)
 8006b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	2264      	movs	r2, #100	; 0x64
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	1acb      	subs	r3, r1, r3
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bb2:	4b36      	ldr	r3, [pc, #216]	; (8006c8c <UART_SetConfig+0x2d4>)
 8006bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bc0:	441c      	add	r4, r3
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	1891      	adds	r1, r2, r2
 8006bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bdc:	415b      	adcs	r3, r3
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006be4:	4641      	mov	r1, r8
 8006be6:	1851      	adds	r1, r2, r1
 8006be8:	6339      	str	r1, [r7, #48]	; 0x30
 8006bea:	4649      	mov	r1, r9
 8006bec:	414b      	adcs	r3, r1
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	00cb      	lsls	r3, r1, #3
 8006c00:	4651      	mov	r1, sl
 8006c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c06:	4651      	mov	r1, sl
 8006c08:	00ca      	lsls	r2, r1, #3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4642      	mov	r2, r8
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c18:	464b      	mov	r3, r9
 8006c1a:	460a      	mov	r2, r1
 8006c1c:	eb42 0303 	adc.w	r3, r2, r3
 8006c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c38:	460b      	mov	r3, r1
 8006c3a:	18db      	adds	r3, r3, r3
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c3e:	4613      	mov	r3, r2
 8006c40:	eb42 0303 	adc.w	r3, r2, r3
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c4e:	f7f9 fb1f 	bl	8000290 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <UART_SetConfig+0x2d4>)
 8006c58:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	2164      	movs	r1, #100	; 0x64
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	3332      	adds	r3, #50	; 0x32
 8006c6a:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <UART_SetConfig+0x2d4>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	f003 0207 	and.w	r2, r3, #7
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4422      	add	r2, r4
 8006c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c80:	e105      	b.n	8006e8e <UART_SetConfig+0x4d6>
 8006c82:	bf00      	nop
 8006c84:	40011000 	.word	0x40011000
 8006c88:	40011400 	.word	0x40011400
 8006c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	1891      	adds	r1, r2, r2
 8006ca8:	6239      	str	r1, [r7, #32]
 8006caa:	415b      	adcs	r3, r3
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
 8006cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	1854      	adds	r4, r2, r1
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	eb43 0501 	adc.w	r5, r3, r1
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	00eb      	lsls	r3, r5, #3
 8006cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cca:	00e2      	lsls	r2, r4, #3
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	4643      	mov	r3, r8
 8006cd2:	18e3      	adds	r3, r4, r3
 8006cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cd8:	464b      	mov	r3, r9
 8006cda:	eb45 0303 	adc.w	r3, r5, r3
 8006cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cfe:	4629      	mov	r1, r5
 8006d00:	008b      	lsls	r3, r1, #2
 8006d02:	4621      	mov	r1, r4
 8006d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d08:	4621      	mov	r1, r4
 8006d0a:	008a      	lsls	r2, r1, #2
 8006d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d10:	f7f9 fabe 	bl	8000290 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4b60      	ldr	r3, [pc, #384]	; (8006e9c <UART_SetConfig+0x4e4>)
 8006d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	011c      	lsls	r4, r3, #4
 8006d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	1891      	adds	r1, r2, r2
 8006d3a:	61b9      	str	r1, [r7, #24]
 8006d3c:	415b      	adcs	r3, r3
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d44:	4641      	mov	r1, r8
 8006d46:	1851      	adds	r1, r2, r1
 8006d48:	6139      	str	r1, [r7, #16]
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	414b      	adcs	r3, r1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	00cb      	lsls	r3, r1, #3
 8006d60:	4651      	mov	r1, sl
 8006d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d66:	4651      	mov	r1, sl
 8006d68:	00ca      	lsls	r2, r1, #3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4642      	mov	r2, r8
 8006d72:	189b      	adds	r3, r3, r2
 8006d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d78:	464b      	mov	r3, r9
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	eb42 0303 	adc.w	r3, r2, r3
 8006d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	008b      	lsls	r3, r1, #2
 8006da0:	4641      	mov	r1, r8
 8006da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da6:	4641      	mov	r1, r8
 8006da8:	008a      	lsls	r2, r1, #2
 8006daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dae:	f7f9 fa6f 	bl	8000290 <__aeabi_uldivmod>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <UART_SetConfig+0x4e4>)
 8006db8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	2164      	movs	r1, #100	; 0x64
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	3332      	adds	r3, #50	; 0x32
 8006dca:	4a34      	ldr	r2, [pc, #208]	; (8006e9c <UART_SetConfig+0x4e4>)
 8006dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd6:	441c      	add	r4, r3
 8006dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ddc:	2200      	movs	r2, #0
 8006dde:	673b      	str	r3, [r7, #112]	; 0x70
 8006de0:	677a      	str	r2, [r7, #116]	; 0x74
 8006de2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006de6:	4642      	mov	r2, r8
 8006de8:	464b      	mov	r3, r9
 8006dea:	1891      	adds	r1, r2, r2
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	415b      	adcs	r3, r3
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006df6:	4641      	mov	r1, r8
 8006df8:	1851      	adds	r1, r2, r1
 8006dfa:	6039      	str	r1, [r7, #0]
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	414b      	adcs	r3, r1
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e0e:	4659      	mov	r1, fp
 8006e10:	00cb      	lsls	r3, r1, #3
 8006e12:	4651      	mov	r1, sl
 8006e14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e18:	4651      	mov	r1, sl
 8006e1a:	00ca      	lsls	r2, r1, #3
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4603      	mov	r3, r0
 8006e22:	4642      	mov	r2, r8
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e28:	464b      	mov	r3, r9
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	eb42 0303 	adc.w	r3, r2, r3
 8006e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e3c:	667a      	str	r2, [r7, #100]	; 0x64
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	008b      	lsls	r3, r1, #2
 8006e4e:	4641      	mov	r1, r8
 8006e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e54:	4641      	mov	r1, r8
 8006e56:	008a      	lsls	r2, r1, #2
 8006e58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e5c:	f7f9 fa18 	bl	8000290 <__aeabi_uldivmod>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <UART_SetConfig+0x4e4>)
 8006e66:	fba3 1302 	umull	r1, r3, r3, r2
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	2164      	movs	r1, #100	; 0x64
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	3332      	adds	r3, #50	; 0x32
 8006e78:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <UART_SetConfig+0x4e4>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4422      	add	r2, r4
 8006e8c:	609a      	str	r2, [r3, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e94:	46bd      	mov	sp, r7
 8006e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e9a:	bf00      	nop
 8006e9c:	51eb851f 	.word	0x51eb851f

08006ea0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb2:	2b84      	cmp	r3, #132	; 0x84
 8006eb4:	d005      	beq.n	8006ec2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006eb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	3303      	adds	r3, #3
 8006ec0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed6:	f3ef 8305 	mrs	r3, IPSR
 8006eda:	607b      	str	r3, [r7, #4]
  return(result);
 8006edc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ef8:	f001 f958 	bl	80081ac <vTaskStartScheduler>
  
  return osOK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f04:	b089      	sub	sp, #36	; 0x24
 8006f06:	af04      	add	r7, sp, #16
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d020      	beq.n	8006f56 <osThreadCreate+0x54>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01c      	beq.n	8006f56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685c      	ldr	r4, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681d      	ldr	r5, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691e      	ldr	r6, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff ffb6 	bl	8006ea0 <makeFreeRtosPriority>
 8006f34:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f3e:	9202      	str	r2, [sp, #8]
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	9100      	str	r1, [sp, #0]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	4632      	mov	r2, r6
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 ff50 	bl	8007df0 <xTaskCreateStatic>
 8006f50:	4603      	mov	r3, r0
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e01c      	b.n	8006f90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685c      	ldr	r4, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f62:	b29e      	uxth	r6, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff ff98 	bl	8006ea0 <makeFreeRtosPriority>
 8006f70:	4602      	mov	r2, r0
 8006f72:	f107 030c 	add.w	r3, r7, #12
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	9200      	str	r2, [sp, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 ff92 	bl	8007eaa <xTaskCreate>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d001      	beq.n	8006f90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f90:	68fb      	ldr	r3, [r7, #12]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <osDelay+0x16>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e000      	b.n	8006fb2 <osDelay+0x18>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f8c6 	bl	8008144 <vTaskDelay>
  
  return osOK;
 8006fb8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f000 faae 	bl	800753a <xQueueCreateMutexStatic>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	e003      	b.n	8006fea <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	f000 fa91 	bl	800750a <xQueueCreateMutex>
 8006fe8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <osMutexWait+0x18>
    return osErrorParameter;
 8007008:	2380      	movs	r3, #128	; 0x80
 800700a:	e03a      	b.n	8007082 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007016:	d103      	bne.n	8007020 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e009      	b.n	8007034 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d006      	beq.n	8007034 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <osMutexWait+0x40>
      ticks = 1;
 8007030:	2301      	movs	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007034:	f7ff ff4c 	bl	8006ed0 <inHandlerMode>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d017      	beq.n	800706e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800703e:	f107 0308 	add.w	r3, r7, #8
 8007042:	461a      	mov	r2, r3
 8007044:	2100      	movs	r1, #0
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fd2a 	bl	8007aa0 <xQueueReceiveFromISR>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <osMutexWait+0x62>
      return osErrorOS;
 8007052:	23ff      	movs	r3, #255	; 0xff
 8007054:	e015      	b.n	8007082 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d011      	beq.n	8007080 <osMutexWait+0x8c>
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <osMutexWait+0x98>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	e008      	b.n	8007080 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fc09 	bl	8007888 <xQueueSemaphoreTake>
 8007076:	4603      	mov	r3, r0
 8007078:	2b01      	cmp	r3, #1
 800707a:	d001      	beq.n	8007080 <osMutexWait+0x8c>
    return osErrorOS;
 800707c:	23ff      	movs	r3, #255	; 0xff
 800707e:	e000      	b.n	8007082 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80070a0:	f7ff ff16 	bl	8006ed0 <inHandlerMode>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d016      	beq.n	80070d8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80070aa:	f107 0308 	add.w	r3, r7, #8
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fb5b 	bl	800776c <xQueueGiveFromISR>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d001      	beq.n	80070c0 <osMutexRelease+0x30>
      return osErrorOS;
 80070bc:	23ff      	movs	r3, #255	; 0xff
 80070be:	e017      	b.n	80070f0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d013      	beq.n	80070ee <osMutexRelease+0x5e>
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <osMutexRelease+0x68>)
 80070c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	e00a      	b.n	80070ee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80070d8:	2300      	movs	r3, #0
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa46 	bl	8007570 <xQueueGenericSend>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d001      	beq.n	80070ee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80070ea:	23ff      	movs	r3, #255	; 0xff
 80070ec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f103 0208 	add.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f103 0208 	add.w	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f103 0208 	add.w	r2, r3, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b4:	d103      	bne.n	80071be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e00c      	b.n	80071d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3308      	adds	r3, #8
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e002      	b.n	80071cc <vListInsert+0x2e>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d2f6      	bcs.n	80071c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	601a      	str	r2, [r3, #0]
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6892      	ldr	r2, [r2, #8]
 8007226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6852      	ldr	r2, [r2, #4]
 8007230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d103      	bne.n	8007244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800728e:	f001 fef1 	bl	8009074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	441a      	add	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	3b01      	subs	r3, #1
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	441a      	add	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	22ff      	movs	r2, #255	; 0xff
 80072d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	22ff      	movs	r2, #255	; 0xff
 80072da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d114      	bne.n	800730e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01a      	beq.n	8007322 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3310      	adds	r3, #16
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 f9ad 	bl	8008650 <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d012      	beq.n	8007322 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <xQueueGenericReset+0xcc>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	e009      	b.n	8007322 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3310      	adds	r3, #16
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fef2 	bl	80070fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3324      	adds	r3, #36	; 0x24
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff feed 	bl	80070fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007322:	f001 fed7 	bl	80090d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007326:	2301      	movs	r3, #1
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	; 0x38
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <xQueueGenericCreateStatic+0x52>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <xQueueGenericCreateStatic+0x56>
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <xQueueGenericCreateStatic+0x58>
 800738a:	2300      	movs	r3, #0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	623b      	str	r3, [r7, #32]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <xQueueGenericCreateStatic+0x7e>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <xQueueGenericCreateStatic+0x82>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <xQueueGenericCreateStatic+0x84>
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	61fb      	str	r3, [r7, #28]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073d2:	2348      	movs	r3, #72	; 0x48
 80073d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b48      	cmp	r3, #72	; 0x48
 80073da:	d00a      	beq.n	80073f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	61bb      	str	r3, [r7, #24]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00d      	beq.n	800741a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4613      	mov	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f83f 	bl	8007498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800741c:	4618      	mov	r0, r3
 800741e:	3730      	adds	r7, #48	; 0x30
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	613b      	str	r3, [r7, #16]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3348      	adds	r3, #72	; 0x48
 800745c:	4618      	mov	r0, r3
 800745e:	f001 ff2b 	bl	80092b8 <pvPortMalloc>
 8007462:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d011      	beq.n	800748e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	3348      	adds	r3, #72	; 0x48
 8007472:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800747c:	79fa      	ldrb	r2, [r7, #7]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f805 	bl	8007498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800748e:	69bb      	ldr	r3, [r7, #24]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074c6:	2101      	movs	r1, #1
 80074c8:	69b8      	ldr	r0, [r7, #24]
 80074ca:	f7ff fecb 	bl	8007264 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074f6:	2300      	movs	r3, #0
 80074f8:	2200      	movs	r2, #0
 80074fa:	2100      	movs	r1, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f837 	bl	8007570 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	461a      	mov	r2, r3
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	6978      	ldr	r0, [r7, #20]
 8007524:	f7ff ff7e 	bl	8007424 <xQueueGenericCreate>
 8007528:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff ffd3 	bl	80074d6 <prvInitialiseMutex>

		return xNewQueue;
 8007530:	68fb      	ldr	r3, [r7, #12]
	}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af02      	add	r7, sp, #8
 8007540:	4603      	mov	r3, r0
 8007542:	6039      	str	r1, [r7, #0]
 8007544:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007546:	2301      	movs	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2200      	movs	r2, #0
 8007556:	6939      	ldr	r1, [r7, #16]
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f7ff feeb 	bl	8007334 <xQueueGenericCreateStatic>
 800755e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff ffb8 	bl	80074d6 <prvInitialiseMutex>

		return xNewQueue;
 8007566:	68fb      	ldr	r3, [r7, #12]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08e      	sub	sp, #56	; 0x38
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueGenericSend+0x32>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d103      	bne.n	80075b0 <xQueueGenericSend+0x40>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <xQueueGenericSend+0x44>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e000      	b.n	80075b6 <xQueueGenericSend+0x46>
 80075b4:	2300      	movs	r3, #0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <xQueueGenericSend+0x60>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d103      	bne.n	80075de <xQueueGenericSend+0x6e>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <xQueueGenericSend+0x72>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <xQueueGenericSend+0x74>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <xQueueGenericSend+0x8e>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	623b      	str	r3, [r7, #32]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075fe:	f001 f9e7 	bl	80089d0 <xTaskGetSchedulerState>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <xQueueGenericSend+0x9e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <xQueueGenericSend+0xa2>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <xQueueGenericSend+0xa4>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <xQueueGenericSend+0xbe>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	61fb      	str	r3, [r7, #28]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800762e:	f001 fd21 	bl	8009074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763a:	429a      	cmp	r2, r3
 800763c:	d302      	bcc.n	8007644 <xQueueGenericSend+0xd4>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d129      	bne.n	8007698 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	68b9      	ldr	r1, [r7, #8]
 8007648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800764a:	f000 fac1 	bl	8007bd0 <prvCopyDataToQueue>
 800764e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d010      	beq.n	800767a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	3324      	adds	r3, #36	; 0x24
 800765c:	4618      	mov	r0, r3
 800765e:	f000 fff7 	bl	8008650 <xTaskRemoveFromEventList>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d013      	beq.n	8007690 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007668:	4b3f      	ldr	r3, [pc, #252]	; (8007768 <xQueueGenericSend+0x1f8>)
 800766a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	e00a      	b.n	8007690 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007680:	4b39      	ldr	r3, [pc, #228]	; (8007768 <xQueueGenericSend+0x1f8>)
 8007682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007690:	f001 fd20 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 8007694:	2301      	movs	r3, #1
 8007696:	e063      	b.n	8007760 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800769e:	f001 fd19 	bl	80090d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e05c      	b.n	8007760 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d106      	bne.n	80076ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 f82f 	bl	8008714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ba:	f001 fd0b 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076be:	f000 fddf 	bl	8008280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076c2:	f001 fcd7 	bl	8009074 <vPortEnterCritical>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076cc:	b25b      	sxtb	r3, r3
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d2:	d103      	bne.n	80076dc <xQueueGenericSend+0x16c>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e2:	b25b      	sxtb	r3, r3
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e8:	d103      	bne.n	80076f2 <xQueueGenericSend+0x182>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076f2:	f001 fcef 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076f6:	1d3a      	adds	r2, r7, #4
 80076f8:	f107 0314 	add.w	r3, r7, #20
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 f81e 	bl	8008740 <xTaskCheckForTimeOut>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d124      	bne.n	8007754 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800770a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800770c:	f000 fb58 	bl	8007dc0 <prvIsQueueFull>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d018      	beq.n	8007748 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	3310      	adds	r3, #16
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f000 ff72 	bl	8008608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007726:	f000 fae3 	bl	8007cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800772a:	f000 fdb7 	bl	800829c <xTaskResumeAll>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f af7c 	bne.w	800762e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007736:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <xQueueGenericSend+0x1f8>)
 8007738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	e772      	b.n	800762e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800774a:	f000 fad1 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800774e:	f000 fda5 	bl	800829c <xTaskResumeAll>
 8007752:	e76c      	b.n	800762e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007756:	f000 facb 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800775a:	f000 fd9f 	bl	800829c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800775e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007760:	4618      	mov	r0, r3
 8007762:	3738      	adds	r7, #56	; 0x38
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08e      	sub	sp, #56	; 0x38
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	623b      	str	r3, [r7, #32]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <xQueueGiveFromISR+0x48>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	61fb      	str	r3, [r7, #28]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <xQueueGiveFromISR+0x58>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <xQueueGiveFromISR+0x5c>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <xQueueGiveFromISR+0x5e>
 80077c8:	2300      	movs	r3, #0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	61bb      	str	r3, [r7, #24]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077e4:	f001 fd28 	bl	8009238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077e8:	f3ef 8211 	mrs	r2, BASEPRI
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	617a      	str	r2, [r7, #20]
 80077fe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007800:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007802:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007810:	429a      	cmp	r2, r3
 8007812:	d22b      	bcs.n	800786c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800781a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800782e:	d112      	bne.n	8007856 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d016      	beq.n	8007866 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	3324      	adds	r3, #36	; 0x24
 800783c:	4618      	mov	r0, r3
 800783e:	f000 ff07 	bl	8008650 <xTaskRemoveFromEventList>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00e      	beq.n	8007866 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e007      	b.n	8007866 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800785a:	3301      	adds	r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	b25a      	sxtb	r2, r3
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007866:	2301      	movs	r3, #1
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
 800786a:	e001      	b.n	8007870 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800786c:	2300      	movs	r3, #0
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800787a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800787e:	4618      	mov	r0, r3
 8007880:	3738      	adds	r7, #56	; 0x38
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08e      	sub	sp, #56	; 0x38
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	623b      	str	r3, [r7, #32]
}
 80078b6:	bf00      	nop
 80078b8:	e7fe      	b.n	80078b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	61fb      	str	r3, [r7, #28]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078d8:	f001 f87a 	bl	80089d0 <xTaskGetSchedulerState>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <xQueueSemaphoreTake+0x60>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <xQueueSemaphoreTake+0x64>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <xQueueSemaphoreTake+0x66>
 80078ec:	2300      	movs	r3, #0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	61bb      	str	r3, [r7, #24]
}
 8007904:	bf00      	nop
 8007906:	e7fe      	b.n	8007906 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007908:	f001 fbb4 	bl	8009074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2b00      	cmp	r3, #0
 8007916:	d024      	beq.n	8007962 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	1e5a      	subs	r2, r3, #1
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007928:	f001 f9fa 	bl	8008d20 <pvTaskIncrementMutexHeldCount>
 800792c:	4602      	mov	r2, r0
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00f      	beq.n	800795a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	3310      	adds	r3, #16
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fe86 	bl	8008650 <xTaskRemoveFromEventList>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800794a:	4b54      	ldr	r3, [pc, #336]	; (8007a9c <xQueueSemaphoreTake+0x214>)
 800794c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800795a:	f001 fbbb 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 800795e:	2301      	movs	r3, #1
 8007960:	e097      	b.n	8007a92 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d111      	bne.n	800798c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	617b      	str	r3, [r7, #20]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007984:	f001 fba6 	bl	80090d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007988:	2300      	movs	r3, #0
 800798a:	e082      	b.n	8007a92 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007992:	f107 030c 	add.w	r3, r7, #12
 8007996:	4618      	mov	r0, r3
 8007998:	f000 febc 	bl	8008714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a0:	f001 fb98 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a4:	f000 fc6c 	bl	8008280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a8:	f001 fb64 	bl	8009074 <vPortEnterCritical>
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b8:	d103      	bne.n	80079c2 <xQueueSemaphoreTake+0x13a>
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ce:	d103      	bne.n	80079d8 <xQueueSemaphoreTake+0x150>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d8:	f001 fb7c 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079dc:	463a      	mov	r2, r7
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 feab 	bl	8008740 <xTaskCheckForTimeOut>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d132      	bne.n	8007a56 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079f2:	f000 f9cf 	bl	8007d94 <prvIsQueueEmpty>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d026      	beq.n	8007a4a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a04:	f001 fb36 	bl	8009074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fffd 	bl	8008a0c <xTaskPriorityInherit>
 8007a12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a14:	f001 fb5e 	bl	80090d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	3324      	adds	r3, #36	; 0x24
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fdf1 	bl	8008608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a28:	f000 f962 	bl	8007cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a2c:	f000 fc36 	bl	800829c <xTaskResumeAll>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f47f af68 	bne.w	8007908 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a38:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <xQueueSemaphoreTake+0x214>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	e75e      	b.n	8007908 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a4c:	f000 f950 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a50:	f000 fc24 	bl	800829c <xTaskResumeAll>
 8007a54:	e758      	b.n	8007908 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a58:	f000 f94a 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a5c:	f000 fc1e 	bl	800829c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a62:	f000 f997 	bl	8007d94 <prvIsQueueEmpty>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f43f af4d 	beq.w	8007908 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007a74:	f001 fafe 	bl	8009074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a7a:	f000 f891 	bl	8007ba0 <prvGetDisinheritPriorityAfterTimeout>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 f8bc 	bl	8008c04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a8c:	f001 fb22 	bl	80090d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3738      	adds	r7, #56	; 0x38
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	623b      	str	r3, [r7, #32]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <xQueueReceiveFromISR+0x3a>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <xQueueReceiveFromISR+0x3e>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <xQueueReceiveFromISR+0x40>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	61fb      	str	r3, [r7, #28]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007afa:	f001 fb9d 	bl	8009238 <vPortValidateInterruptPriority>
	__asm volatile
 8007afe:	f3ef 8211 	mrs	r2, BASEPRI
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	61ba      	str	r2, [r7, #24]
 8007b14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d02f      	beq.n	8007b86 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b34:	f000 f8b6 	bl	8007ca4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b48:	d112      	bne.n	8007b70 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d016      	beq.n	8007b80 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	3310      	adds	r3, #16
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fd7a 	bl	8008650 <xTaskRemoveFromEventList>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00e      	beq.n	8007b80 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e007      	b.n	8007b80 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b74:	3301      	adds	r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	b25a      	sxtb	r2, r3
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b80:	2301      	movs	r3, #1
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	e001      	b.n	8007b8a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f383 8811 	msr	BASEPRI, r3
}
 8007b94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3738      	adds	r7, #56	; 0x38
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f1c3 0307 	rsb	r3, r3, #7
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e001      	b.n	8007bc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d14d      	bne.n	8007c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 ff7c 	bl	8008af8 <xTaskPriorityDisinherit>
 8007c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	e043      	b.n	8007c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d119      	bne.n	8007c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6858      	ldr	r0, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	f002 f962 	bl	8009ee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d32b      	bcc.n	8007c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e026      	b.n	8007c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68d8      	ldr	r0, [r3, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	f002 f948 	bl	8009ee4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	425b      	negs	r3, r3
 8007c5e:	441a      	add	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d207      	bcs.n	8007c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	425b      	negs	r3, r3
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d105      	bne.n	8007c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c9a:	697b      	ldr	r3, [r7, #20]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	441a      	add	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d303      	bcc.n	8007cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68d9      	ldr	r1, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6838      	ldr	r0, [r7, #0]
 8007ce4:	f002 f8fe 	bl	8009ee4 <memcpy>
	}
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cf8:	f001 f9bc 	bl	8009074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d04:	e011      	b.n	8007d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d012      	beq.n	8007d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3324      	adds	r3, #36	; 0x24
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fc9c 	bl	8008650 <xTaskRemoveFromEventList>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d1e:	f000 fd71 	bl	8008804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dce9      	bgt.n	8007d06 <prvUnlockQueue+0x16>
 8007d32:	e000      	b.n	8007d36 <prvUnlockQueue+0x46>
					break;
 8007d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	22ff      	movs	r2, #255	; 0xff
 8007d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d3e:	f001 f9c9 	bl	80090d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d42:	f001 f997 	bl	8009074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d4e:	e011      	b.n	8007d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d012      	beq.n	8007d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3310      	adds	r3, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fc77 	bl	8008650 <xTaskRemoveFromEventList>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d68:	f000 fd4c 	bl	8008804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dce9      	bgt.n	8007d50 <prvUnlockQueue+0x60>
 8007d7c:	e000      	b.n	8007d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	22ff      	movs	r2, #255	; 0xff
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d88:	f001 f9a4 	bl	80090d4 <vPortExitCritical>
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d9c:	f001 f96a 	bl	8009074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e001      	b.n	8007db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db2:	f001 f98f 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dc8:	f001 f954 	bl	8009074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d102      	bne.n	8007dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e001      	b.n	8007de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007de2:	f001 f977 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08e      	sub	sp, #56	; 0x38
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	623b      	str	r3, [r7, #32]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61fb      	str	r3, [r7, #28]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e36:	23b4      	movs	r3, #180	; 0xb4
 8007e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2bb4      	cmp	r3, #180	; 0xb4
 8007e3e:	d00a      	beq.n	8007e56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61bb      	str	r3, [r7, #24]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01e      	beq.n	8007e9c <xTaskCreateStatic+0xac>
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01b      	beq.n	8007e9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e76:	2300      	movs	r3, #0
 8007e78:	9303      	str	r3, [sp, #12]
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	9302      	str	r3, [sp, #8]
 8007e7e:	f107 0314 	add.w	r3, r7, #20
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 f850 	bl	8007f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e96:	f000 f8eb 	bl	8008070 <prvAddNewTaskToReadyList>
 8007e9a:	e001      	b.n	8007ea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ea0:	697b      	ldr	r3, [r7, #20]
	}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3728      	adds	r7, #40	; 0x28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b08c      	sub	sp, #48	; 0x30
 8007eae:	af04      	add	r7, sp, #16
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 f9fa 	bl	80092b8 <pvPortMalloc>
 8007ec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ecc:	20b4      	movs	r0, #180	; 0xb4
 8007ece:	f001 f9f3 	bl	80092b8 <pvPortMalloc>
 8007ed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
 8007ee0:	e005      	b.n	8007eee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ee2:	6978      	ldr	r0, [r7, #20]
 8007ee4:	f001 fab4 	bl	8009450 <vPortFree>
 8007ee8:	e001      	b.n	8007eee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d017      	beq.n	8007f24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	2300      	movs	r3, #0
 8007f00:	9303      	str	r3, [sp, #12]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	9302      	str	r3, [sp, #8]
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 f80e 	bl	8007f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f18:	69f8      	ldr	r0, [r7, #28]
 8007f1a:	f000 f8a9 	bl	8008070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e002      	b.n	8007f2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f023 0307 	bic.w	r3, r3, #7
 8007f5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	617b      	str	r3, [r7, #20]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d01f      	beq.n	8007fc2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e012      	b.n	8007fae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	7819      	ldrb	r1, [r3, #0]
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	3334      	adds	r3, #52	; 0x34
 8007f98:	460a      	mov	r2, r1
 8007f9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d006      	beq.n	8007fb6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	3301      	adds	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d9e9      	bls.n	8007f88 <prvInitialiseNewTask+0x54>
 8007fb4:	e000      	b.n	8007fb8 <prvInitialiseNewTask+0x84>
			{
				break;
 8007fb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fc0:	e003      	b.n	8007fca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	d901      	bls.n	8007fd4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fd0:	2306      	movs	r3, #6
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f8a6 	bl	800713c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff f8a1 	bl	800713c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	f1c3 0207 	rsb	r2, r3, #7
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	2200      	movs	r2, #0
 800801c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	334c      	adds	r3, #76	; 0x4c
 8008024:	2260      	movs	r2, #96	; 0x60
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f001 ff83 	bl	8009f34 <memset>
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <prvInitialiseNewTask+0x130>)
 8008032:	651a      	str	r2, [r3, #80]	; 0x50
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <prvInitialiseNewTask+0x134>)
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	4a0b      	ldr	r2, [pc, #44]	; (800806c <prvInitialiseNewTask+0x138>)
 800803e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	69b8      	ldr	r0, [r7, #24]
 8008046:	f000 fee5 	bl	8008e14 <pxPortInitialiseStack>
 800804a:	4602      	mov	r2, r0
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800805c:	bf00      	nop
 800805e:	3720      	adds	r7, #32
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	0800b318 	.word	0x0800b318
 8008068:	0800b338 	.word	0x0800b338
 800806c:	0800b2f8 	.word	0x0800b2f8

08008070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008078:	f000 fffc 	bl	8009074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800807c:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <prvAddNewTaskToReadyList+0xb8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	4a29      	ldr	r2, [pc, #164]	; (8008128 <prvAddNewTaskToReadyList+0xb8>)
 8008084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008086:	4b29      	ldr	r3, [pc, #164]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800808e:	4a27      	ldr	r2, [pc, #156]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008094:	4b24      	ldr	r3, [pc, #144]	; (8008128 <prvAddNewTaskToReadyList+0xb8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d110      	bne.n	80080be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800809c:	f000 fbd6 	bl	800884c <prvInitialiseTaskLists>
 80080a0:	e00d      	b.n	80080be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080a2:	4b23      	ldr	r3, [pc, #140]	; (8008130 <prvAddNewTaskToReadyList+0xc0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080aa:	4b20      	ldr	r3, [pc, #128]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d802      	bhi.n	80080be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080b8:	4a1c      	ldr	r2, [pc, #112]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080be:	4b1d      	ldr	r3, [pc, #116]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 80080c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	2201      	movs	r2, #1
 80080ce:	409a      	lsls	r2, r3
 80080d0:	4b19      	ldr	r3, [pc, #100]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4a15      	ldr	r2, [pc, #84]	; (800813c <prvAddNewTaskToReadyList+0xcc>)
 80080e8:	441a      	add	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7ff f830 	bl	8007156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080f6:	f000 ffed 	bl	80090d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <prvAddNewTaskToReadyList+0xc0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00e      	beq.n	8008120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <prvAddNewTaskToReadyList+0xbc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	429a      	cmp	r2, r3
 800810e:	d207      	bcs.n	8008120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <prvAddNewTaskToReadyList+0xd0>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	200006d0 	.word	0x200006d0
 800812c:	200005d0 	.word	0x200005d0
 8008130:	200006dc 	.word	0x200006dc
 8008134:	200006ec 	.word	0x200006ec
 8008138:	200006d8 	.word	0x200006d8
 800813c:	200005d4 	.word	0x200005d4
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d017      	beq.n	8008186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <vTaskDelay+0x60>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <vTaskDelay+0x30>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60bb      	str	r3, [r7, #8]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008174:	f000 f884 	bl	8008280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fde4 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008180:	f000 f88c 	bl	800829c <xTaskResumeAll>
 8008184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <vTaskDelay+0x64>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	200006f8 	.word	0x200006f8
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ba:	463a      	mov	r2, r7
 80081bc:	1d39      	adds	r1, r7, #4
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f8 fcc8 	bl	8000b58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	9202      	str	r2, [sp, #8]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	460a      	mov	r2, r1
 80081da:	4921      	ldr	r1, [pc, #132]	; (8008260 <vTaskStartScheduler+0xb4>)
 80081dc:	4821      	ldr	r0, [pc, #132]	; (8008264 <vTaskStartScheduler+0xb8>)
 80081de:	f7ff fe07 	bl	8007df0 <xTaskCreateStatic>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <vTaskStartScheduler+0xbc>)
 80081e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081e8:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <vTaskStartScheduler+0xbc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e001      	b.n	80081fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d11b      	bne.n	8008238 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	613b      	str	r3, [r7, #16]
}
 8008212:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008214:	4b15      	ldr	r3, [pc, #84]	; (800826c <vTaskStartScheduler+0xc0>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	334c      	adds	r3, #76	; 0x4c
 800821a:	4a15      	ldr	r2, [pc, #84]	; (8008270 <vTaskStartScheduler+0xc4>)
 800821c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800821e:	4b15      	ldr	r3, [pc, #84]	; (8008274 <vTaskStartScheduler+0xc8>)
 8008220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008226:	4b14      	ldr	r3, [pc, #80]	; (8008278 <vTaskStartScheduler+0xcc>)
 8008228:	2201      	movs	r2, #1
 800822a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800822c:	4b13      	ldr	r3, [pc, #76]	; (800827c <vTaskStartScheduler+0xd0>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008232:	f000 fe7d 	bl	8008f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008236:	e00e      	b.n	8008256 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800823e:	d10a      	bne.n	8008256 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <vTaskStartScheduler+0xa8>
}
 8008256:	bf00      	nop
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	0800b19c 	.word	0x0800b19c
 8008264:	0800881d 	.word	0x0800881d
 8008268:	200006f4 	.word	0x200006f4
 800826c:	200005d0 	.word	0x200005d0
 8008270:	20000010 	.word	0x20000010
 8008274:	200006f0 	.word	0x200006f0
 8008278:	200006dc 	.word	0x200006dc
 800827c:	200006d4 	.word	0x200006d4

08008280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <vTaskSuspendAll+0x18>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	4a03      	ldr	r2, [pc, #12]	; (8008298 <vTaskSuspendAll+0x18>)
 800828c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800828e:	bf00      	nop
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	200006f8 	.word	0x200006f8

0800829c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082aa:	4b41      	ldr	r3, [pc, #260]	; (80083b0 <xTaskResumeAll+0x114>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	603b      	str	r3, [r7, #0]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082c8:	f000 fed4 	bl	8009074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082cc:	4b38      	ldr	r3, [pc, #224]	; (80083b0 <xTaskResumeAll+0x114>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	4a37      	ldr	r2, [pc, #220]	; (80083b0 <xTaskResumeAll+0x114>)
 80082d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082d6:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <xTaskResumeAll+0x114>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d161      	bne.n	80083a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082de:	4b35      	ldr	r3, [pc, #212]	; (80083b4 <xTaskResumeAll+0x118>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d05d      	beq.n	80083a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082e6:	e02e      	b.n	8008346 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e8:	4b33      	ldr	r3, [pc, #204]	; (80083b8 <xTaskResumeAll+0x11c>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3318      	adds	r3, #24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe ff8b 	bl	8007210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe ff86 	bl	8007210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	2201      	movs	r2, #1
 800830a:	409a      	lsls	r2, r3
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <xTaskResumeAll+0x120>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4313      	orrs	r3, r2
 8008312:	4a2a      	ldr	r2, [pc, #168]	; (80083bc <xTaskResumeAll+0x120>)
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	4613      	mov	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4a27      	ldr	r2, [pc, #156]	; (80083c0 <xTaskResumeAll+0x124>)
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fe ff12 	bl	8007156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <xTaskResumeAll+0x128>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008340:	4b21      	ldr	r3, [pc, #132]	; (80083c8 <xTaskResumeAll+0x12c>)
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008346:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <xTaskResumeAll+0x11c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1cc      	bne.n	80082e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008354:	f000 fb1c 	bl	8008990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008358:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <xTaskResumeAll+0x130>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d010      	beq.n	8008386 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008364:	f000 f836 	bl	80083d4 <xTaskIncrementTick>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <xTaskResumeAll+0x12c>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3b01      	subs	r3, #1
 8008378:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f1      	bne.n	8008364 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008380:	4b12      	ldr	r3, [pc, #72]	; (80083cc <xTaskResumeAll+0x130>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <xTaskResumeAll+0x12c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800838e:	2301      	movs	r3, #1
 8008390:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008392:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <xTaskResumeAll+0x134>)
 8008394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083a2:	f000 fe97 	bl	80090d4 <vPortExitCritical>

	return xAlreadyYielded;
 80083a6:	68bb      	ldr	r3, [r7, #8]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200006f8 	.word	0x200006f8
 80083b4:	200006d0 	.word	0x200006d0
 80083b8:	20000690 	.word	0x20000690
 80083bc:	200006d8 	.word	0x200006d8
 80083c0:	200005d4 	.word	0x200005d4
 80083c4:	200005d0 	.word	0x200005d0
 80083c8:	200006e4 	.word	0x200006e4
 80083cc:	200006e0 	.word	0x200006e0
 80083d0:	e000ed04 	.word	0xe000ed04

080083d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083de:	4b4e      	ldr	r3, [pc, #312]	; (8008518 <xTaskIncrementTick+0x144>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 808e 	bne.w	8008504 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083e8:	4b4c      	ldr	r3, [pc, #304]	; (800851c <xTaskIncrementTick+0x148>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3301      	adds	r3, #1
 80083ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083f0:	4a4a      	ldr	r2, [pc, #296]	; (800851c <xTaskIncrementTick+0x148>)
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d120      	bne.n	800843e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083fc:	4b48      	ldr	r3, [pc, #288]	; (8008520 <xTaskIncrementTick+0x14c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <xTaskIncrementTick+0x48>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	603b      	str	r3, [r7, #0]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <xTaskIncrementTick+0x46>
 800841c:	4b40      	ldr	r3, [pc, #256]	; (8008520 <xTaskIncrementTick+0x14c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	4b40      	ldr	r3, [pc, #256]	; (8008524 <xTaskIncrementTick+0x150>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a3e      	ldr	r2, [pc, #248]	; (8008520 <xTaskIncrementTick+0x14c>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	4a3e      	ldr	r2, [pc, #248]	; (8008524 <xTaskIncrementTick+0x150>)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	4b3d      	ldr	r3, [pc, #244]	; (8008528 <xTaskIncrementTick+0x154>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a3c      	ldr	r2, [pc, #240]	; (8008528 <xTaskIncrementTick+0x154>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	f000 faa9 	bl	8008990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800843e:	4b3b      	ldr	r3, [pc, #236]	; (800852c <xTaskIncrementTick+0x158>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	429a      	cmp	r2, r3
 8008446:	d348      	bcc.n	80084da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008448:	4b35      	ldr	r3, [pc, #212]	; (8008520 <xTaskIncrementTick+0x14c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008452:	4b36      	ldr	r3, [pc, #216]	; (800852c <xTaskIncrementTick+0x158>)
 8008454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008458:	601a      	str	r2, [r3, #0]
					break;
 800845a:	e03e      	b.n	80084da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845c:	4b30      	ldr	r3, [pc, #192]	; (8008520 <xTaskIncrementTick+0x14c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d203      	bcs.n	800847c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008474:	4a2d      	ldr	r2, [pc, #180]	; (800852c <xTaskIncrementTick+0x158>)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800847a:	e02e      	b.n	80084da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	3304      	adds	r3, #4
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fec5 	bl	8007210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	3318      	adds	r3, #24
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe febc 	bl	8007210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	2201      	movs	r2, #1
 800849e:	409a      	lsls	r2, r3
 80084a0:	4b23      	ldr	r3, [pc, #140]	; (8008530 <xTaskIncrementTick+0x15c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	4a22      	ldr	r2, [pc, #136]	; (8008530 <xTaskIncrementTick+0x15c>)
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4a1f      	ldr	r2, [pc, #124]	; (8008534 <xTaskIncrementTick+0x160>)
 80084b8:	441a      	add	r2, r3
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	3304      	adds	r3, #4
 80084be:	4619      	mov	r1, r3
 80084c0:	4610      	mov	r0, r2
 80084c2:	f7fe fe48 	bl	8007156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ca:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <xTaskIncrementTick+0x164>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d3b9      	bcc.n	8008448 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084d4:	2301      	movs	r3, #1
 80084d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d8:	e7b6      	b.n	8008448 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084da:	4b17      	ldr	r3, [pc, #92]	; (8008538 <xTaskIncrementTick+0x164>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4914      	ldr	r1, [pc, #80]	; (8008534 <xTaskIncrementTick+0x160>)
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d901      	bls.n	80084f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084f6:	4b11      	ldr	r3, [pc, #68]	; (800853c <xTaskIncrementTick+0x168>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e004      	b.n	800850e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008504:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <xTaskIncrementTick+0x16c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3301      	adds	r3, #1
 800850a:	4a0d      	ldr	r2, [pc, #52]	; (8008540 <xTaskIncrementTick+0x16c>)
 800850c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800850e:	697b      	ldr	r3, [r7, #20]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	200006f8 	.word	0x200006f8
 800851c:	200006d4 	.word	0x200006d4
 8008520:	20000688 	.word	0x20000688
 8008524:	2000068c 	.word	0x2000068c
 8008528:	200006e8 	.word	0x200006e8
 800852c:	200006f0 	.word	0x200006f0
 8008530:	200006d8 	.word	0x200006d8
 8008534:	200005d4 	.word	0x200005d4
 8008538:	200005d0 	.word	0x200005d0
 800853c:	200006e4 	.word	0x200006e4
 8008540:	200006e0 	.word	0x200006e0

08008544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800854a:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <vTaskSwitchContext+0xac>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008552:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <vTaskSwitchContext+0xb0>)
 8008554:	2201      	movs	r2, #1
 8008556:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008558:	e044      	b.n	80085e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800855a:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <vTaskSwitchContext+0xb0>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008560:	4b25      	ldr	r3, [pc, #148]	; (80085f8 <vTaskSwitchContext+0xb4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	fab3 f383 	clz	r3, r3
 800856c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	f1c3 031f 	rsb	r3, r3, #31
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	4921      	ldr	r1, [pc, #132]	; (80085fc <vTaskSwitchContext+0xb8>)
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	607b      	str	r3, [r7, #4]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <vTaskSwitchContext+0x5a>
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4a14      	ldr	r2, [pc, #80]	; (80085fc <vTaskSwitchContext+0xb8>)
 80085ac:	4413      	add	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	3308      	adds	r3, #8
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d104      	bne.n	80085d0 <vTaskSwitchContext+0x8c>
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <vTaskSwitchContext+0xbc>)
 80085d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <vTaskSwitchContext+0xbc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	334c      	adds	r3, #76	; 0x4c
 80085e0:	4a08      	ldr	r2, [pc, #32]	; (8008604 <vTaskSwitchContext+0xc0>)
 80085e2:	6013      	str	r3, [r2, #0]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	200006f8 	.word	0x200006f8
 80085f4:	200006e4 	.word	0x200006e4
 80085f8:	200006d8 	.word	0x200006d8
 80085fc:	200005d4 	.word	0x200005d4
 8008600:	200005d0 	.word	0x200005d0
 8008604:	20000010 	.word	0x20000010

08008608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	60fb      	str	r3, [r7, #12]
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <vTaskPlaceOnEventList+0x44>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3318      	adds	r3, #24
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fe fdb1 	bl	800719e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800863c:	2101      	movs	r1, #1
 800863e:	6838      	ldr	r0, [r7, #0]
 8008640:	f000 fb82 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200005d0 	.word	0x200005d0

08008650 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60fb      	str	r3, [r7, #12]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	3318      	adds	r3, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fdc5 	bl	8007210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008686:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <xTaskRemoveFromEventList+0xac>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d11c      	bne.n	80086c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	3304      	adds	r3, #4
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fdbc 	bl	8007210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	2201      	movs	r2, #1
 800869e:	409a      	lsls	r2, r3
 80086a0:	4b17      	ldr	r3, [pc, #92]	; (8008700 <xTaskRemoveFromEventList+0xb0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	4a16      	ldr	r2, [pc, #88]	; (8008700 <xTaskRemoveFromEventList+0xb0>)
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4a13      	ldr	r2, [pc, #76]	; (8008704 <xTaskRemoveFromEventList+0xb4>)
 80086b8:	441a      	add	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fe fd48 	bl	8007156 <vListInsertEnd>
 80086c6:	e005      	b.n	80086d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	3318      	adds	r3, #24
 80086cc:	4619      	mov	r1, r3
 80086ce:	480e      	ldr	r0, [pc, #56]	; (8008708 <xTaskRemoveFromEventList+0xb8>)
 80086d0:	f7fe fd41 	bl	8007156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <xTaskRemoveFromEventList+0xbc>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	429a      	cmp	r2, r3
 80086e0:	d905      	bls.n	80086ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086e2:	2301      	movs	r3, #1
 80086e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <xTaskRemoveFromEventList+0xc0>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	e001      	b.n	80086f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086f2:	697b      	ldr	r3, [r7, #20]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	200006f8 	.word	0x200006f8
 8008700:	200006d8 	.word	0x200006d8
 8008704:	200005d4 	.word	0x200005d4
 8008708:	20000690 	.word	0x20000690
 800870c:	200005d0 	.word	0x200005d0
 8008710:	200006e4 	.word	0x200006e4

08008714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <vTaskInternalSetTimeOutState+0x24>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <vTaskInternalSetTimeOutState+0x28>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	605a      	str	r2, [r3, #4]
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	200006e8 	.word	0x200006e8
 800873c:	200006d4 	.word	0x200006d4

08008740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	613b      	str	r3, [r7, #16]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60fb      	str	r3, [r7, #12]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008782:	f000 fc77 	bl	8009074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <xTaskCheckForTimeOut+0xbc>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879e:	d102      	bne.n	80087a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e023      	b.n	80087ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <xTaskCheckForTimeOut+0xc0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d007      	beq.n	80087c2 <xTaskCheckForTimeOut+0x82>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d302      	bcc.n	80087c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e015      	b.n	80087ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d20b      	bcs.n	80087e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff9b 	bl	8008714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e004      	b.n	80087ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087ee:	f000 fc71 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 80087f2:	69fb      	ldr	r3, [r7, #28]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200006d4 	.word	0x200006d4
 8008800:	200006e8 	.word	0x200006e8

08008804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008808:	4b03      	ldr	r3, [pc, #12]	; (8008818 <vTaskMissedYield+0x14>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	200006e4 	.word	0x200006e4

0800881c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008824:	f000 f852 	bl	80088cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <prvIdleTask+0x28>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d9f9      	bls.n	8008824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008830:	4b05      	ldr	r3, [pc, #20]	; (8008848 <prvIdleTask+0x2c>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008840:	e7f0      	b.n	8008824 <prvIdleTask+0x8>
 8008842:	bf00      	nop
 8008844:	200005d4 	.word	0x200005d4
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
 8008856:	e00c      	b.n	8008872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4a12      	ldr	r2, [pc, #72]	; (80088ac <prvInitialiseTaskLists+0x60>)
 8008864:	4413      	add	r3, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fc48 	bl	80070fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3301      	adds	r3, #1
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b06      	cmp	r3, #6
 8008876:	d9ef      	bls.n	8008858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008878:	480d      	ldr	r0, [pc, #52]	; (80088b0 <prvInitialiseTaskLists+0x64>)
 800887a:	f7fe fc3f 	bl	80070fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800887e:	480d      	ldr	r0, [pc, #52]	; (80088b4 <prvInitialiseTaskLists+0x68>)
 8008880:	f7fe fc3c 	bl	80070fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008884:	480c      	ldr	r0, [pc, #48]	; (80088b8 <prvInitialiseTaskLists+0x6c>)
 8008886:	f7fe fc39 	bl	80070fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800888a:	480c      	ldr	r0, [pc, #48]	; (80088bc <prvInitialiseTaskLists+0x70>)
 800888c:	f7fe fc36 	bl	80070fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008890:	480b      	ldr	r0, [pc, #44]	; (80088c0 <prvInitialiseTaskLists+0x74>)
 8008892:	f7fe fc33 	bl	80070fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008896:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <prvInitialiseTaskLists+0x78>)
 8008898:	4a05      	ldr	r2, [pc, #20]	; (80088b0 <prvInitialiseTaskLists+0x64>)
 800889a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <prvInitialiseTaskLists+0x7c>)
 800889e:	4a05      	ldr	r2, [pc, #20]	; (80088b4 <prvInitialiseTaskLists+0x68>)
 80088a0:	601a      	str	r2, [r3, #0]
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200005d4 	.word	0x200005d4
 80088b0:	20000660 	.word	0x20000660
 80088b4:	20000674 	.word	0x20000674
 80088b8:	20000690 	.word	0x20000690
 80088bc:	200006a4 	.word	0x200006a4
 80088c0:	200006bc 	.word	0x200006bc
 80088c4:	20000688 	.word	0x20000688
 80088c8:	2000068c 	.word	0x2000068c

080088cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d2:	e019      	b.n	8008908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088d4:	f000 fbce 	bl	8009074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d8:	4b10      	ldr	r3, [pc, #64]	; (800891c <prvCheckTasksWaitingTermination+0x50>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fc93 	bl	8007210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <prvCheckTasksWaitingTermination+0x54>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <prvCheckTasksWaitingTermination+0x54>)
 80088f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088f4:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <prvCheckTasksWaitingTermination+0x58>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <prvCheckTasksWaitingTermination+0x58>)
 80088fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088fe:	f000 fbe9 	bl	80090d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f810 	bl	8008928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <prvCheckTasksWaitingTermination+0x58>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e1      	bne.n	80088d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200006a4 	.word	0x200006a4
 8008920:	200006d0 	.word	0x200006d0
 8008924:	200006b8 	.word	0x200006b8

08008928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	334c      	adds	r3, #76	; 0x4c
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fc81 	bl	800a23c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d108      	bne.n	8008956 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fd81 	bl	8009450 <vPortFree>
				vPortFree( pxTCB );
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fd7e 	bl	8009450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008954:	e018      	b.n	8008988 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800895c:	2b01      	cmp	r3, #1
 800895e:	d103      	bne.n	8008968 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fd75 	bl	8009450 <vPortFree>
	}
 8008966:	e00f      	b.n	8008988 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800896e:	2b02      	cmp	r3, #2
 8008970:	d00a      	beq.n	8008988 <prvDeleteTCB+0x60>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <prvDeleteTCB+0x5e>
	}
 8008988:	bf00      	nop
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvResetNextTaskUnblockTime+0x38>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <prvResetNextTaskUnblockTime+0x3c>)
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089a8:	e008      	b.n	80089bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <prvResetNextTaskUnblockTime+0x38>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4a04      	ldr	r2, [pc, #16]	; (80089cc <prvResetNextTaskUnblockTime+0x3c>)
 80089ba:	6013      	str	r3, [r2, #0]
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	20000688 	.word	0x20000688
 80089cc:	200006f0 	.word	0x200006f0

080089d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089d6:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <xTaskGetSchedulerState+0x34>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089de:	2301      	movs	r3, #1
 80089e0:	607b      	str	r3, [r7, #4]
 80089e2:	e008      	b.n	80089f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <xTaskGetSchedulerState+0x38>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089ec:	2302      	movs	r3, #2
 80089ee:	607b      	str	r3, [r7, #4]
 80089f0:	e001      	b.n	80089f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089f2:	2300      	movs	r3, #0
 80089f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089f6:	687b      	ldr	r3, [r7, #4]
	}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	200006dc 	.word	0x200006dc
 8008a08:	200006f8 	.word	0x200006f8

08008a0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d05e      	beq.n	8008ae0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	4b31      	ldr	r3, [pc, #196]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d24e      	bcs.n	8008ace <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	db06      	blt.n	8008a46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a38:	4b2c      	ldr	r3, [pc, #176]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	f1c3 0207 	rsb	r2, r3, #7
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6959      	ldr	r1, [r3, #20]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a26      	ldr	r2, [pc, #152]	; (8008af0 <xTaskPriorityInherit+0xe4>)
 8008a58:	4413      	add	r3, r2
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d12f      	bne.n	8008abe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fbd4 	bl	8007210 <uxListRemove>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	2201      	movs	r2, #1
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43da      	mvns	r2, r3
 8008a7a:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a84:	4b19      	ldr	r3, [pc, #100]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	2201      	movs	r2, #1
 8008a94:	409a      	lsls	r2, r3
 8008a96:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	4a15      	ldr	r2, [pc, #84]	; (8008af4 <xTaskPriorityInherit+0xe8>)
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <xTaskPriorityInherit+0xe4>)
 8008aae:	441a      	add	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fb4d 	bl	8007156 <vListInsertEnd>
 8008abc:	e004      	b.n	8008ac8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008abe:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	e008      	b.n	8008ae0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <xTaskPriorityInherit+0xe0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d201      	bcs.n	8008ae0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
	}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	200005d0 	.word	0x200005d0
 8008af0:	200005d4 	.word	0x200005d4
 8008af4:	200006d8 	.word	0x200006d8

08008af8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d06e      	beq.n	8008bec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b0e:	4b3a      	ldr	r3, [pc, #232]	; (8008bf8 <xTaskPriorityDisinherit+0x100>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d00a      	beq.n	8008b2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	60fb      	str	r3, [r7, #12]
}
 8008b2a:	bf00      	nop
 8008b2c:	e7fe      	b.n	8008b2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10a      	bne.n	8008b4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	60bb      	str	r3, [r7, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	e7fe      	b.n	8008b4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d044      	beq.n	8008bec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d140      	bne.n	8008bec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fb4e 	bl	8007210 <uxListRemove>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d115      	bne.n	8008ba6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	491f      	ldr	r1, [pc, #124]	; (8008bfc <xTaskPriorityDisinherit+0x104>)
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xTaskPriorityDisinherit+0xae>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	2201      	movs	r2, #1
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	43da      	mvns	r2, r3
 8008b9c:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <xTaskPriorityDisinherit+0x108>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	4a17      	ldr	r2, [pc, #92]	; (8008c00 <xTaskPriorityDisinherit+0x108>)
 8008ba4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	f1c3 0207 	rsb	r2, r3, #7
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <xTaskPriorityDisinherit+0x108>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	4a0d      	ldr	r2, [pc, #52]	; (8008c00 <xTaskPriorityDisinherit+0x108>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <xTaskPriorityDisinherit+0x104>)
 8008bda:	441a      	add	r2, r3
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fe fab7 	bl	8007156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bec:	697b      	ldr	r3, [r7, #20]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200005d0 	.word	0x200005d0
 8008bfc:	200005d4 	.word	0x200005d4
 8008c00:	200006d8 	.word	0x200006d8

08008c04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c12:	2301      	movs	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d077      	beq.n	8008d0c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10a      	bne.n	8008c3a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60fb      	str	r3, [r7, #12]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d902      	bls.n	8008c4a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e002      	b.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d058      	beq.n	8008d0c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d153      	bne.n	8008d0c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c64:	4b2b      	ldr	r3, [pc, #172]	; (8008d14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d10a      	bne.n	8008c84 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	60bb      	str	r3, [r7, #8]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	db04      	blt.n	8008ca2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	f1c3 0207 	rsb	r2, r3, #7
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	6959      	ldr	r1, [r3, #20]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	d129      	bne.n	8008d0c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe faa7 	bl	8007210 <uxListRemove>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	2201      	movs	r2, #1
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	4a10      	ldr	r2, [pc, #64]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008cdc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	409a      	lsls	r2, r3
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	4a0b      	ldr	r2, [pc, #44]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4a06      	ldr	r2, [pc, #24]	; (8008d18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cfe:	441a      	add	r2, r3
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fe fa25 	bl	8007156 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d0c:	bf00      	nop
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	200005d0 	.word	0x200005d0
 8008d18:	200005d4 	.word	0x200005d4
 8008d1c:	200006d8 	.word	0x200006d8

08008d20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d32:	3201      	adds	r2, #1
 8008d34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d36:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d38:	681b      	ldr	r3, [r3, #0]
	}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	200005d0 	.word	0x200005d0

08008d48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d52:	4b29      	ldr	r3, [pc, #164]	; (8008df8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d58:	4b28      	ldr	r3, [pc, #160]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fa56 	bl	8007210 <uxListRemove>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d6a:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	2201      	movs	r2, #1
 8008d72:	fa02 f303 	lsl.w	r3, r2, r3
 8008d76:	43da      	mvns	r2, r3
 8008d78:	4b21      	ldr	r3, [pc, #132]	; (8008e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	4a20      	ldr	r2, [pc, #128]	; (8008e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d88:	d10a      	bne.n	8008da0 <prvAddCurrentTaskToDelayedList+0x58>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d007      	beq.n	8008da0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d90:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	481a      	ldr	r0, [pc, #104]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d9a:	f7fe f9dc 	bl	8007156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d9e:	e026      	b.n	8008dee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008da8:	4b14      	ldr	r3, [pc, #80]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d209      	bcs.n	8008dcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db8:	4b13      	ldr	r3, [pc, #76]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f7fe f9ea 	bl	800719e <vListInsert>
}
 8008dca:	e010      	b.n	8008dee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f7fe f9e0 	bl	800719e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d202      	bcs.n	8008dee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008de8:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6013      	str	r3, [r2, #0]
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200006d4 	.word	0x200006d4
 8008dfc:	200005d0 	.word	0x200005d0
 8008e00:	200006d8 	.word	0x200006d8
 8008e04:	200006bc 	.word	0x200006bc
 8008e08:	2000068c 	.word	0x2000068c
 8008e0c:	20000688 	.word	0x20000688
 8008e10:	200006f0 	.word	0x200006f0

08008e14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3b04      	subs	r3, #4
 8008e24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3b04      	subs	r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f023 0201 	bic.w	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b04      	subs	r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e44:	4a0c      	ldr	r2, [pc, #48]	; (8008e78 <pxPortInitialiseStack+0x64>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b14      	subs	r3, #20
 8008e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b04      	subs	r3, #4
 8008e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f06f 0202 	mvn.w	r2, #2
 8008e62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3b20      	subs	r3, #32
 8008e68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	08008e7d 	.word	0x08008e7d

08008e7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <prvTaskExitError+0x54>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8e:	d00a      	beq.n	8008ea6 <prvTaskExitError+0x2a>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <prvTaskExitError+0x28>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60bb      	str	r3, [r7, #8]
}
 8008eb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008eba:	bf00      	nop
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0fc      	beq.n	8008ebc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ec2:	bf00      	nop
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	2000000c 	.word	0x2000000c
	...

08008ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ee0:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <pxCurrentTCBConst2>)
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eea:	f380 8809 	msr	PSP, r0
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8811 	msr	BASEPRI, r0
 8008efa:	4770      	bx	lr
 8008efc:	f3af 8000 	nop.w

08008f00 <pxCurrentTCBConst2>:
 8008f00:	200005d0 	.word	0x200005d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f08:	4808      	ldr	r0, [pc, #32]	; (8008f2c <prvPortStartFirstTask+0x24>)
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f380 8808 	msr	MSP, r0
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8814 	msr	CONTROL, r0
 8008f1a:	b662      	cpsie	i
 8008f1c:	b661      	cpsie	f
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	df00      	svc	0
 8008f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed08 	.word	0xe000ed08

08008f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f36:	4b46      	ldr	r3, [pc, #280]	; (8009050 <xPortStartScheduler+0x120>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a46      	ldr	r2, [pc, #280]	; (8009054 <xPortStartScheduler+0x124>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d10a      	bne.n	8008f56 <xPortStartScheduler+0x26>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	613b      	str	r3, [r7, #16]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f56:	4b3e      	ldr	r3, [pc, #248]	; (8009050 <xPortStartScheduler+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a3f      	ldr	r2, [pc, #252]	; (8009058 <xPortStartScheduler+0x128>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10a      	bne.n	8008f76 <xPortStartScheduler+0x46>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f76:	4b39      	ldr	r3, [pc, #228]	; (800905c <xPortStartScheduler+0x12c>)
 8008f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	4b31      	ldr	r3, [pc, #196]	; (8009060 <xPortStartScheduler+0x130>)
 8008f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f9e:	4b31      	ldr	r3, [pc, #196]	; (8009064 <xPortStartScheduler+0x134>)
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fa4:	e009      	b.n	8008fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <xPortStartScheduler+0x134>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4a2d      	ldr	r2, [pc, #180]	; (8009064 <xPortStartScheduler+0x134>)
 8008fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d0ef      	beq.n	8008fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fc6:	4b27      	ldr	r3, [pc, #156]	; (8009064 <xPortStartScheduler+0x134>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1c3 0307 	rsb	r3, r3, #7
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d00a      	beq.n	8008fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60bb      	str	r3, [r7, #8]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <xPortStartScheduler+0x134>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <xPortStartScheduler+0x134>)
 8008ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ff2:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <xPortStartScheduler+0x134>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffa:	4a1a      	ldr	r2, [pc, #104]	; (8009064 <xPortStartScheduler+0x134>)
 8008ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	b2da      	uxtb	r2, r3
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009006:	4b18      	ldr	r3, [pc, #96]	; (8009068 <xPortStartScheduler+0x138>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a17      	ldr	r2, [pc, #92]	; (8009068 <xPortStartScheduler+0x138>)
 800900c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <xPortStartScheduler+0x138>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a14      	ldr	r2, [pc, #80]	; (8009068 <xPortStartScheduler+0x138>)
 8009018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800901c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800901e:	f000 f8dd 	bl	80091dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009022:	4b12      	ldr	r3, [pc, #72]	; (800906c <xPortStartScheduler+0x13c>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009028:	f000 f8fc 	bl	8009224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800902c:	4b10      	ldr	r3, [pc, #64]	; (8009070 <xPortStartScheduler+0x140>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0f      	ldr	r2, [pc, #60]	; (8009070 <xPortStartScheduler+0x140>)
 8009032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009038:	f7ff ff66 	bl	8008f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800903c:	f7ff fa82 	bl	8008544 <vTaskSwitchContext>
	prvTaskExitError();
 8009040:	f7ff ff1c 	bl	8008e7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	e000ed00 	.word	0xe000ed00
 8009054:	410fc271 	.word	0x410fc271
 8009058:	410fc270 	.word	0x410fc270
 800905c:	e000e400 	.word	0xe000e400
 8009060:	200006fc 	.word	0x200006fc
 8009064:	20000700 	.word	0x20000700
 8009068:	e000ed20 	.word	0xe000ed20
 800906c:	2000000c 	.word	0x2000000c
 8009070:	e000ef34 	.word	0xe000ef34

08009074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	607b      	str	r3, [r7, #4]
}
 800908c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800908e:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <vPortEnterCritical+0x58>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <vPortEnterCritical+0x58>)
 8009096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <vPortEnterCritical+0x58>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d10f      	bne.n	80090c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <vPortEnterCritical+0x5c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	603b      	str	r3, [r7, #0]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <vPortEnterCritical+0x4a>
	}
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	2000000c 	.word	0x2000000c
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090da:	4b12      	ldr	r3, [pc, #72]	; (8009124 <vPortExitCritical+0x50>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <vPortExitCritical+0x24>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	607b      	str	r3, [r7, #4]
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <vPortExitCritical+0x50>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4a09      	ldr	r2, [pc, #36]	; (8009124 <vPortExitCritical+0x50>)
 8009100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009102:	4b08      	ldr	r3, [pc, #32]	; (8009124 <vPortExitCritical+0x50>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <vPortExitCritical+0x42>
 800910a:	2300      	movs	r3, #0
 800910c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f383 8811 	msr	BASEPRI, r3
}
 8009114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	2000000c 	.word	0x2000000c
	...

08009130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009130:	f3ef 8009 	mrs	r0, PSP
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <pxCurrentTCBConst>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	f01e 0f10 	tst.w	lr, #16
 8009140:	bf08      	it	eq
 8009142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	6010      	str	r0, [r2, #0]
 800914c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009154:	f380 8811 	msr	BASEPRI, r0
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f7ff f9f0 	bl	8008544 <vTaskSwitchContext>
 8009164:	f04f 0000 	mov.w	r0, #0
 8009168:	f380 8811 	msr	BASEPRI, r0
 800916c:	bc09      	pop	{r0, r3}
 800916e:	6819      	ldr	r1, [r3, #0]
 8009170:	6808      	ldr	r0, [r1, #0]
 8009172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009176:	f01e 0f10 	tst.w	lr, #16
 800917a:	bf08      	it	eq
 800917c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009180:	f380 8809 	msr	PSP, r0
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst>:
 8009190:	200005d0 	.word	0x200005d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	607b      	str	r3, [r7, #4]
}
 80091b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091b2:	f7ff f90f 	bl	80083d4 <xTaskIncrementTick>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <SysTick_Handler+0x40>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f383 8811 	msr	BASEPRI, r3
}
 80091ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091e0:	4b0b      	ldr	r3, [pc, #44]	; (8009210 <vPortSetupTimerInterrupt+0x34>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <vPortSetupTimerInterrupt+0x38>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <vPortSetupTimerInterrupt+0x3c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a0a      	ldr	r2, [pc, #40]	; (800921c <vPortSetupTimerInterrupt+0x40>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	4a09      	ldr	r2, [pc, #36]	; (8009220 <vPortSetupTimerInterrupt+0x44>)
 80091fa:	3b01      	subs	r3, #1
 80091fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091fe:	4b04      	ldr	r3, [pc, #16]	; (8009210 <vPortSetupTimerInterrupt+0x34>)
 8009200:	2207      	movs	r2, #7
 8009202:	601a      	str	r2, [r3, #0]
}
 8009204:	bf00      	nop
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	e000e010 	.word	0xe000e010
 8009214:	e000e018 	.word	0xe000e018
 8009218:	20000000 	.word	0x20000000
 800921c:	10624dd3 	.word	0x10624dd3
 8009220:	e000e014 	.word	0xe000e014

08009224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009234 <vPortEnableVFP+0x10>
 8009228:	6801      	ldr	r1, [r0, #0]
 800922a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800922e:	6001      	str	r1, [r0, #0]
 8009230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009232:	bf00      	nop
 8009234:	e000ed88 	.word	0xe000ed88

08009238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800923e:	f3ef 8305 	mrs	r3, IPSR
 8009242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b0f      	cmp	r3, #15
 8009248:	d914      	bls.n	8009274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800924a:	4a17      	ldr	r2, [pc, #92]	; (80092a8 <vPortValidateInterruptPriority+0x70>)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009254:	4b15      	ldr	r3, [pc, #84]	; (80092ac <vPortValidateInterruptPriority+0x74>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	7afa      	ldrb	r2, [r7, #11]
 800925a:	429a      	cmp	r2, r3
 800925c:	d20a      	bcs.n	8009274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	607b      	str	r3, [r7, #4]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009274:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <vPortValidateInterruptPriority+0x78>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <vPortValidateInterruptPriority+0x7c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d90a      	bls.n	800929a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	603b      	str	r3, [r7, #0]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <vPortValidateInterruptPriority+0x60>
	}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	e000e3f0 	.word	0xe000e3f0
 80092ac:	200006fc 	.word	0x200006fc
 80092b0:	e000ed0c 	.word	0xe000ed0c
 80092b4:	20000700 	.word	0x20000700

080092b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092c4:	f7fe ffdc 	bl	8008280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092c8:	4b5b      	ldr	r3, [pc, #364]	; (8009438 <pvPortMalloc+0x180>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092d0:	f000 f920 	bl	8009514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092d4:	4b59      	ldr	r3, [pc, #356]	; (800943c <pvPortMalloc+0x184>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4013      	ands	r3, r2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f040 8093 	bne.w	8009408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01d      	beq.n	8009324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092e8:	2208      	movs	r2, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d014      	beq.n	8009324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	3308      	adds	r3, #8
 8009302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <pvPortMalloc+0x6c>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	617b      	str	r3, [r7, #20]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d06e      	beq.n	8009408 <pvPortMalloc+0x150>
 800932a:	4b45      	ldr	r3, [pc, #276]	; (8009440 <pvPortMalloc+0x188>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d869      	bhi.n	8009408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009334:	4b43      	ldr	r3, [pc, #268]	; (8009444 <pvPortMalloc+0x18c>)
 8009336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009338:	4b42      	ldr	r3, [pc, #264]	; (8009444 <pvPortMalloc+0x18c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800933e:	e004      	b.n	800934a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d903      	bls.n	800935c <pvPortMalloc+0xa4>
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1f1      	bne.n	8009340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800935c:	4b36      	ldr	r3, [pc, #216]	; (8009438 <pvPortMalloc+0x180>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	429a      	cmp	r2, r3
 8009364:	d050      	beq.n	8009408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2208      	movs	r2, #8
 800936c:	4413      	add	r3, r2
 800936e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	2308      	movs	r3, #8
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	429a      	cmp	r2, r3
 8009386:	d91f      	bls.n	80093c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <pvPortMalloc+0xf8>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	613b      	str	r3, [r7, #16]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093c2:	69b8      	ldr	r0, [r7, #24]
 80093c4:	f000 f908 	bl	80095d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093c8:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <pvPortMalloc+0x188>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <pvPortMalloc+0x188>)
 80093d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093d6:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <pvPortMalloc+0x188>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <pvPortMalloc+0x190>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d203      	bcs.n	80093ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093e2:	4b17      	ldr	r3, [pc, #92]	; (8009440 <pvPortMalloc+0x188>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a18      	ldr	r2, [pc, #96]	; (8009448 <pvPortMalloc+0x190>)
 80093e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <pvPortMalloc+0x184>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <pvPortMalloc+0x194>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a11      	ldr	r2, [pc, #68]	; (800944c <pvPortMalloc+0x194>)
 8009406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009408:	f7fe ff48 	bl	800829c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <pvPortMalloc+0x174>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	60fb      	str	r3, [r7, #12]
}
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <pvPortMalloc+0x172>
	return pvReturn;
 800942c:	69fb      	ldr	r3, [r7, #28]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	2000430c 	.word	0x2000430c
 800943c:	20004320 	.word	0x20004320
 8009440:	20004310 	.word	0x20004310
 8009444:	20004304 	.word	0x20004304
 8009448:	20004314 	.word	0x20004314
 800944c:	20004318 	.word	0x20004318

08009450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d04d      	beq.n	80094fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009462:	2308      	movs	r3, #8
 8009464:	425b      	negs	r3, r3
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4413      	add	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	4b24      	ldr	r3, [pc, #144]	; (8009508 <vPortFree+0xb8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4013      	ands	r3, r2
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10a      	bne.n	8009494 <vPortFree+0x44>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	60fb      	str	r3, [r7, #12]
}
 8009490:	bf00      	nop
 8009492:	e7fe      	b.n	8009492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <vPortFree+0x62>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	60bb      	str	r3, [r7, #8]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	4b14      	ldr	r3, [pc, #80]	; (8009508 <vPortFree+0xb8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4013      	ands	r3, r2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01e      	beq.n	80094fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d11a      	bne.n	80094fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <vPortFree+0xb8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	43db      	mvns	r3, r3
 80094d2:	401a      	ands	r2, r3
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094d8:	f7fe fed2 	bl	8008280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <vPortFree+0xbc>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4413      	add	r3, r2
 80094e6:	4a09      	ldr	r2, [pc, #36]	; (800950c <vPortFree+0xbc>)
 80094e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ea:	6938      	ldr	r0, [r7, #16]
 80094ec:	f000 f874 	bl	80095d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <vPortFree+0xc0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	4a06      	ldr	r2, [pc, #24]	; (8009510 <vPortFree+0xc0>)
 80094f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094fa:	f7fe fecf 	bl	800829c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094fe:	bf00      	nop
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20004320 	.word	0x20004320
 800950c:	20004310 	.word	0x20004310
 8009510:	2000431c 	.word	0x2000431c

08009514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800951a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800951e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009520:	4b27      	ldr	r3, [pc, #156]	; (80095c0 <prvHeapInit+0xac>)
 8009522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00c      	beq.n	8009548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3307      	adds	r3, #7
 8009532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	4a1f      	ldr	r2, [pc, #124]	; (80095c0 <prvHeapInit+0xac>)
 8009544:	4413      	add	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800954c:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <prvHeapInit+0xb0>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009552:	4b1c      	ldr	r3, [pc, #112]	; (80095c4 <prvHeapInit+0xb0>)
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	4413      	add	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009560:	2208      	movs	r2, #8
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0307 	bic.w	r3, r3, #7
 800956e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <prvHeapInit+0xb4>)
 8009574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <prvHeapInit+0xb4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <prvHeapInit+0xb4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009594:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <prvHeapInit+0xb4>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	; (80095cc <prvHeapInit+0xb8>)
 80095a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <prvHeapInit+0xbc>)
 80095aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095ac:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <prvHeapInit+0xc0>)
 80095ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20000704 	.word	0x20000704
 80095c4:	20004304 	.word	0x20004304
 80095c8:	2000430c 	.word	0x2000430c
 80095cc:	20004314 	.word	0x20004314
 80095d0:	20004310 	.word	0x20004310
 80095d4:	20004320 	.word	0x20004320

080095d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095e0:	4b28      	ldr	r3, [pc, #160]	; (8009684 <prvInsertBlockIntoFreeList+0xac>)
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e002      	b.n	80095ec <prvInsertBlockIntoFreeList+0x14>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d8f7      	bhi.n	80095e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	4413      	add	r3, r2
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d108      	bne.n	800961a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	441a      	add	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d118      	bne.n	8009660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b15      	ldr	r3, [pc, #84]	; (8009688 <prvInsertBlockIntoFreeList+0xb0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d00d      	beq.n	8009656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e008      	b.n	8009668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvInsertBlockIntoFreeList+0xb0>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e003      	b.n	8009668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d002      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	20004304 	.word	0x20004304
 8009688:	2000430c 	.word	0x2000430c

0800968c <_ZNSaIcEC1Ev>:
 800968c:	4770      	bx	lr

0800968e <_ZNSaIcED1Ev>:
 800968e:	4770      	bx	lr

08009690 <_ZSt17__throw_bad_allocv>:
 8009690:	b508      	push	{r3, lr}
 8009692:	f000 fadb 	bl	8009c4c <abort>

08009696 <_ZSt19__throw_logic_errorPKc>:
 8009696:	b508      	push	{r3, lr}
 8009698:	f000 fad8 	bl	8009c4c <abort>

0800969c <_ZSt24__throw_invalid_argumentPKc>:
 800969c:	b508      	push	{r3, lr}
 800969e:	f000 fad5 	bl	8009c4c <abort>

080096a2 <_ZSt20__throw_length_errorPKc>:
 80096a2:	b508      	push	{r3, lr}
 80096a4:	f000 fad2 	bl	8009c4c <abort>

080096a8 <_ZSt20__throw_out_of_rangePKc>:
 80096a8:	b508      	push	{r3, lr}
 80096aa:	f000 facf 	bl	8009c4c <abort>

080096ae <_ZSt24__throw_out_of_range_fmtPKcz>:
 80096ae:	b40f      	push	{r0, r1, r2, r3}
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	f107 0418 	add.w	r4, r7, #24
 80096ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7f6 fddd 	bl	8000280 <strlen>
 80096c6:	f200 2307 	addw	r3, r0, #519	; 0x207
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	ebad 0d03 	sub.w	sp, sp, r3
 80096d2:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	60fc      	str	r4, [r7, #12]
 80096da:	4623      	mov	r3, r4
 80096dc:	4668      	mov	r0, sp
 80096de:	f000 f855 	bl	800978c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80096e2:	f000 fab3 	bl	8009c4c <abort>
	...

080096e8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b09c      	sub	sp, #112	; 0x70
 80096ec:	4606      	mov	r6, r0
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	460c      	mov	r4, r1
 80096f2:	1ba4      	subs	r4, r4, r6
 80096f4:	490e      	ldr	r1, [pc, #56]	; (8009730 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80096f6:	2269      	movs	r2, #105	; 0x69
 80096f8:	1d38      	adds	r0, r7, #4
 80096fa:	f000 fbf3 	bl	8009ee4 <memcpy>
 80096fe:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	ebad 0d03 	sub.w	sp, sp, r3
 800970a:	466d      	mov	r5, sp
 800970c:	2268      	movs	r2, #104	; 0x68
 800970e:	1d39      	adds	r1, r7, #4
 8009710:	4628      	mov	r0, r5
 8009712:	f000 fbe7 	bl	8009ee4 <memcpy>
 8009716:	4622      	mov	r2, r4
 8009718:	4631      	mov	r1, r6
 800971a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800971e:	442c      	add	r4, r5
 8009720:	f000 fbe0 	bl	8009ee4 <memcpy>
 8009724:	2300      	movs	r3, #0
 8009726:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800972a:	4628      	mov	r0, r5
 800972c:	f7ff ffb3 	bl	8009696 <_ZSt19__throw_logic_errorPKc>
 8009730:	0800b1c4 	.word	0x0800b1c4

08009734 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	af00      	add	r7, sp, #0
 800973a:	b084      	sub	sp, #16
 800973c:	466d      	mov	r5, sp
 800973e:	f105 040c 	add.w	r4, r5, #12
 8009742:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8009788 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8009746:	4623      	mov	r3, r4
 8009748:	f04f 0c0a 	mov.w	ip, #10
 800974c:	fbb2 f6fc 	udiv	r6, r2, ip
 8009750:	fb0c 2e16 	mls	lr, ip, r6, r2
 8009754:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8009758:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800975c:	4696      	mov	lr, r2
 800975e:	f1be 0f09 	cmp.w	lr, #9
 8009762:	4632      	mov	r2, r6
 8009764:	d8f2      	bhi.n	800974c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8009766:	1ae4      	subs	r4, r4, r3
 8009768:	428c      	cmp	r4, r1
 800976a:	d809      	bhi.n	8009780 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800976c:	f1c4 030c 	rsb	r3, r4, #12
 8009770:	4622      	mov	r2, r4
 8009772:	18e9      	adds	r1, r5, r3
 8009774:	f000 fbb6 	bl	8009ee4 <memcpy>
 8009778:	4620      	mov	r0, r4
 800977a:	46bd      	mov	sp, r7
 800977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009780:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009784:	e7f8      	b.n	8009778 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8009786:	bf00      	nop
 8009788:	0800b22d 	.word	0x0800b22d

0800978c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800978c:	3901      	subs	r1, #1
 800978e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	4607      	mov	r7, r0
 8009794:	4615      	mov	r5, r2
 8009796:	eb00 0801 	add.w	r8, r0, r1
 800979a:	4604      	mov	r4, r0
 800979c:	782a      	ldrb	r2, [r5, #0]
 800979e:	b392      	cbz	r2, 8009806 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80097a0:	4544      	cmp	r4, r8
 80097a2:	d22a      	bcs.n	80097fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80097a4:	2a25      	cmp	r2, #37	; 0x25
 80097a6:	d107      	bne.n	80097b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80097a8:	786a      	ldrb	r2, [r5, #1]
 80097aa:	2a73      	cmp	r2, #115	; 0x73
 80097ac:	d009      	beq.n	80097c2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80097ae:	2a7a      	cmp	r2, #122	; 0x7a
 80097b0:	d012      	beq.n	80097d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80097b2:	2a25      	cmp	r2, #37	; 0x25
 80097b4:	d100      	bne.n	80097b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80097b6:	3501      	adds	r5, #1
 80097b8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80097bc:	f804 2b01 	strb.w	r2, [r4], #1
 80097c0:	e7ec      	b.n	800979c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80097c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c6:	3a01      	subs	r2, #1
 80097c8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80097cc:	b1c9      	cbz	r1, 8009802 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80097ce:	4544      	cmp	r4, r8
 80097d0:	d013      	beq.n	80097fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80097d2:	f804 1b01 	strb.w	r1, [r4], #1
 80097d6:	e7f7      	b.n	80097c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80097d8:	78aa      	ldrb	r2, [r5, #2]
 80097da:	2a75      	cmp	r2, #117	; 0x75
 80097dc:	d1ec      	bne.n	80097b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80097de:	461e      	mov	r6, r3
 80097e0:	eba8 0104 	sub.w	r1, r8, r4
 80097e4:	f856 2b04 	ldr.w	r2, [r6], #4
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff ffa3 	bl	8009734 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	dd03      	ble.n	80097fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80097f2:	4404      	add	r4, r0
 80097f4:	3503      	adds	r5, #3
 80097f6:	4633      	mov	r3, r6
 80097f8:	e7d0      	b.n	800979c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4638      	mov	r0, r7
 80097fe:	f7ff ff73 	bl	80096e8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8009802:	3502      	adds	r5, #2
 8009804:	e7ca      	b.n	800979c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8009806:	7022      	strb	r2, [r4, #0]
 8009808:	1be0      	subs	r0, r4, r7
 800980a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800980e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800980e:	b10a      	cbz	r2, 8009814 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009810:	f000 bb68 	b.w	8009ee4 <memcpy>
 8009814:	4770      	bx	lr

08009816 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8009816:	b10a      	cbz	r2, 800981c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8009818:	f000 bb54 	b.w	8009ec4 <memcmp>
 800981c:	4610      	mov	r0, r2
 800981e:	4770      	bx	lr

08009820 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8009820:	4613      	mov	r3, r2
 8009822:	460a      	mov	r2, r1
 8009824:	b111      	cbz	r1, 800982c <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8009826:	7819      	ldrb	r1, [r3, #0]
 8009828:	f7f6 bcda 	b.w	80001e0 <memchr>
 800982c:	4608      	mov	r0, r1
 800982e:	4770      	bx	lr

08009830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009830:	b508      	push	{r3, lr}
 8009832:	680b      	ldr	r3, [r1, #0]
 8009834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009838:	d302      	bcc.n	8009840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800983a:	480d      	ldr	r0, [pc, #52]	; (8009870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800983c:	f7ff ff31 	bl	80096a2 <_ZSt20__throw_length_errorPKc>
 8009840:	4293      	cmp	r3, r2
 8009842:	d90b      	bls.n	800985c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009844:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009848:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800984c:	d206      	bcs.n	800985c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800984e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009852:	bf2a      	itet	cs
 8009854:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009858:	6008      	strcc	r0, [r1, #0]
 800985a:	600b      	strcs	r3, [r1, #0]
 800985c:	6808      	ldr	r0, [r1, #0]
 800985e:	3001      	adds	r0, #1
 8009860:	d501      	bpl.n	8009866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8009862:	f7ff ff15 	bl	8009690 <_ZSt17__throw_bad_allocv>
 8009866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800986a:	f000 b9d5 	b.w	8009c18 <_Znwj>
 800986e:	bf00      	nop
 8009870:	0800b238 	.word	0x0800b238

08009874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009874:	f850 3b08 	ldr.w	r3, [r0], #8
 8009878:	4283      	cmp	r3, r0
 800987a:	d002      	beq.n	8009882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800987c:	4618      	mov	r0, r3
 800987e:	f000 b9c9 	b.w	8009c14 <_ZdlPv>
 8009882:	4770      	bx	lr

08009884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8009884:	b508      	push	{r3, lr}
 8009886:	4603      	mov	r3, r0
 8009888:	4608      	mov	r0, r1
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	4298      	cmp	r0, r3
 800988e:	4611      	mov	r1, r2
 8009890:	d903      	bls.n	800989a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8009892:	4602      	mov	r2, r0
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8009896:	f7ff ff0a 	bl	80096ae <_ZSt24__throw_out_of_range_fmtPKcz>
 800989a:	bd08      	pop	{r3, pc}
 800989c:	0800b250 	.word	0x0800b250

080098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80098a0:	2a01      	cmp	r2, #1
 80098a2:	b410      	push	{r4}
 80098a4:	d104      	bne.n	80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80098a6:	780a      	ldrb	r2, [r1, #0]
 80098a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ac:	7002      	strb	r2, [r0, #0]
 80098ae:	4770      	bx	lr
 80098b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b4:	f7ff bfab 	b.w	800980e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080098b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80098b8:	2a01      	cmp	r2, #1
 80098ba:	b430      	push	{r4, r5}
 80098bc:	d103      	bne.n	80098c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80098be:	780b      	ldrb	r3, [r1, #0]
 80098c0:	7003      	strb	r3, [r0, #0]
 80098c2:	bc30      	pop	{r4, r5}
 80098c4:	4770      	bx	lr
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	d0fb      	beq.n	80098c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80098ca:	bc30      	pop	{r4, r5}
 80098cc:	f000 bb18 	b.w	8009f00 <memmove>

080098d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80098d0:	b508      	push	{r3, lr}
 80098d2:	1a52      	subs	r2, r2, r1
 80098d4:	f7ff ffe4 	bl	80098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098d8:	bd08      	pop	{r3, pc}

080098da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80098da:	b508      	push	{r3, lr}
 80098dc:	1a52      	subs	r2, r2, r1
 80098de:	f7ff ffdf 	bl	80098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80098e2:	bd08      	pop	{r3, pc}

080098e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80098e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80098ea:	461f      	mov	r7, r3
 80098ec:	6843      	ldr	r3, [r0, #4]
 80098ee:	eb01 0802 	add.w	r8, r1, r2
 80098f2:	1ab2      	subs	r2, r6, r2
 80098f4:	441a      	add	r2, r3
 80098f6:	eba3 0908 	sub.w	r9, r3, r8
 80098fa:	4603      	mov	r3, r0
 80098fc:	9201      	str	r2, [sp, #4]
 80098fe:	f853 2b08 	ldr.w	r2, [r3], #8
 8009902:	429a      	cmp	r2, r3
 8009904:	bf18      	it	ne
 8009906:	6882      	ldrne	r2, [r0, #8]
 8009908:	460d      	mov	r5, r1
 800990a:	bf08      	it	eq
 800990c:	220f      	moveq	r2, #15
 800990e:	a901      	add	r1, sp, #4
 8009910:	4604      	mov	r4, r0
 8009912:	f7ff ff8d 	bl	8009830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009916:	4682      	mov	sl, r0
 8009918:	b11d      	cbz	r5, 8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800991a:	6821      	ldr	r1, [r4, #0]
 800991c:	462a      	mov	r2, r5
 800991e:	f7ff ffbf 	bl	80098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009922:	b137      	cbz	r7, 8009932 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009924:	b12e      	cbz	r6, 8009932 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009926:	4632      	mov	r2, r6
 8009928:	4639      	mov	r1, r7
 800992a:	eb0a 0005 	add.w	r0, sl, r5
 800992e:	f7ff ffb7 	bl	80098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	d007      	beq.n	8009948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8009938:	6821      	ldr	r1, [r4, #0]
 800993a:	4435      	add	r5, r6
 800993c:	464a      	mov	r2, r9
 800993e:	4441      	add	r1, r8
 8009940:	eb0a 0005 	add.w	r0, sl, r5
 8009944:	f7ff ffac 	bl	80098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009948:	4620      	mov	r0, r4
 800994a:	f7ff ff93 	bl	8009874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	f8c4 a000 	str.w	sl, [r4]
 8009954:	60a3      	str	r3, [r4, #8]
 8009956:	b002      	add	sp, #8
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800995c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4604      	mov	r4, r0
 8009960:	4615      	mov	r5, r2
 8009962:	4608      	mov	r0, r1
 8009964:	4411      	add	r1, r2
 8009966:	6862      	ldr	r2, [r4, #4]
 8009968:	1a52      	subs	r2, r2, r1
 800996a:	d005      	beq.n	8009978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 800996c:	b125      	cbz	r5, 8009978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	4419      	add	r1, r3
 8009972:	4418      	add	r0, r3
 8009974:	f7ff ffa0 	bl	80098b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009978:	6862      	ldr	r2, [r4, #4]
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	1b55      	subs	r5, r2, r5
 800997e:	2200      	movs	r2, #0
 8009980:	6065      	str	r5, [r4, #4]
 8009982:	555a      	strb	r2, [r3, r5]
 8009984:	bd38      	pop	{r3, r4, r5, pc}

08009986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009986:	b510      	push	{r4, lr}
 8009988:	4604      	mov	r4, r0
 800998a:	f7ff ff73 	bl	8009874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800998e:	4620      	mov	r0, r4
 8009990:	bd10      	pop	{r4, pc}

08009992 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8009992:	6840      	ldr	r0, [r0, #4]
 8009994:	4770      	bx	lr

08009996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8009996:	6802      	ldr	r2, [r0, #0]
 8009998:	2300      	movs	r3, #0
 800999a:	6043      	str	r3, [r0, #4]
 800999c:	7013      	strb	r3, [r2, #0]
 800999e:	4770      	bx	lr

080099a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80099a0:	6840      	ldr	r0, [r0, #4]
 80099a2:	fab0 f080 	clz	r0, r0
 80099a6:	0940      	lsrs	r0, r0, #5
 80099a8:	4770      	bx	lr

080099aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	4408      	add	r0, r1
 80099ae:	4770      	bx	lr

080099b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80099b0:	4603      	mov	r3, r0
 80099b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099b4:	f853 2b08 	ldr.w	r2, [r3], #8
 80099b8:	6846      	ldr	r6, [r0, #4]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	bf18      	it	ne
 80099be:	6883      	ldrne	r3, [r0, #8]
 80099c0:	f106 0501 	add.w	r5, r6, #1
 80099c4:	bf08      	it	eq
 80099c6:	230f      	moveq	r3, #15
 80099c8:	429d      	cmp	r5, r3
 80099ca:	4604      	mov	r4, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	d906      	bls.n	80099de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80099d0:	2301      	movs	r3, #1
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	461a      	mov	r2, r3
 80099d8:	4631      	mov	r1, r6
 80099da:	f7ff ff83 	bl	80098e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	559f      	strb	r7, [r3, r6]
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	6065      	str	r5, [r4, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	555a      	strb	r2, [r3, r5]
 80099ea:	b003      	add	sp, #12
 80099ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 80099ee:	b510      	push	{r4, lr}
 80099f0:	4604      	mov	r4, r0
 80099f2:	f7ff ffdd 	bl	80099b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80099f6:	4620      	mov	r0, r4
 80099f8:	bd10      	pop	{r4, pc}
	...

080099fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	4616      	mov	r6, r2
 8009a00:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 8009a02:	4604      	mov	r4, r0
 8009a04:	460d      	mov	r5, r1
 8009a06:	f7ff ff3d 	bl	8009884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009a0a:	1c73      	adds	r3, r6, #1
 8009a0c:	d105      	bne.n	8009a1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	6065      	str	r5, [r4, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	555a      	strb	r2, [r3, r5]
 8009a16:	4620      	mov	r0, r4
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	2e00      	cmp	r6, #0
 8009a1c:	d0fb      	beq.n	8009a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8009a1e:	6862      	ldr	r2, [r4, #4]
 8009a20:	1b52      	subs	r2, r2, r5
 8009a22:	42b2      	cmp	r2, r6
 8009a24:	bf28      	it	cs
 8009a26:	4632      	movcs	r2, r6
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff ff96 	bl	800995c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8009a30:	e7f1      	b.n	8009a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 8009a32:	bf00      	nop
 8009a34:	0800b287 	.word	0x0800b287

08009a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 8009a38:	b508      	push	{r3, lr}
 8009a3a:	6841      	ldr	r1, [r0, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	3901      	subs	r1, #1
 8009a40:	f7ff ff8c 	bl	800995c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8009a44:	bd08      	pop	{r3, pc}

08009a46 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009a46:	6800      	ldr	r0, [r0, #0]
 8009a48:	4770      	bx	lr

08009a4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 8009a4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a4e:	460e      	mov	r6, r1
 8009a50:	461d      	mov	r5, r3
 8009a52:	6841      	ldr	r1, [r0, #4]
 8009a54:	b923      	cbnz	r3, 8009a60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
 8009a56:	4291      	cmp	r1, r2
 8009a58:	d221      	bcs.n	8009a9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 8009a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a5e:	e01e      	b.n	8009a9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 8009a60:	4291      	cmp	r1, r2
 8009a62:	d9fa      	bls.n	8009a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009a64:	f8d0 8000 	ldr.w	r8, [r0]
 8009a68:	7833      	ldrb	r3, [r6, #0]
 8009a6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8009a6e:	eb08 0701 	add.w	r7, r8, r1
 8009a72:	eb08 0002 	add.w	r0, r8, r2
 8009a76:	1a89      	subs	r1, r1, r2
 8009a78:	f1c5 0901 	rsb	r9, r5, #1
 8009a7c:	42a9      	cmp	r1, r5
 8009a7e:	d3ec      	bcc.n	8009a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009a80:	f10d 0207 	add.w	r2, sp, #7
 8009a84:	4449      	add	r1, r9
 8009a86:	f7ff fecb 	bl	8009820 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d0e4      	beq.n	8009a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8009a90:	462a      	mov	r2, r5
 8009a92:	4631      	mov	r1, r6
 8009a94:	f7ff febf 	bl	8009816 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8009a98:	b928      	cbnz	r0, 8009aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
 8009a9a:	eba4 0208 	sub.w	r2, r4, r8
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	b003      	add	sp, #12
 8009aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aa6:	1c60      	adds	r0, r4, #1
 8009aa8:	1a39      	subs	r1, r7, r0
 8009aaa:	e7e7      	b.n	8009a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

08009aac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
 8009aac:	b513      	push	{r0, r1, r4, lr}
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	9201      	str	r2, [sp, #4]
 8009ab4:	9100      	str	r1, [sp, #0]
 8009ab6:	f7f6 fbe3 	bl	8000280 <strlen>
 8009aba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f7ff ffc2 	bl	8009a4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 8009ac6:	b002      	add	sp, #8
 8009ac8:	bd10      	pop	{r4, pc}
	...

08009acc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8009acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	b919      	cbnz	r1, 8009ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009ad6:	b112      	cbz	r2, 8009ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009ad8:	480d      	ldr	r0, [pc, #52]	; (8009b10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8009ada:	f7ff fddc 	bl	8009696 <_ZSt19__throw_logic_errorPKc>
 8009ade:	1b73      	subs	r3, r6, r5
 8009ae0:	2b0f      	cmp	r3, #15
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	d907      	bls.n	8009af6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	a901      	add	r1, sp, #4
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7ff fea0 	bl	8009830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	6020      	str	r0, [r4, #0]
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	4632      	mov	r2, r6
 8009af8:	4629      	mov	r1, r5
 8009afa:	6820      	ldr	r0, [r4, #0]
 8009afc:	f7ff fee8 	bl	80098d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8009b00:	9b01      	ldr	r3, [sp, #4]
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	2100      	movs	r1, #0
 8009b08:	54d1      	strb	r1, [r2, r3]
 8009b0a:	b002      	add	sp, #8
 8009b0c:	bd70      	pop	{r4, r5, r6, pc}
 8009b0e:	bf00      	nop
 8009b10:	0800b29b 	.word	0x0800b29b

08009b14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	f100 0308 	add.w	r3, r0, #8
 8009b1a:	6003      	str	r3, [r0, #0]
 8009b1c:	e9d1 5200 	ldrd	r5, r2, [r1]
 8009b20:	4604      	mov	r4, r0
 8009b22:	f04f 0300 	mov.w	r3, #0
 8009b26:	442a      	add	r2, r5
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f7ff ffcf 	bl	8009acc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	bd38      	pop	{r3, r4, r5, pc}
	...

08009b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b36:	4604      	mov	r4, r0
 8009b38:	4616      	mov	r6, r2
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	b919      	cbnz	r1, 8009b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009b3e:	b112      	cbz	r2, 8009b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009b40:	480d      	ldr	r0, [pc, #52]	; (8009b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009b42:	f7ff fda8 	bl	8009696 <_ZSt19__throw_logic_errorPKc>
 8009b46:	1b73      	subs	r3, r6, r5
 8009b48:	2b0f      	cmp	r3, #15
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	d907      	bls.n	8009b5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	a901      	add	r1, sp, #4
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff fe6c 	bl	8009830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	6020      	str	r0, [r4, #0]
 8009b5c:	60a3      	str	r3, [r4, #8]
 8009b5e:	4632      	mov	r2, r6
 8009b60:	4629      	mov	r1, r5
 8009b62:	6820      	ldr	r0, [r4, #0]
 8009b64:	f7ff feb9 	bl	80098da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009b68:	9b01      	ldr	r3, [sp, #4]
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	2100      	movs	r1, #0
 8009b70:	54d1      	strb	r1, [r2, r3]
 8009b72:	b002      	add	sp, #8
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	bf00      	nop
 8009b78:	0800b29b 	.word	0x0800b29b

08009b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	f100 0308 	add.w	r3, r0, #8
 8009b82:	4604      	mov	r4, r0
 8009b84:	6003      	str	r3, [r0, #0]
 8009b86:	460d      	mov	r5, r1
 8009b88:	b159      	cbz	r1, 8009ba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	f7f6 fb78 	bl	8000280 <strlen>
 8009b90:	182a      	adds	r2, r5, r0
 8009b92:	4620      	mov	r0, r4
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f7ff ffcb 	bl	8009b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	bd38      	pop	{r3, r4, r5, pc}
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	e7f5      	b.n	8009b92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08009ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8009ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bac:	460d      	mov	r5, r1
 8009bae:	4617      	mov	r7, r2
 8009bb0:	4698      	mov	r8, r3
 8009bb2:	f100 0308 	add.w	r3, r0, #8
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4a0a      	ldr	r2, [pc, #40]	; (8009be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f7ff fe60 	bl	8009884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009bc4:	686a      	ldr	r2, [r5, #4]
 8009bc6:	682e      	ldr	r6, [r5, #0]
 8009bc8:	1bd7      	subs	r7, r2, r7
 8009bca:	1831      	adds	r1, r6, r0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	4547      	cmp	r7, r8
 8009bd4:	bf94      	ite	ls
 8009bd6:	19ca      	addls	r2, r1, r7
 8009bd8:	eb01 0208 	addhi.w	r2, r1, r8
 8009bdc:	f7ff ffaa 	bl	8009b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8009be0:	4620      	mov	r0, r4
 8009be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be6:	bf00      	nop
 8009be8:	0800b2c5 	.word	0x0800b2c5

08009bec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8009bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	4a06      	ldr	r2, [pc, #24]	; (8009c10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	f7ff fe43 	bl	8009884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	4602      	mov	r2, r0
 8009c02:	4629      	mov	r1, r5
 8009c04:	4620      	mov	r0, r4
 8009c06:	f7ff ffcf 	bl	8009ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	b003      	add	sp, #12
 8009c0e:	bd30      	pop	{r4, r5, pc}
 8009c10:	0800b2e0 	.word	0x0800b2e0

08009c14 <_ZdlPv>:
 8009c14:	f000 b94e 	b.w	8009eb4 <free>

08009c18 <_Znwj>:
 8009c18:	2801      	cmp	r0, #1
 8009c1a:	bf38      	it	cc
 8009c1c:	2001      	movcc	r0, #1
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	4604      	mov	r4, r0
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 f93e 	bl	8009ea4 <malloc>
 8009c28:	b930      	cbnz	r0, 8009c38 <_Znwj+0x20>
 8009c2a:	f000 f807 	bl	8009c3c <_ZSt15get_new_handlerv>
 8009c2e:	b908      	cbnz	r0, 8009c34 <_Znwj+0x1c>
 8009c30:	f000 f80c 	bl	8009c4c <abort>
 8009c34:	4780      	blx	r0
 8009c36:	e7f4      	b.n	8009c22 <_Znwj+0xa>
 8009c38:	bd10      	pop	{r4, pc}
	...

08009c3c <_ZSt15get_new_handlerv>:
 8009c3c:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <_ZSt15get_new_handlerv+0xc>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	f3bf 8f5b 	dmb	ish
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20004324 	.word	0x20004324

08009c4c <abort>:
 8009c4c:	b508      	push	{r3, lr}
 8009c4e:	2006      	movs	r0, #6
 8009c50:	f000 fb88 	bl	800a364 <raise>
 8009c54:	2001      	movs	r0, #1
 8009c56:	f7f7 ff03 	bl	8001a60 <_exit>
	...

08009c5c <__errno>:
 8009c5c:	4b01      	ldr	r3, [pc, #4]	; (8009c64 <__errno+0x8>)
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000010 	.word	0x20000010

08009c68 <std>:
 8009c68:	2300      	movs	r3, #0
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c76:	6083      	str	r3, [r0, #8]
 8009c78:	8181      	strh	r1, [r0, #12]
 8009c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c7c:	81c2      	strh	r2, [r0, #14]
 8009c7e:	6183      	str	r3, [r0, #24]
 8009c80:	4619      	mov	r1, r3
 8009c82:	2208      	movs	r2, #8
 8009c84:	305c      	adds	r0, #92	; 0x5c
 8009c86:	f000 f955 	bl	8009f34 <memset>
 8009c8a:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <std+0x38>)
 8009c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c8e:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <std+0x3c>)
 8009c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c92:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <std+0x40>)
 8009c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c96:	4b05      	ldr	r3, [pc, #20]	; (8009cac <std+0x44>)
 8009c98:	6224      	str	r4, [r4, #32]
 8009c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800a39d 	.word	0x0800a39d
 8009ca4:	0800a3bf 	.word	0x0800a3bf
 8009ca8:	0800a3f7 	.word	0x0800a3f7
 8009cac:	0800a41b 	.word	0x0800a41b

08009cb0 <_cleanup_r>:
 8009cb0:	4901      	ldr	r1, [pc, #4]	; (8009cb8 <_cleanup_r+0x8>)
 8009cb2:	f000 b8af 	b.w	8009e14 <_fwalk_reent>
 8009cb6:	bf00      	nop
 8009cb8:	0800a80d 	.word	0x0800a80d

08009cbc <__sfmoreglue>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	2268      	movs	r2, #104	; 0x68
 8009cc0:	1e4d      	subs	r5, r1, #1
 8009cc2:	4355      	muls	r5, r2
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cca:	f000 f9a7 	bl	800a01c <_malloc_r>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	b140      	cbz	r0, 8009ce4 <__sfmoreglue+0x28>
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009cd8:	300c      	adds	r0, #12
 8009cda:	60a0      	str	r0, [r4, #8]
 8009cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ce0:	f000 f928 	bl	8009f34 <memset>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}

08009ce8 <__sfp_lock_acquire>:
 8009ce8:	4801      	ldr	r0, [pc, #4]	; (8009cf0 <__sfp_lock_acquire+0x8>)
 8009cea:	f000 b8d8 	b.w	8009e9e <__retarget_lock_acquire_recursive>
 8009cee:	bf00      	nop
 8009cf0:	20004329 	.word	0x20004329

08009cf4 <__sfp_lock_release>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__sfp_lock_release+0x8>)
 8009cf6:	f000 b8d3 	b.w	8009ea0 <__retarget_lock_release_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	20004329 	.word	0x20004329

08009d00 <__sinit_lock_acquire>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__sinit_lock_acquire+0x8>)
 8009d02:	f000 b8cc 	b.w	8009e9e <__retarget_lock_acquire_recursive>
 8009d06:	bf00      	nop
 8009d08:	2000432a 	.word	0x2000432a

08009d0c <__sinit_lock_release>:
 8009d0c:	4801      	ldr	r0, [pc, #4]	; (8009d14 <__sinit_lock_release+0x8>)
 8009d0e:	f000 b8c7 	b.w	8009ea0 <__retarget_lock_release_recursive>
 8009d12:	bf00      	nop
 8009d14:	2000432a 	.word	0x2000432a

08009d18 <__sinit>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	f7ff fff0 	bl	8009d00 <__sinit_lock_acquire>
 8009d20:	69a3      	ldr	r3, [r4, #24]
 8009d22:	b11b      	cbz	r3, 8009d2c <__sinit+0x14>
 8009d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d28:	f7ff bff0 	b.w	8009d0c <__sinit_lock_release>
 8009d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d30:	6523      	str	r3, [r4, #80]	; 0x50
 8009d32:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <__sinit+0x68>)
 8009d34:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <__sinit+0x6c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	bf04      	itt	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	61a3      	streq	r3, [r4, #24]
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 f820 	bl	8009d88 <__sfp>
 8009d48:	6060      	str	r0, [r4, #4]
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f000 f81c 	bl	8009d88 <__sfp>
 8009d50:	60a0      	str	r0, [r4, #8]
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 f818 	bl	8009d88 <__sfp>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	60e0      	str	r0, [r4, #12]
 8009d5c:	2104      	movs	r1, #4
 8009d5e:	6860      	ldr	r0, [r4, #4]
 8009d60:	f7ff ff82 	bl	8009c68 <std>
 8009d64:	68a0      	ldr	r0, [r4, #8]
 8009d66:	2201      	movs	r2, #1
 8009d68:	2109      	movs	r1, #9
 8009d6a:	f7ff ff7d 	bl	8009c68 <std>
 8009d6e:	68e0      	ldr	r0, [r4, #12]
 8009d70:	2202      	movs	r2, #2
 8009d72:	2112      	movs	r1, #18
 8009d74:	f7ff ff78 	bl	8009c68 <std>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	61a3      	str	r3, [r4, #24]
 8009d7c:	e7d2      	b.n	8009d24 <__sinit+0xc>
 8009d7e:	bf00      	nop
 8009d80:	0800b358 	.word	0x0800b358
 8009d84:	08009cb1 	.word	0x08009cb1

08009d88 <__sfp>:
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	f7ff ffac 	bl	8009ce8 <__sfp_lock_acquire>
 8009d90:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <__sfp+0x84>)
 8009d92:	681e      	ldr	r6, [r3, #0]
 8009d94:	69b3      	ldr	r3, [r6, #24]
 8009d96:	b913      	cbnz	r3, 8009d9e <__sfp+0x16>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff ffbd 	bl	8009d18 <__sinit>
 8009d9e:	3648      	adds	r6, #72	; 0x48
 8009da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	d503      	bpl.n	8009db0 <__sfp+0x28>
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	b30b      	cbz	r3, 8009df0 <__sfp+0x68>
 8009dac:	6836      	ldr	r6, [r6, #0]
 8009dae:	e7f7      	b.n	8009da0 <__sfp+0x18>
 8009db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009db4:	b9d5      	cbnz	r5, 8009dec <__sfp+0x64>
 8009db6:	4b16      	ldr	r3, [pc, #88]	; (8009e10 <__sfp+0x88>)
 8009db8:	60e3      	str	r3, [r4, #12]
 8009dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8009dc0:	f000 f86c 	bl	8009e9c <__retarget_lock_init_recursive>
 8009dc4:	f7ff ff96 	bl	8009cf4 <__sfp_lock_release>
 8009dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009dd0:	6025      	str	r5, [r4, #0]
 8009dd2:	61a5      	str	r5, [r4, #24]
 8009dd4:	2208      	movs	r2, #8
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ddc:	f000 f8aa 	bl	8009f34 <memset>
 8009de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009de8:	4620      	mov	r0, r4
 8009dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dec:	3468      	adds	r4, #104	; 0x68
 8009dee:	e7d9      	b.n	8009da4 <__sfp+0x1c>
 8009df0:	2104      	movs	r1, #4
 8009df2:	4638      	mov	r0, r7
 8009df4:	f7ff ff62 	bl	8009cbc <__sfmoreglue>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	6030      	str	r0, [r6, #0]
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d1d5      	bne.n	8009dac <__sfp+0x24>
 8009e00:	f7ff ff78 	bl	8009cf4 <__sfp_lock_release>
 8009e04:	230c      	movs	r3, #12
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	e7ee      	b.n	8009de8 <__sfp+0x60>
 8009e0a:	bf00      	nop
 8009e0c:	0800b358 	.word	0x0800b358
 8009e10:	ffff0001 	.word	0xffff0001

08009e14 <_fwalk_reent>:
 8009e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	4606      	mov	r6, r0
 8009e1a:	4688      	mov	r8, r1
 8009e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e20:	2700      	movs	r7, #0
 8009e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e26:	f1b9 0901 	subs.w	r9, r9, #1
 8009e2a:	d505      	bpl.n	8009e38 <_fwalk_reent+0x24>
 8009e2c:	6824      	ldr	r4, [r4, #0]
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d1f7      	bne.n	8009e22 <_fwalk_reent+0xe>
 8009e32:	4638      	mov	r0, r7
 8009e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e38:	89ab      	ldrh	r3, [r5, #12]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d907      	bls.n	8009e4e <_fwalk_reent+0x3a>
 8009e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e42:	3301      	adds	r3, #1
 8009e44:	d003      	beq.n	8009e4e <_fwalk_reent+0x3a>
 8009e46:	4629      	mov	r1, r5
 8009e48:	4630      	mov	r0, r6
 8009e4a:	47c0      	blx	r8
 8009e4c:	4307      	orrs	r7, r0
 8009e4e:	3568      	adds	r5, #104	; 0x68
 8009e50:	e7e9      	b.n	8009e26 <_fwalk_reent+0x12>
	...

08009e54 <__libc_init_array>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4d0d      	ldr	r5, [pc, #52]	; (8009e8c <__libc_init_array+0x38>)
 8009e58:	4c0d      	ldr	r4, [pc, #52]	; (8009e90 <__libc_init_array+0x3c>)
 8009e5a:	1b64      	subs	r4, r4, r5
 8009e5c:	10a4      	asrs	r4, r4, #2
 8009e5e:	2600      	movs	r6, #0
 8009e60:	42a6      	cmp	r6, r4
 8009e62:	d109      	bne.n	8009e78 <__libc_init_array+0x24>
 8009e64:	4d0b      	ldr	r5, [pc, #44]	; (8009e94 <__libc_init_array+0x40>)
 8009e66:	4c0c      	ldr	r4, [pc, #48]	; (8009e98 <__libc_init_array+0x44>)
 8009e68:	f001 f8b2 	bl	800afd0 <_init>
 8009e6c:	1b64      	subs	r4, r4, r5
 8009e6e:	10a4      	asrs	r4, r4, #2
 8009e70:	2600      	movs	r6, #0
 8009e72:	42a6      	cmp	r6, r4
 8009e74:	d105      	bne.n	8009e82 <__libc_init_array+0x2e>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7c:	4798      	blx	r3
 8009e7e:	3601      	adds	r6, #1
 8009e80:	e7ee      	b.n	8009e60 <__libc_init_array+0xc>
 8009e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e86:	4798      	blx	r3
 8009e88:	3601      	adds	r6, #1
 8009e8a:	e7f2      	b.n	8009e72 <__libc_init_array+0x1e>
 8009e8c:	0800b498 	.word	0x0800b498
 8009e90:	0800b498 	.word	0x0800b498
 8009e94:	0800b498 	.word	0x0800b498
 8009e98:	0800b4a0 	.word	0x0800b4a0

08009e9c <__retarget_lock_init_recursive>:
 8009e9c:	4770      	bx	lr

08009e9e <__retarget_lock_acquire_recursive>:
 8009e9e:	4770      	bx	lr

08009ea0 <__retarget_lock_release_recursive>:
 8009ea0:	4770      	bx	lr
	...

08009ea4 <malloc>:
 8009ea4:	4b02      	ldr	r3, [pc, #8]	; (8009eb0 <malloc+0xc>)
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	f000 b8b7 	b.w	800a01c <_malloc_r>
 8009eae:	bf00      	nop
 8009eb0:	20000010 	.word	0x20000010

08009eb4 <free>:
 8009eb4:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <free+0xc>)
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f000 b843 	b.w	8009f44 <_free_r>
 8009ebe:	bf00      	nop
 8009ec0:	20000010 	.word	0x20000010

08009ec4 <memcmp>:
 8009ec4:	b510      	push	{r4, lr}
 8009ec6:	3901      	subs	r1, #1
 8009ec8:	4402      	add	r2, r0
 8009eca:	4290      	cmp	r0, r2
 8009ecc:	d101      	bne.n	8009ed2 <memcmp+0xe>
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e005      	b.n	8009ede <memcmp+0x1a>
 8009ed2:	7803      	ldrb	r3, [r0, #0]
 8009ed4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	d001      	beq.n	8009ee0 <memcmp+0x1c>
 8009edc:	1b18      	subs	r0, r3, r4
 8009ede:	bd10      	pop	{r4, pc}
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	e7f2      	b.n	8009eca <memcmp+0x6>

08009ee4 <memcpy>:
 8009ee4:	440a      	add	r2, r1
 8009ee6:	4291      	cmp	r1, r2
 8009ee8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009eec:	d100      	bne.n	8009ef0 <memcpy+0xc>
 8009eee:	4770      	bx	lr
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009efa:	4291      	cmp	r1, r2
 8009efc:	d1f9      	bne.n	8009ef2 <memcpy+0xe>
 8009efe:	bd10      	pop	{r4, pc}

08009f00 <memmove>:
 8009f00:	4288      	cmp	r0, r1
 8009f02:	b510      	push	{r4, lr}
 8009f04:	eb01 0402 	add.w	r4, r1, r2
 8009f08:	d902      	bls.n	8009f10 <memmove+0x10>
 8009f0a:	4284      	cmp	r4, r0
 8009f0c:	4623      	mov	r3, r4
 8009f0e:	d807      	bhi.n	8009f20 <memmove+0x20>
 8009f10:	1e43      	subs	r3, r0, #1
 8009f12:	42a1      	cmp	r1, r4
 8009f14:	d008      	beq.n	8009f28 <memmove+0x28>
 8009f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f1e:	e7f8      	b.n	8009f12 <memmove+0x12>
 8009f20:	4402      	add	r2, r0
 8009f22:	4601      	mov	r1, r0
 8009f24:	428a      	cmp	r2, r1
 8009f26:	d100      	bne.n	8009f2a <memmove+0x2a>
 8009f28:	bd10      	pop	{r4, pc}
 8009f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f32:	e7f7      	b.n	8009f24 <memmove+0x24>

08009f34 <memset>:
 8009f34:	4402      	add	r2, r0
 8009f36:	4603      	mov	r3, r0
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d100      	bne.n	8009f3e <memset+0xa>
 8009f3c:	4770      	bx	lr
 8009f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f42:	e7f9      	b.n	8009f38 <memset+0x4>

08009f44 <_free_r>:
 8009f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f46:	2900      	cmp	r1, #0
 8009f48:	d044      	beq.n	8009fd4 <_free_r+0x90>
 8009f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4e:	9001      	str	r0, [sp, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f1a1 0404 	sub.w	r4, r1, #4
 8009f56:	bfb8      	it	lt
 8009f58:	18e4      	addlt	r4, r4, r3
 8009f5a:	f000 fd0b 	bl	800a974 <__malloc_lock>
 8009f5e:	4a1e      	ldr	r2, [pc, #120]	; (8009fd8 <_free_r+0x94>)
 8009f60:	9801      	ldr	r0, [sp, #4]
 8009f62:	6813      	ldr	r3, [r2, #0]
 8009f64:	b933      	cbnz	r3, 8009f74 <_free_r+0x30>
 8009f66:	6063      	str	r3, [r4, #4]
 8009f68:	6014      	str	r4, [r2, #0]
 8009f6a:	b003      	add	sp, #12
 8009f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f70:	f000 bd06 	b.w	800a980 <__malloc_unlock>
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d908      	bls.n	8009f8a <_free_r+0x46>
 8009f78:	6825      	ldr	r5, [r4, #0]
 8009f7a:	1961      	adds	r1, r4, r5
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	bf01      	itttt	eq
 8009f80:	6819      	ldreq	r1, [r3, #0]
 8009f82:	685b      	ldreq	r3, [r3, #4]
 8009f84:	1949      	addeq	r1, r1, r5
 8009f86:	6021      	streq	r1, [r4, #0]
 8009f88:	e7ed      	b.n	8009f66 <_free_r+0x22>
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	b10b      	cbz	r3, 8009f94 <_free_r+0x50>
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d9fa      	bls.n	8009f8a <_free_r+0x46>
 8009f94:	6811      	ldr	r1, [r2, #0]
 8009f96:	1855      	adds	r5, r2, r1
 8009f98:	42a5      	cmp	r5, r4
 8009f9a:	d10b      	bne.n	8009fb4 <_free_r+0x70>
 8009f9c:	6824      	ldr	r4, [r4, #0]
 8009f9e:	4421      	add	r1, r4
 8009fa0:	1854      	adds	r4, r2, r1
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	d1e0      	bne.n	8009f6a <_free_r+0x26>
 8009fa8:	681c      	ldr	r4, [r3, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	6053      	str	r3, [r2, #4]
 8009fae:	4421      	add	r1, r4
 8009fb0:	6011      	str	r1, [r2, #0]
 8009fb2:	e7da      	b.n	8009f6a <_free_r+0x26>
 8009fb4:	d902      	bls.n	8009fbc <_free_r+0x78>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	e7d6      	b.n	8009f6a <_free_r+0x26>
 8009fbc:	6825      	ldr	r5, [r4, #0]
 8009fbe:	1961      	adds	r1, r4, r5
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	bf04      	itt	eq
 8009fc4:	6819      	ldreq	r1, [r3, #0]
 8009fc6:	685b      	ldreq	r3, [r3, #4]
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	bf04      	itt	eq
 8009fcc:	1949      	addeq	r1, r1, r5
 8009fce:	6021      	streq	r1, [r4, #0]
 8009fd0:	6054      	str	r4, [r2, #4]
 8009fd2:	e7ca      	b.n	8009f6a <_free_r+0x26>
 8009fd4:	b003      	add	sp, #12
 8009fd6:	bd30      	pop	{r4, r5, pc}
 8009fd8:	2000432c 	.word	0x2000432c

08009fdc <sbrk_aligned>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	4e0e      	ldr	r6, [pc, #56]	; (800a018 <sbrk_aligned+0x3c>)
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	b911      	cbnz	r1, 8009fee <sbrk_aligned+0x12>
 8009fe8:	f000 f984 	bl	800a2f4 <_sbrk_r>
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f97f 	bl	800a2f4 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d00a      	beq.n	800a010 <sbrk_aligned+0x34>
 8009ffa:	1cc4      	adds	r4, r0, #3
 8009ffc:	f024 0403 	bic.w	r4, r4, #3
 800a000:	42a0      	cmp	r0, r4
 800a002:	d007      	beq.n	800a014 <sbrk_aligned+0x38>
 800a004:	1a21      	subs	r1, r4, r0
 800a006:	4628      	mov	r0, r5
 800a008:	f000 f974 	bl	800a2f4 <_sbrk_r>
 800a00c:	3001      	adds	r0, #1
 800a00e:	d101      	bne.n	800a014 <sbrk_aligned+0x38>
 800a010:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a014:	4620      	mov	r0, r4
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	20004330 	.word	0x20004330

0800a01c <_malloc_r>:
 800a01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	1ccd      	adds	r5, r1, #3
 800a022:	f025 0503 	bic.w	r5, r5, #3
 800a026:	3508      	adds	r5, #8
 800a028:	2d0c      	cmp	r5, #12
 800a02a:	bf38      	it	cc
 800a02c:	250c      	movcc	r5, #12
 800a02e:	2d00      	cmp	r5, #0
 800a030:	4607      	mov	r7, r0
 800a032:	db01      	blt.n	800a038 <_malloc_r+0x1c>
 800a034:	42a9      	cmp	r1, r5
 800a036:	d905      	bls.n	800a044 <_malloc_r+0x28>
 800a038:	230c      	movs	r3, #12
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	2600      	movs	r6, #0
 800a03e:	4630      	mov	r0, r6
 800a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a044:	4e2e      	ldr	r6, [pc, #184]	; (800a100 <_malloc_r+0xe4>)
 800a046:	f000 fc95 	bl	800a974 <__malloc_lock>
 800a04a:	6833      	ldr	r3, [r6, #0]
 800a04c:	461c      	mov	r4, r3
 800a04e:	bb34      	cbnz	r4, 800a09e <_malloc_r+0x82>
 800a050:	4629      	mov	r1, r5
 800a052:	4638      	mov	r0, r7
 800a054:	f7ff ffc2 	bl	8009fdc <sbrk_aligned>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	4604      	mov	r4, r0
 800a05c:	d14d      	bne.n	800a0fa <_malloc_r+0xde>
 800a05e:	6834      	ldr	r4, [r6, #0]
 800a060:	4626      	mov	r6, r4
 800a062:	2e00      	cmp	r6, #0
 800a064:	d140      	bne.n	800a0e8 <_malloc_r+0xcc>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	4631      	mov	r1, r6
 800a06a:	4638      	mov	r0, r7
 800a06c:	eb04 0803 	add.w	r8, r4, r3
 800a070:	f000 f940 	bl	800a2f4 <_sbrk_r>
 800a074:	4580      	cmp	r8, r0
 800a076:	d13a      	bne.n	800a0ee <_malloc_r+0xd2>
 800a078:	6821      	ldr	r1, [r4, #0]
 800a07a:	3503      	adds	r5, #3
 800a07c:	1a6d      	subs	r5, r5, r1
 800a07e:	f025 0503 	bic.w	r5, r5, #3
 800a082:	3508      	adds	r5, #8
 800a084:	2d0c      	cmp	r5, #12
 800a086:	bf38      	it	cc
 800a088:	250c      	movcc	r5, #12
 800a08a:	4629      	mov	r1, r5
 800a08c:	4638      	mov	r0, r7
 800a08e:	f7ff ffa5 	bl	8009fdc <sbrk_aligned>
 800a092:	3001      	adds	r0, #1
 800a094:	d02b      	beq.n	800a0ee <_malloc_r+0xd2>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	442b      	add	r3, r5
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	e00e      	b.n	800a0bc <_malloc_r+0xa0>
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	1b52      	subs	r2, r2, r5
 800a0a2:	d41e      	bmi.n	800a0e2 <_malloc_r+0xc6>
 800a0a4:	2a0b      	cmp	r2, #11
 800a0a6:	d916      	bls.n	800a0d6 <_malloc_r+0xba>
 800a0a8:	1961      	adds	r1, r4, r5
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	6025      	str	r5, [r4, #0]
 800a0ae:	bf18      	it	ne
 800a0b0:	6059      	strne	r1, [r3, #4]
 800a0b2:	6863      	ldr	r3, [r4, #4]
 800a0b4:	bf08      	it	eq
 800a0b6:	6031      	streq	r1, [r6, #0]
 800a0b8:	5162      	str	r2, [r4, r5]
 800a0ba:	604b      	str	r3, [r1, #4]
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f104 060b 	add.w	r6, r4, #11
 800a0c2:	f000 fc5d 	bl	800a980 <__malloc_unlock>
 800a0c6:	f026 0607 	bic.w	r6, r6, #7
 800a0ca:	1d23      	adds	r3, r4, #4
 800a0cc:	1af2      	subs	r2, r6, r3
 800a0ce:	d0b6      	beq.n	800a03e <_malloc_r+0x22>
 800a0d0:	1b9b      	subs	r3, r3, r6
 800a0d2:	50a3      	str	r3, [r4, r2]
 800a0d4:	e7b3      	b.n	800a03e <_malloc_r+0x22>
 800a0d6:	6862      	ldr	r2, [r4, #4]
 800a0d8:	42a3      	cmp	r3, r4
 800a0da:	bf0c      	ite	eq
 800a0dc:	6032      	streq	r2, [r6, #0]
 800a0de:	605a      	strne	r2, [r3, #4]
 800a0e0:	e7ec      	b.n	800a0bc <_malloc_r+0xa0>
 800a0e2:	4623      	mov	r3, r4
 800a0e4:	6864      	ldr	r4, [r4, #4]
 800a0e6:	e7b2      	b.n	800a04e <_malloc_r+0x32>
 800a0e8:	4634      	mov	r4, r6
 800a0ea:	6876      	ldr	r6, [r6, #4]
 800a0ec:	e7b9      	b.n	800a062 <_malloc_r+0x46>
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f000 fc44 	bl	800a980 <__malloc_unlock>
 800a0f8:	e7a1      	b.n	800a03e <_malloc_r+0x22>
 800a0fa:	6025      	str	r5, [r4, #0]
 800a0fc:	e7de      	b.n	800a0bc <_malloc_r+0xa0>
 800a0fe:	bf00      	nop
 800a100:	2000432c 	.word	0x2000432c

0800a104 <iprintf>:
 800a104:	b40f      	push	{r0, r1, r2, r3}
 800a106:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <iprintf+0x2c>)
 800a108:	b513      	push	{r0, r1, r4, lr}
 800a10a:	681c      	ldr	r4, [r3, #0]
 800a10c:	b124      	cbz	r4, 800a118 <iprintf+0x14>
 800a10e:	69a3      	ldr	r3, [r4, #24]
 800a110:	b913      	cbnz	r3, 800a118 <iprintf+0x14>
 800a112:	4620      	mov	r0, r4
 800a114:	f7ff fe00 	bl	8009d18 <__sinit>
 800a118:	ab05      	add	r3, sp, #20
 800a11a:	9a04      	ldr	r2, [sp, #16]
 800a11c:	68a1      	ldr	r1, [r4, #8]
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fc5d 	bl	800a9e0 <_vfiprintf_r>
 800a126:	b002      	add	sp, #8
 800a128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a12c:	b004      	add	sp, #16
 800a12e:	4770      	bx	lr
 800a130:	20000010 	.word	0x20000010

0800a134 <_puts_r>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	460e      	mov	r6, r1
 800a138:	4605      	mov	r5, r0
 800a13a:	b118      	cbz	r0, 800a144 <_puts_r+0x10>
 800a13c:	6983      	ldr	r3, [r0, #24]
 800a13e:	b90b      	cbnz	r3, 800a144 <_puts_r+0x10>
 800a140:	f7ff fdea 	bl	8009d18 <__sinit>
 800a144:	69ab      	ldr	r3, [r5, #24]
 800a146:	68ac      	ldr	r4, [r5, #8]
 800a148:	b913      	cbnz	r3, 800a150 <_puts_r+0x1c>
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff fde4 	bl	8009d18 <__sinit>
 800a150:	4b2c      	ldr	r3, [pc, #176]	; (800a204 <_puts_r+0xd0>)
 800a152:	429c      	cmp	r4, r3
 800a154:	d120      	bne.n	800a198 <_puts_r+0x64>
 800a156:	686c      	ldr	r4, [r5, #4]
 800a158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a15a:	07db      	lsls	r3, r3, #31
 800a15c:	d405      	bmi.n	800a16a <_puts_r+0x36>
 800a15e:	89a3      	ldrh	r3, [r4, #12]
 800a160:	0598      	lsls	r0, r3, #22
 800a162:	d402      	bmi.n	800a16a <_puts_r+0x36>
 800a164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a166:	f7ff fe9a 	bl	8009e9e <__retarget_lock_acquire_recursive>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	0719      	lsls	r1, r3, #28
 800a16e:	d51d      	bpl.n	800a1ac <_puts_r+0x78>
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	b1db      	cbz	r3, 800a1ac <_puts_r+0x78>
 800a174:	3e01      	subs	r6, #1
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a17c:	3b01      	subs	r3, #1
 800a17e:	60a3      	str	r3, [r4, #8]
 800a180:	bb39      	cbnz	r1, 800a1d2 <_puts_r+0x9e>
 800a182:	2b00      	cmp	r3, #0
 800a184:	da38      	bge.n	800a1f8 <_puts_r+0xc4>
 800a186:	4622      	mov	r2, r4
 800a188:	210a      	movs	r1, #10
 800a18a:	4628      	mov	r0, r5
 800a18c:	f000 f9d6 	bl	800a53c <__swbuf_r>
 800a190:	3001      	adds	r0, #1
 800a192:	d011      	beq.n	800a1b8 <_puts_r+0x84>
 800a194:	250a      	movs	r5, #10
 800a196:	e011      	b.n	800a1bc <_puts_r+0x88>
 800a198:	4b1b      	ldr	r3, [pc, #108]	; (800a208 <_puts_r+0xd4>)
 800a19a:	429c      	cmp	r4, r3
 800a19c:	d101      	bne.n	800a1a2 <_puts_r+0x6e>
 800a19e:	68ac      	ldr	r4, [r5, #8]
 800a1a0:	e7da      	b.n	800a158 <_puts_r+0x24>
 800a1a2:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <_puts_r+0xd8>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	bf08      	it	eq
 800a1a8:	68ec      	ldreq	r4, [r5, #12]
 800a1aa:	e7d5      	b.n	800a158 <_puts_r+0x24>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 fa28 	bl	800a604 <__swsetup_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d0dd      	beq.n	800a174 <_puts_r+0x40>
 800a1b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a1bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1be:	07da      	lsls	r2, r3, #31
 800a1c0:	d405      	bmi.n	800a1ce <_puts_r+0x9a>
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	059b      	lsls	r3, r3, #22
 800a1c6:	d402      	bmi.n	800a1ce <_puts_r+0x9a>
 800a1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ca:	f7ff fe69 	bl	8009ea0 <__retarget_lock_release_recursive>
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da04      	bge.n	800a1e0 <_puts_r+0xac>
 800a1d6:	69a2      	ldr	r2, [r4, #24]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	dc06      	bgt.n	800a1ea <_puts_r+0xb6>
 800a1dc:	290a      	cmp	r1, #10
 800a1de:	d004      	beq.n	800a1ea <_puts_r+0xb6>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	6022      	str	r2, [r4, #0]
 800a1e6:	7019      	strb	r1, [r3, #0]
 800a1e8:	e7c5      	b.n	800a176 <_puts_r+0x42>
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	f000 f9a5 	bl	800a53c <__swbuf_r>
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	d1bf      	bne.n	800a176 <_puts_r+0x42>
 800a1f6:	e7df      	b.n	800a1b8 <_puts_r+0x84>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	250a      	movs	r5, #10
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	6022      	str	r2, [r4, #0]
 800a200:	701d      	strb	r5, [r3, #0]
 800a202:	e7db      	b.n	800a1bc <_puts_r+0x88>
 800a204:	0800b318 	.word	0x0800b318
 800a208:	0800b338 	.word	0x0800b338
 800a20c:	0800b2f8 	.word	0x0800b2f8

0800a210 <puts>:
 800a210:	4b02      	ldr	r3, [pc, #8]	; (800a21c <puts+0xc>)
 800a212:	4601      	mov	r1, r0
 800a214:	6818      	ldr	r0, [r3, #0]
 800a216:	f7ff bf8d 	b.w	800a134 <_puts_r>
 800a21a:	bf00      	nop
 800a21c:	20000010 	.word	0x20000010

0800a220 <cleanup_glue>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	460c      	mov	r4, r1
 800a224:	6809      	ldr	r1, [r1, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	b109      	cbz	r1, 800a22e <cleanup_glue+0xe>
 800a22a:	f7ff fff9 	bl	800a220 <cleanup_glue>
 800a22e:	4621      	mov	r1, r4
 800a230:	4628      	mov	r0, r5
 800a232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a236:	f7ff be85 	b.w	8009f44 <_free_r>
	...

0800a23c <_reclaim_reent>:
 800a23c:	4b2c      	ldr	r3, [pc, #176]	; (800a2f0 <_reclaim_reent+0xb4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4283      	cmp	r3, r0
 800a242:	b570      	push	{r4, r5, r6, lr}
 800a244:	4604      	mov	r4, r0
 800a246:	d051      	beq.n	800a2ec <_reclaim_reent+0xb0>
 800a248:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a24a:	b143      	cbz	r3, 800a25e <_reclaim_reent+0x22>
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d14a      	bne.n	800a2e8 <_reclaim_reent+0xac>
 800a252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a254:	6819      	ldr	r1, [r3, #0]
 800a256:	b111      	cbz	r1, 800a25e <_reclaim_reent+0x22>
 800a258:	4620      	mov	r0, r4
 800a25a:	f7ff fe73 	bl	8009f44 <_free_r>
 800a25e:	6961      	ldr	r1, [r4, #20]
 800a260:	b111      	cbz	r1, 800a268 <_reclaim_reent+0x2c>
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff fe6e 	bl	8009f44 <_free_r>
 800a268:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a26a:	b111      	cbz	r1, 800a272 <_reclaim_reent+0x36>
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7ff fe69 	bl	8009f44 <_free_r>
 800a272:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a274:	b111      	cbz	r1, 800a27c <_reclaim_reent+0x40>
 800a276:	4620      	mov	r0, r4
 800a278:	f7ff fe64 	bl	8009f44 <_free_r>
 800a27c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a27e:	b111      	cbz	r1, 800a286 <_reclaim_reent+0x4a>
 800a280:	4620      	mov	r0, r4
 800a282:	f7ff fe5f 	bl	8009f44 <_free_r>
 800a286:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a288:	b111      	cbz	r1, 800a290 <_reclaim_reent+0x54>
 800a28a:	4620      	mov	r0, r4
 800a28c:	f7ff fe5a 	bl	8009f44 <_free_r>
 800a290:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a292:	b111      	cbz	r1, 800a29a <_reclaim_reent+0x5e>
 800a294:	4620      	mov	r0, r4
 800a296:	f7ff fe55 	bl	8009f44 <_free_r>
 800a29a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a29c:	b111      	cbz	r1, 800a2a4 <_reclaim_reent+0x68>
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7ff fe50 	bl	8009f44 <_free_r>
 800a2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a6:	b111      	cbz	r1, 800a2ae <_reclaim_reent+0x72>
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f7ff fe4b 	bl	8009f44 <_free_r>
 800a2ae:	69a3      	ldr	r3, [r4, #24]
 800a2b0:	b1e3      	cbz	r3, 800a2ec <_reclaim_reent+0xb0>
 800a2b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4798      	blx	r3
 800a2b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a2ba:	b1b9      	cbz	r1, 800a2ec <_reclaim_reent+0xb0>
 800a2bc:	4620      	mov	r0, r4
 800a2be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2c2:	f7ff bfad 	b.w	800a220 <cleanup_glue>
 800a2c6:	5949      	ldr	r1, [r1, r5]
 800a2c8:	b941      	cbnz	r1, 800a2dc <_reclaim_reent+0xa0>
 800a2ca:	3504      	adds	r5, #4
 800a2cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ce:	2d80      	cmp	r5, #128	; 0x80
 800a2d0:	68d9      	ldr	r1, [r3, #12]
 800a2d2:	d1f8      	bne.n	800a2c6 <_reclaim_reent+0x8a>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f7ff fe35 	bl	8009f44 <_free_r>
 800a2da:	e7ba      	b.n	800a252 <_reclaim_reent+0x16>
 800a2dc:	680e      	ldr	r6, [r1, #0]
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7ff fe30 	bl	8009f44 <_free_r>
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	e7ef      	b.n	800a2c8 <_reclaim_reent+0x8c>
 800a2e8:	2500      	movs	r5, #0
 800a2ea:	e7ef      	b.n	800a2cc <_reclaim_reent+0x90>
 800a2ec:	bd70      	pop	{r4, r5, r6, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000010 	.word	0x20000010

0800a2f4 <_sbrk_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_sbrk_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7f7 fc0a 	bl	8001b18 <_sbrk>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_sbrk_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_sbrk_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20004334 	.word	0x20004334

0800a314 <_raise_r>:
 800a314:	291f      	cmp	r1, #31
 800a316:	b538      	push	{r3, r4, r5, lr}
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	d904      	bls.n	800a328 <_raise_r+0x14>
 800a31e:	2316      	movs	r3, #22
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a32a:	b112      	cbz	r2, 800a332 <_raise_r+0x1e>
 800a32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a330:	b94b      	cbnz	r3, 800a346 <_raise_r+0x32>
 800a332:	4620      	mov	r0, r4
 800a334:	f000 f830 	bl	800a398 <_getpid_r>
 800a338:	462a      	mov	r2, r5
 800a33a:	4601      	mov	r1, r0
 800a33c:	4620      	mov	r0, r4
 800a33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a342:	f000 b817 	b.w	800a374 <_kill_r>
 800a346:	2b01      	cmp	r3, #1
 800a348:	d00a      	beq.n	800a360 <_raise_r+0x4c>
 800a34a:	1c59      	adds	r1, r3, #1
 800a34c:	d103      	bne.n	800a356 <_raise_r+0x42>
 800a34e:	2316      	movs	r3, #22
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	2001      	movs	r0, #1
 800a354:	e7e7      	b.n	800a326 <_raise_r+0x12>
 800a356:	2400      	movs	r4, #0
 800a358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a35c:	4628      	mov	r0, r5
 800a35e:	4798      	blx	r3
 800a360:	2000      	movs	r0, #0
 800a362:	e7e0      	b.n	800a326 <_raise_r+0x12>

0800a364 <raise>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <raise+0xc>)
 800a366:	4601      	mov	r1, r0
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	f7ff bfd3 	b.w	800a314 <_raise_r>
 800a36e:	bf00      	nop
 800a370:	20000010 	.word	0x20000010

0800a374 <_kill_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d07      	ldr	r5, [pc, #28]	; (800a394 <_kill_r+0x20>)
 800a378:	2300      	movs	r3, #0
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	4611      	mov	r1, r2
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	f7f7 fb5d 	bl	8001a40 <_kill>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	d102      	bne.n	800a390 <_kill_r+0x1c>
 800a38a:	682b      	ldr	r3, [r5, #0]
 800a38c:	b103      	cbz	r3, 800a390 <_kill_r+0x1c>
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	20004334 	.word	0x20004334

0800a398 <_getpid_r>:
 800a398:	f7f7 bb4a 	b.w	8001a30 <_getpid>

0800a39c <__sread>:
 800a39c:	b510      	push	{r4, lr}
 800a39e:	460c      	mov	r4, r1
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	f000 fde0 	bl	800af68 <_read_r>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	bfab      	itete	ge
 800a3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b0:	181b      	addge	r3, r3, r0
 800a3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3b6:	bfac      	ite	ge
 800a3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ba:	81a3      	strhlt	r3, [r4, #12]
 800a3bc:	bd10      	pop	{r4, pc}

0800a3be <__swrite>:
 800a3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c2:	461f      	mov	r7, r3
 800a3c4:	898b      	ldrh	r3, [r1, #12]
 800a3c6:	05db      	lsls	r3, r3, #23
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	d505      	bpl.n	800a3dc <__swrite+0x1e>
 800a3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f000 fa54 	bl	800a884 <_lseek_r>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3e6:	81a3      	strh	r3, [r4, #12]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f2:	f000 b8f5 	b.w	800a5e0 <_write_r>

0800a3f6 <__sseek>:
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fe:	f000 fa41 	bl	800a884 <_lseek_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	bf15      	itete	ne
 800a408:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a412:	81a3      	strheq	r3, [r4, #12]
 800a414:	bf18      	it	ne
 800a416:	81a3      	strhne	r3, [r4, #12]
 800a418:	bd10      	pop	{r4, pc}

0800a41a <__sclose>:
 800a41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41e:	f000 b95f 	b.w	800a6e0 <_close_r>
	...

0800a424 <_strtol_l.constprop.0>:
 800a424:	2b01      	cmp	r3, #1
 800a426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42a:	d001      	beq.n	800a430 <_strtol_l.constprop.0+0xc>
 800a42c:	2b24      	cmp	r3, #36	; 0x24
 800a42e:	d906      	bls.n	800a43e <_strtol_l.constprop.0+0x1a>
 800a430:	f7ff fc14 	bl	8009c5c <__errno>
 800a434:	2316      	movs	r3, #22
 800a436:	6003      	str	r3, [r0, #0]
 800a438:	2000      	movs	r0, #0
 800a43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a524 <_strtol_l.constprop.0+0x100>
 800a442:	460d      	mov	r5, r1
 800a444:	462e      	mov	r6, r5
 800a446:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a44a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a44e:	f017 0708 	ands.w	r7, r7, #8
 800a452:	d1f7      	bne.n	800a444 <_strtol_l.constprop.0+0x20>
 800a454:	2c2d      	cmp	r4, #45	; 0x2d
 800a456:	d132      	bne.n	800a4be <_strtol_l.constprop.0+0x9a>
 800a458:	782c      	ldrb	r4, [r5, #0]
 800a45a:	2701      	movs	r7, #1
 800a45c:	1cb5      	adds	r5, r6, #2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d05b      	beq.n	800a51a <_strtol_l.constprop.0+0xf6>
 800a462:	2b10      	cmp	r3, #16
 800a464:	d109      	bne.n	800a47a <_strtol_l.constprop.0+0x56>
 800a466:	2c30      	cmp	r4, #48	; 0x30
 800a468:	d107      	bne.n	800a47a <_strtol_l.constprop.0+0x56>
 800a46a:	782c      	ldrb	r4, [r5, #0]
 800a46c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a470:	2c58      	cmp	r4, #88	; 0x58
 800a472:	d14d      	bne.n	800a510 <_strtol_l.constprop.0+0xec>
 800a474:	786c      	ldrb	r4, [r5, #1]
 800a476:	2310      	movs	r3, #16
 800a478:	3502      	adds	r5, #2
 800a47a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a47e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a482:	f04f 0c00 	mov.w	ip, #0
 800a486:	fbb8 f9f3 	udiv	r9, r8, r3
 800a48a:	4666      	mov	r6, ip
 800a48c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a490:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a494:	f1be 0f09 	cmp.w	lr, #9
 800a498:	d816      	bhi.n	800a4c8 <_strtol_l.constprop.0+0xa4>
 800a49a:	4674      	mov	r4, lr
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	dd24      	ble.n	800a4ea <_strtol_l.constprop.0+0xc6>
 800a4a0:	f1bc 0f00 	cmp.w	ip, #0
 800a4a4:	db1e      	blt.n	800a4e4 <_strtol_l.constprop.0+0xc0>
 800a4a6:	45b1      	cmp	r9, r6
 800a4a8:	d31c      	bcc.n	800a4e4 <_strtol_l.constprop.0+0xc0>
 800a4aa:	d101      	bne.n	800a4b0 <_strtol_l.constprop.0+0x8c>
 800a4ac:	45a2      	cmp	sl, r4
 800a4ae:	db19      	blt.n	800a4e4 <_strtol_l.constprop.0+0xc0>
 800a4b0:	fb06 4603 	mla	r6, r6, r3, r4
 800a4b4:	f04f 0c01 	mov.w	ip, #1
 800a4b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4bc:	e7e8      	b.n	800a490 <_strtol_l.constprop.0+0x6c>
 800a4be:	2c2b      	cmp	r4, #43	; 0x2b
 800a4c0:	bf04      	itt	eq
 800a4c2:	782c      	ldrbeq	r4, [r5, #0]
 800a4c4:	1cb5      	addeq	r5, r6, #2
 800a4c6:	e7ca      	b.n	800a45e <_strtol_l.constprop.0+0x3a>
 800a4c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a4cc:	f1be 0f19 	cmp.w	lr, #25
 800a4d0:	d801      	bhi.n	800a4d6 <_strtol_l.constprop.0+0xb2>
 800a4d2:	3c37      	subs	r4, #55	; 0x37
 800a4d4:	e7e2      	b.n	800a49c <_strtol_l.constprop.0+0x78>
 800a4d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a4da:	f1be 0f19 	cmp.w	lr, #25
 800a4de:	d804      	bhi.n	800a4ea <_strtol_l.constprop.0+0xc6>
 800a4e0:	3c57      	subs	r4, #87	; 0x57
 800a4e2:	e7db      	b.n	800a49c <_strtol_l.constprop.0+0x78>
 800a4e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a4e8:	e7e6      	b.n	800a4b8 <_strtol_l.constprop.0+0x94>
 800a4ea:	f1bc 0f00 	cmp.w	ip, #0
 800a4ee:	da05      	bge.n	800a4fc <_strtol_l.constprop.0+0xd8>
 800a4f0:	2322      	movs	r3, #34	; 0x22
 800a4f2:	6003      	str	r3, [r0, #0]
 800a4f4:	4646      	mov	r6, r8
 800a4f6:	b942      	cbnz	r2, 800a50a <_strtol_l.constprop.0+0xe6>
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	e79e      	b.n	800a43a <_strtol_l.constprop.0+0x16>
 800a4fc:	b107      	cbz	r7, 800a500 <_strtol_l.constprop.0+0xdc>
 800a4fe:	4276      	negs	r6, r6
 800a500:	2a00      	cmp	r2, #0
 800a502:	d0f9      	beq.n	800a4f8 <_strtol_l.constprop.0+0xd4>
 800a504:	f1bc 0f00 	cmp.w	ip, #0
 800a508:	d000      	beq.n	800a50c <_strtol_l.constprop.0+0xe8>
 800a50a:	1e69      	subs	r1, r5, #1
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	e7f3      	b.n	800a4f8 <_strtol_l.constprop.0+0xd4>
 800a510:	2430      	movs	r4, #48	; 0x30
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1b1      	bne.n	800a47a <_strtol_l.constprop.0+0x56>
 800a516:	2308      	movs	r3, #8
 800a518:	e7af      	b.n	800a47a <_strtol_l.constprop.0+0x56>
 800a51a:	2c30      	cmp	r4, #48	; 0x30
 800a51c:	d0a5      	beq.n	800a46a <_strtol_l.constprop.0+0x46>
 800a51e:	230a      	movs	r3, #10
 800a520:	e7ab      	b.n	800a47a <_strtol_l.constprop.0+0x56>
 800a522:	bf00      	nop
 800a524:	0800b35d 	.word	0x0800b35d

0800a528 <strtol>:
 800a528:	4613      	mov	r3, r2
 800a52a:	460a      	mov	r2, r1
 800a52c:	4601      	mov	r1, r0
 800a52e:	4802      	ldr	r0, [pc, #8]	; (800a538 <strtol+0x10>)
 800a530:	6800      	ldr	r0, [r0, #0]
 800a532:	f7ff bf77 	b.w	800a424 <_strtol_l.constprop.0>
 800a536:	bf00      	nop
 800a538:	20000010 	.word	0x20000010

0800a53c <__swbuf_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	460e      	mov	r6, r1
 800a540:	4614      	mov	r4, r2
 800a542:	4605      	mov	r5, r0
 800a544:	b118      	cbz	r0, 800a54e <__swbuf_r+0x12>
 800a546:	6983      	ldr	r3, [r0, #24]
 800a548:	b90b      	cbnz	r3, 800a54e <__swbuf_r+0x12>
 800a54a:	f7ff fbe5 	bl	8009d18 <__sinit>
 800a54e:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <__swbuf_r+0x98>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d12b      	bne.n	800a5ac <__swbuf_r+0x70>
 800a554:	686c      	ldr	r4, [r5, #4]
 800a556:	69a3      	ldr	r3, [r4, #24]
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	071a      	lsls	r2, r3, #28
 800a55e:	d52f      	bpl.n	800a5c0 <__swbuf_r+0x84>
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	b36b      	cbz	r3, 800a5c0 <__swbuf_r+0x84>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	1ac0      	subs	r0, r0, r3
 800a56a:	6963      	ldr	r3, [r4, #20]
 800a56c:	b2f6      	uxtb	r6, r6
 800a56e:	4283      	cmp	r3, r0
 800a570:	4637      	mov	r7, r6
 800a572:	dc04      	bgt.n	800a57e <__swbuf_r+0x42>
 800a574:	4621      	mov	r1, r4
 800a576:	4628      	mov	r0, r5
 800a578:	f000 f948 	bl	800a80c <_fflush_r>
 800a57c:	bb30      	cbnz	r0, 800a5cc <__swbuf_r+0x90>
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	3b01      	subs	r3, #1
 800a582:	60a3      	str	r3, [r4, #8]
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6022      	str	r2, [r4, #0]
 800a58a:	701e      	strb	r6, [r3, #0]
 800a58c:	6963      	ldr	r3, [r4, #20]
 800a58e:	3001      	adds	r0, #1
 800a590:	4283      	cmp	r3, r0
 800a592:	d004      	beq.n	800a59e <__swbuf_r+0x62>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	07db      	lsls	r3, r3, #31
 800a598:	d506      	bpl.n	800a5a8 <__swbuf_r+0x6c>
 800a59a:	2e0a      	cmp	r6, #10
 800a59c:	d104      	bne.n	800a5a8 <__swbuf_r+0x6c>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f000 f933 	bl	800a80c <_fflush_r>
 800a5a6:	b988      	cbnz	r0, 800a5cc <__swbuf_r+0x90>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <__swbuf_r+0x9c>)
 800a5ae:	429c      	cmp	r4, r3
 800a5b0:	d101      	bne.n	800a5b6 <__swbuf_r+0x7a>
 800a5b2:	68ac      	ldr	r4, [r5, #8]
 800a5b4:	e7cf      	b.n	800a556 <__swbuf_r+0x1a>
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <__swbuf_r+0xa0>)
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	bf08      	it	eq
 800a5bc:	68ec      	ldreq	r4, [r5, #12]
 800a5be:	e7ca      	b.n	800a556 <__swbuf_r+0x1a>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 f81e 	bl	800a604 <__swsetup_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d0cb      	beq.n	800a564 <__swbuf_r+0x28>
 800a5cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5d0:	e7ea      	b.n	800a5a8 <__swbuf_r+0x6c>
 800a5d2:	bf00      	nop
 800a5d4:	0800b318 	.word	0x0800b318
 800a5d8:	0800b338 	.word	0x0800b338
 800a5dc:	0800b2f8 	.word	0x0800b2f8

0800a5e0 <_write_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4d07      	ldr	r5, [pc, #28]	; (800a600 <_write_r+0x20>)
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	4608      	mov	r0, r1
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	602a      	str	r2, [r5, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f7f6 facc 	bl	8000b8c <_write>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_write_r+0x1e>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_write_r+0x1e>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20004334 	.word	0x20004334

0800a604 <__swsetup_r>:
 800a604:	4b32      	ldr	r3, [pc, #200]	; (800a6d0 <__swsetup_r+0xcc>)
 800a606:	b570      	push	{r4, r5, r6, lr}
 800a608:	681d      	ldr	r5, [r3, #0]
 800a60a:	4606      	mov	r6, r0
 800a60c:	460c      	mov	r4, r1
 800a60e:	b125      	cbz	r5, 800a61a <__swsetup_r+0x16>
 800a610:	69ab      	ldr	r3, [r5, #24]
 800a612:	b913      	cbnz	r3, 800a61a <__swsetup_r+0x16>
 800a614:	4628      	mov	r0, r5
 800a616:	f7ff fb7f 	bl	8009d18 <__sinit>
 800a61a:	4b2e      	ldr	r3, [pc, #184]	; (800a6d4 <__swsetup_r+0xd0>)
 800a61c:	429c      	cmp	r4, r3
 800a61e:	d10f      	bne.n	800a640 <__swsetup_r+0x3c>
 800a620:	686c      	ldr	r4, [r5, #4]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a628:	0719      	lsls	r1, r3, #28
 800a62a:	d42c      	bmi.n	800a686 <__swsetup_r+0x82>
 800a62c:	06dd      	lsls	r5, r3, #27
 800a62e:	d411      	bmi.n	800a654 <__swsetup_r+0x50>
 800a630:	2309      	movs	r3, #9
 800a632:	6033      	str	r3, [r6, #0]
 800a634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a63e:	e03e      	b.n	800a6be <__swsetup_r+0xba>
 800a640:	4b25      	ldr	r3, [pc, #148]	; (800a6d8 <__swsetup_r+0xd4>)
 800a642:	429c      	cmp	r4, r3
 800a644:	d101      	bne.n	800a64a <__swsetup_r+0x46>
 800a646:	68ac      	ldr	r4, [r5, #8]
 800a648:	e7eb      	b.n	800a622 <__swsetup_r+0x1e>
 800a64a:	4b24      	ldr	r3, [pc, #144]	; (800a6dc <__swsetup_r+0xd8>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	bf08      	it	eq
 800a650:	68ec      	ldreq	r4, [r5, #12]
 800a652:	e7e6      	b.n	800a622 <__swsetup_r+0x1e>
 800a654:	0758      	lsls	r0, r3, #29
 800a656:	d512      	bpl.n	800a67e <__swsetup_r+0x7a>
 800a658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a65a:	b141      	cbz	r1, 800a66e <__swsetup_r+0x6a>
 800a65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a660:	4299      	cmp	r1, r3
 800a662:	d002      	beq.n	800a66a <__swsetup_r+0x66>
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff fc6d 	bl	8009f44 <_free_r>
 800a66a:	2300      	movs	r3, #0
 800a66c:	6363      	str	r3, [r4, #52]	; 0x34
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	2300      	movs	r3, #0
 800a678:	6063      	str	r3, [r4, #4]
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f043 0308 	orr.w	r3, r3, #8
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	b94b      	cbnz	r3, 800a69e <__swsetup_r+0x9a>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a694:	d003      	beq.n	800a69e <__swsetup_r+0x9a>
 800a696:	4621      	mov	r1, r4
 800a698:	4630      	mov	r0, r6
 800a69a:	f000 f92b 	bl	800a8f4 <__smakebuf_r>
 800a69e:	89a0      	ldrh	r0, [r4, #12]
 800a6a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a4:	f010 0301 	ands.w	r3, r0, #1
 800a6a8:	d00a      	beq.n	800a6c0 <__swsetup_r+0xbc>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	6963      	ldr	r3, [r4, #20]
 800a6b0:	425b      	negs	r3, r3
 800a6b2:	61a3      	str	r3, [r4, #24]
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	b943      	cbnz	r3, 800a6ca <__swsetup_r+0xc6>
 800a6b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6bc:	d1ba      	bne.n	800a634 <__swsetup_r+0x30>
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	0781      	lsls	r1, r0, #30
 800a6c2:	bf58      	it	pl
 800a6c4:	6963      	ldrpl	r3, [r4, #20]
 800a6c6:	60a3      	str	r3, [r4, #8]
 800a6c8:	e7f4      	b.n	800a6b4 <__swsetup_r+0xb0>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e7f7      	b.n	800a6be <__swsetup_r+0xba>
 800a6ce:	bf00      	nop
 800a6d0:	20000010 	.word	0x20000010
 800a6d4:	0800b318 	.word	0x0800b318
 800a6d8:	0800b338 	.word	0x0800b338
 800a6dc:	0800b2f8 	.word	0x0800b2f8

0800a6e0 <_close_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d06      	ldr	r5, [pc, #24]	; (800a6fc <_close_r+0x1c>)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	f7f7 f9df 	bl	8001aae <_close>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_close_r+0x1a>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_close_r+0x1a>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	20004334 	.word	0x20004334

0800a700 <__sflush_r>:
 800a700:	898a      	ldrh	r2, [r1, #12]
 800a702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a706:	4605      	mov	r5, r0
 800a708:	0710      	lsls	r0, r2, #28
 800a70a:	460c      	mov	r4, r1
 800a70c:	d458      	bmi.n	800a7c0 <__sflush_r+0xc0>
 800a70e:	684b      	ldr	r3, [r1, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	dc05      	bgt.n	800a720 <__sflush_r+0x20>
 800a714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a716:	2b00      	cmp	r3, #0
 800a718:	dc02      	bgt.n	800a720 <__sflush_r+0x20>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a722:	2e00      	cmp	r6, #0
 800a724:	d0f9      	beq.n	800a71a <__sflush_r+0x1a>
 800a726:	2300      	movs	r3, #0
 800a728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a72c:	682f      	ldr	r7, [r5, #0]
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	d032      	beq.n	800a798 <__sflush_r+0x98>
 800a732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	075a      	lsls	r2, r3, #29
 800a738:	d505      	bpl.n	800a746 <__sflush_r+0x46>
 800a73a:	6863      	ldr	r3, [r4, #4]
 800a73c:	1ac0      	subs	r0, r0, r3
 800a73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a740:	b10b      	cbz	r3, 800a746 <__sflush_r+0x46>
 800a742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a744:	1ac0      	subs	r0, r0, r3
 800a746:	2300      	movs	r3, #0
 800a748:	4602      	mov	r2, r0
 800a74a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a74c:	6a21      	ldr	r1, [r4, #32]
 800a74e:	4628      	mov	r0, r5
 800a750:	47b0      	blx	r6
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	d106      	bne.n	800a766 <__sflush_r+0x66>
 800a758:	6829      	ldr	r1, [r5, #0]
 800a75a:	291d      	cmp	r1, #29
 800a75c:	d82c      	bhi.n	800a7b8 <__sflush_r+0xb8>
 800a75e:	4a2a      	ldr	r2, [pc, #168]	; (800a808 <__sflush_r+0x108>)
 800a760:	40ca      	lsrs	r2, r1
 800a762:	07d6      	lsls	r6, r2, #31
 800a764:	d528      	bpl.n	800a7b8 <__sflush_r+0xb8>
 800a766:	2200      	movs	r2, #0
 800a768:	6062      	str	r2, [r4, #4]
 800a76a:	04d9      	lsls	r1, r3, #19
 800a76c:	6922      	ldr	r2, [r4, #16]
 800a76e:	6022      	str	r2, [r4, #0]
 800a770:	d504      	bpl.n	800a77c <__sflush_r+0x7c>
 800a772:	1c42      	adds	r2, r0, #1
 800a774:	d101      	bne.n	800a77a <__sflush_r+0x7a>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	b903      	cbnz	r3, 800a77c <__sflush_r+0x7c>
 800a77a:	6560      	str	r0, [r4, #84]	; 0x54
 800a77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a77e:	602f      	str	r7, [r5, #0]
 800a780:	2900      	cmp	r1, #0
 800a782:	d0ca      	beq.n	800a71a <__sflush_r+0x1a>
 800a784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a788:	4299      	cmp	r1, r3
 800a78a:	d002      	beq.n	800a792 <__sflush_r+0x92>
 800a78c:	4628      	mov	r0, r5
 800a78e:	f7ff fbd9 	bl	8009f44 <_free_r>
 800a792:	2000      	movs	r0, #0
 800a794:	6360      	str	r0, [r4, #52]	; 0x34
 800a796:	e7c1      	b.n	800a71c <__sflush_r+0x1c>
 800a798:	6a21      	ldr	r1, [r4, #32]
 800a79a:	2301      	movs	r3, #1
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b0      	blx	r6
 800a7a0:	1c41      	adds	r1, r0, #1
 800a7a2:	d1c7      	bne.n	800a734 <__sflush_r+0x34>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0c4      	beq.n	800a734 <__sflush_r+0x34>
 800a7aa:	2b1d      	cmp	r3, #29
 800a7ac:	d001      	beq.n	800a7b2 <__sflush_r+0xb2>
 800a7ae:	2b16      	cmp	r3, #22
 800a7b0:	d101      	bne.n	800a7b6 <__sflush_r+0xb6>
 800a7b2:	602f      	str	r7, [r5, #0]
 800a7b4:	e7b1      	b.n	800a71a <__sflush_r+0x1a>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	e7ad      	b.n	800a71c <__sflush_r+0x1c>
 800a7c0:	690f      	ldr	r7, [r1, #16]
 800a7c2:	2f00      	cmp	r7, #0
 800a7c4:	d0a9      	beq.n	800a71a <__sflush_r+0x1a>
 800a7c6:	0793      	lsls	r3, r2, #30
 800a7c8:	680e      	ldr	r6, [r1, #0]
 800a7ca:	bf08      	it	eq
 800a7cc:	694b      	ldreq	r3, [r1, #20]
 800a7ce:	600f      	str	r7, [r1, #0]
 800a7d0:	bf18      	it	ne
 800a7d2:	2300      	movne	r3, #0
 800a7d4:	eba6 0807 	sub.w	r8, r6, r7
 800a7d8:	608b      	str	r3, [r1, #8]
 800a7da:	f1b8 0f00 	cmp.w	r8, #0
 800a7de:	dd9c      	ble.n	800a71a <__sflush_r+0x1a>
 800a7e0:	6a21      	ldr	r1, [r4, #32]
 800a7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7e4:	4643      	mov	r3, r8
 800a7e6:	463a      	mov	r2, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b0      	blx	r6
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	dc06      	bgt.n	800a7fe <__sflush_r+0xfe>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7fc:	e78e      	b.n	800a71c <__sflush_r+0x1c>
 800a7fe:	4407      	add	r7, r0
 800a800:	eba8 0800 	sub.w	r8, r8, r0
 800a804:	e7e9      	b.n	800a7da <__sflush_r+0xda>
 800a806:	bf00      	nop
 800a808:	20400001 	.word	0x20400001

0800a80c <_fflush_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	690b      	ldr	r3, [r1, #16]
 800a810:	4605      	mov	r5, r0
 800a812:	460c      	mov	r4, r1
 800a814:	b913      	cbnz	r3, 800a81c <_fflush_r+0x10>
 800a816:	2500      	movs	r5, #0
 800a818:	4628      	mov	r0, r5
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	b118      	cbz	r0, 800a826 <_fflush_r+0x1a>
 800a81e:	6983      	ldr	r3, [r0, #24]
 800a820:	b90b      	cbnz	r3, 800a826 <_fflush_r+0x1a>
 800a822:	f7ff fa79 	bl	8009d18 <__sinit>
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <_fflush_r+0x6c>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	d11b      	bne.n	800a864 <_fflush_r+0x58>
 800a82c:	686c      	ldr	r4, [r5, #4]
 800a82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0ef      	beq.n	800a816 <_fflush_r+0xa>
 800a836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a838:	07d0      	lsls	r0, r2, #31
 800a83a:	d404      	bmi.n	800a846 <_fflush_r+0x3a>
 800a83c:	0599      	lsls	r1, r3, #22
 800a83e:	d402      	bmi.n	800a846 <_fflush_r+0x3a>
 800a840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a842:	f7ff fb2c 	bl	8009e9e <__retarget_lock_acquire_recursive>
 800a846:	4628      	mov	r0, r5
 800a848:	4621      	mov	r1, r4
 800a84a:	f7ff ff59 	bl	800a700 <__sflush_r>
 800a84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a850:	07da      	lsls	r2, r3, #31
 800a852:	4605      	mov	r5, r0
 800a854:	d4e0      	bmi.n	800a818 <_fflush_r+0xc>
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	059b      	lsls	r3, r3, #22
 800a85a:	d4dd      	bmi.n	800a818 <_fflush_r+0xc>
 800a85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a85e:	f7ff fb1f 	bl	8009ea0 <__retarget_lock_release_recursive>
 800a862:	e7d9      	b.n	800a818 <_fflush_r+0xc>
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <_fflush_r+0x70>)
 800a866:	429c      	cmp	r4, r3
 800a868:	d101      	bne.n	800a86e <_fflush_r+0x62>
 800a86a:	68ac      	ldr	r4, [r5, #8]
 800a86c:	e7df      	b.n	800a82e <_fflush_r+0x22>
 800a86e:	4b04      	ldr	r3, [pc, #16]	; (800a880 <_fflush_r+0x74>)
 800a870:	429c      	cmp	r4, r3
 800a872:	bf08      	it	eq
 800a874:	68ec      	ldreq	r4, [r5, #12]
 800a876:	e7da      	b.n	800a82e <_fflush_r+0x22>
 800a878:	0800b318 	.word	0x0800b318
 800a87c:	0800b338 	.word	0x0800b338
 800a880:	0800b2f8 	.word	0x0800b2f8

0800a884 <_lseek_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d07      	ldr	r5, [pc, #28]	; (800a8a4 <_lseek_r+0x20>)
 800a888:	4604      	mov	r4, r0
 800a88a:	4608      	mov	r0, r1
 800a88c:	4611      	mov	r1, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	602a      	str	r2, [r5, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	f7f7 f932 	bl	8001afc <_lseek>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_lseek_r+0x1e>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_lseek_r+0x1e>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20004334 	.word	0x20004334

0800a8a8 <__swhatbuf_r>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	460e      	mov	r6, r1
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	b096      	sub	sp, #88	; 0x58
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	461d      	mov	r5, r3
 800a8b8:	da08      	bge.n	800a8cc <__swhatbuf_r+0x24>
 800a8ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	602a      	str	r2, [r5, #0]
 800a8c2:	061a      	lsls	r2, r3, #24
 800a8c4:	d410      	bmi.n	800a8e8 <__swhatbuf_r+0x40>
 800a8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ca:	e00e      	b.n	800a8ea <__swhatbuf_r+0x42>
 800a8cc:	466a      	mov	r2, sp
 800a8ce:	f000 fb5d 	bl	800af8c <_fstat_r>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	dbf1      	blt.n	800a8ba <__swhatbuf_r+0x12>
 800a8d6:	9a01      	ldr	r2, [sp, #4]
 800a8d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8e0:	425a      	negs	r2, r3
 800a8e2:	415a      	adcs	r2, r3
 800a8e4:	602a      	str	r2, [r5, #0]
 800a8e6:	e7ee      	b.n	800a8c6 <__swhatbuf_r+0x1e>
 800a8e8:	2340      	movs	r3, #64	; 0x40
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	b016      	add	sp, #88	; 0x58
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8f4 <__smakebuf_r>:
 800a8f4:	898b      	ldrh	r3, [r1, #12]
 800a8f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8f8:	079d      	lsls	r5, r3, #30
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	d507      	bpl.n	800a910 <__smakebuf_r+0x1c>
 800a900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	6123      	str	r3, [r4, #16]
 800a908:	2301      	movs	r3, #1
 800a90a:	6163      	str	r3, [r4, #20]
 800a90c:	b002      	add	sp, #8
 800a90e:	bd70      	pop	{r4, r5, r6, pc}
 800a910:	ab01      	add	r3, sp, #4
 800a912:	466a      	mov	r2, sp
 800a914:	f7ff ffc8 	bl	800a8a8 <__swhatbuf_r>
 800a918:	9900      	ldr	r1, [sp, #0]
 800a91a:	4605      	mov	r5, r0
 800a91c:	4630      	mov	r0, r6
 800a91e:	f7ff fb7d 	bl	800a01c <_malloc_r>
 800a922:	b948      	cbnz	r0, 800a938 <__smakebuf_r+0x44>
 800a924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a928:	059a      	lsls	r2, r3, #22
 800a92a:	d4ef      	bmi.n	800a90c <__smakebuf_r+0x18>
 800a92c:	f023 0303 	bic.w	r3, r3, #3
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	81a3      	strh	r3, [r4, #12]
 800a936:	e7e3      	b.n	800a900 <__smakebuf_r+0xc>
 800a938:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <__smakebuf_r+0x7c>)
 800a93a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	6020      	str	r0, [r4, #0]
 800a940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	9b00      	ldr	r3, [sp, #0]
 800a948:	6163      	str	r3, [r4, #20]
 800a94a:	9b01      	ldr	r3, [sp, #4]
 800a94c:	6120      	str	r0, [r4, #16]
 800a94e:	b15b      	cbz	r3, 800a968 <__smakebuf_r+0x74>
 800a950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a954:	4630      	mov	r0, r6
 800a956:	f000 fb2b 	bl	800afb0 <_isatty_r>
 800a95a:	b128      	cbz	r0, 800a968 <__smakebuf_r+0x74>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	89a0      	ldrh	r0, [r4, #12]
 800a96a:	4305      	orrs	r5, r0
 800a96c:	81a5      	strh	r5, [r4, #12]
 800a96e:	e7cd      	b.n	800a90c <__smakebuf_r+0x18>
 800a970:	08009cb1 	.word	0x08009cb1

0800a974 <__malloc_lock>:
 800a974:	4801      	ldr	r0, [pc, #4]	; (800a97c <__malloc_lock+0x8>)
 800a976:	f7ff ba92 	b.w	8009e9e <__retarget_lock_acquire_recursive>
 800a97a:	bf00      	nop
 800a97c:	20004328 	.word	0x20004328

0800a980 <__malloc_unlock>:
 800a980:	4801      	ldr	r0, [pc, #4]	; (800a988 <__malloc_unlock+0x8>)
 800a982:	f7ff ba8d 	b.w	8009ea0 <__retarget_lock_release_recursive>
 800a986:	bf00      	nop
 800a988:	20004328 	.word	0x20004328

0800a98c <__sfputc_r>:
 800a98c:	6893      	ldr	r3, [r2, #8]
 800a98e:	3b01      	subs	r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	b410      	push	{r4}
 800a994:	6093      	str	r3, [r2, #8]
 800a996:	da08      	bge.n	800a9aa <__sfputc_r+0x1e>
 800a998:	6994      	ldr	r4, [r2, #24]
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	db01      	blt.n	800a9a2 <__sfputc_r+0x16>
 800a99e:	290a      	cmp	r1, #10
 800a9a0:	d103      	bne.n	800a9aa <__sfputc_r+0x1e>
 800a9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a6:	f7ff bdc9 	b.w	800a53c <__swbuf_r>
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	1c58      	adds	r0, r3, #1
 800a9ae:	6010      	str	r0, [r2, #0]
 800a9b0:	7019      	strb	r1, [r3, #0]
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <__sfputs_r>:
 800a9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	18d5      	adds	r5, r2, r3
 800a9c4:	42ac      	cmp	r4, r5
 800a9c6:	d101      	bne.n	800a9cc <__sfputs_r+0x12>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e007      	b.n	800a9dc <__sfputs_r+0x22>
 800a9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d0:	463a      	mov	r2, r7
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ffda 	bl	800a98c <__sfputc_r>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d1f3      	bne.n	800a9c4 <__sfputs_r+0xa>
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9e0 <_vfiprintf_r>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	b09d      	sub	sp, #116	; 0x74
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	4698      	mov	r8, r3
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	b118      	cbz	r0, 800a9f8 <_vfiprintf_r+0x18>
 800a9f0:	6983      	ldr	r3, [r0, #24]
 800a9f2:	b90b      	cbnz	r3, 800a9f8 <_vfiprintf_r+0x18>
 800a9f4:	f7ff f990 	bl	8009d18 <__sinit>
 800a9f8:	4b89      	ldr	r3, [pc, #548]	; (800ac20 <_vfiprintf_r+0x240>)
 800a9fa:	429d      	cmp	r5, r3
 800a9fc:	d11b      	bne.n	800aa36 <_vfiprintf_r+0x56>
 800a9fe:	6875      	ldr	r5, [r6, #4]
 800aa00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa02:	07d9      	lsls	r1, r3, #31
 800aa04:	d405      	bmi.n	800aa12 <_vfiprintf_r+0x32>
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	059a      	lsls	r2, r3, #22
 800aa0a:	d402      	bmi.n	800aa12 <_vfiprintf_r+0x32>
 800aa0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa0e:	f7ff fa46 	bl	8009e9e <__retarget_lock_acquire_recursive>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	071b      	lsls	r3, r3, #28
 800aa16:	d501      	bpl.n	800aa1c <_vfiprintf_r+0x3c>
 800aa18:	692b      	ldr	r3, [r5, #16]
 800aa1a:	b9eb      	cbnz	r3, 800aa58 <_vfiprintf_r+0x78>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f7ff fdf0 	bl	800a604 <__swsetup_r>
 800aa24:	b1c0      	cbz	r0, 800aa58 <_vfiprintf_r+0x78>
 800aa26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa28:	07dc      	lsls	r4, r3, #31
 800aa2a:	d50e      	bpl.n	800aa4a <_vfiprintf_r+0x6a>
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa30:	b01d      	add	sp, #116	; 0x74
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	4b7b      	ldr	r3, [pc, #492]	; (800ac24 <_vfiprintf_r+0x244>)
 800aa38:	429d      	cmp	r5, r3
 800aa3a:	d101      	bne.n	800aa40 <_vfiprintf_r+0x60>
 800aa3c:	68b5      	ldr	r5, [r6, #8]
 800aa3e:	e7df      	b.n	800aa00 <_vfiprintf_r+0x20>
 800aa40:	4b79      	ldr	r3, [pc, #484]	; (800ac28 <_vfiprintf_r+0x248>)
 800aa42:	429d      	cmp	r5, r3
 800aa44:	bf08      	it	eq
 800aa46:	68f5      	ldreq	r5, [r6, #12]
 800aa48:	e7da      	b.n	800aa00 <_vfiprintf_r+0x20>
 800aa4a:	89ab      	ldrh	r3, [r5, #12]
 800aa4c:	0598      	lsls	r0, r3, #22
 800aa4e:	d4ed      	bmi.n	800aa2c <_vfiprintf_r+0x4c>
 800aa50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa52:	f7ff fa25 	bl	8009ea0 <__retarget_lock_release_recursive>
 800aa56:	e7e9      	b.n	800aa2c <_vfiprintf_r+0x4c>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa62:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa66:	2330      	movs	r3, #48	; 0x30
 800aa68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac2c <_vfiprintf_r+0x24c>
 800aa6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa70:	f04f 0901 	mov.w	r9, #1
 800aa74:	4623      	mov	r3, r4
 800aa76:	469a      	mov	sl, r3
 800aa78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7c:	b10a      	cbz	r2, 800aa82 <_vfiprintf_r+0xa2>
 800aa7e:	2a25      	cmp	r2, #37	; 0x25
 800aa80:	d1f9      	bne.n	800aa76 <_vfiprintf_r+0x96>
 800aa82:	ebba 0b04 	subs.w	fp, sl, r4
 800aa86:	d00b      	beq.n	800aaa0 <_vfiprintf_r+0xc0>
 800aa88:	465b      	mov	r3, fp
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f7ff ff93 	bl	800a9ba <__sfputs_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	f000 80aa 	beq.w	800abee <_vfiprintf_r+0x20e>
 800aa9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9c:	445a      	add	r2, fp
 800aa9e:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa0:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 80a2 	beq.w	800abee <_vfiprintf_r+0x20e>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab4:	f10a 0a01 	add.w	sl, sl, #1
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	9307      	str	r3, [sp, #28]
 800aabc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aac0:	931a      	str	r3, [sp, #104]	; 0x68
 800aac2:	4654      	mov	r4, sl
 800aac4:	2205      	movs	r2, #5
 800aac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaca:	4858      	ldr	r0, [pc, #352]	; (800ac2c <_vfiprintf_r+0x24c>)
 800aacc:	f7f5 fb88 	bl	80001e0 <memchr>
 800aad0:	9a04      	ldr	r2, [sp, #16]
 800aad2:	b9d8      	cbnz	r0, 800ab0c <_vfiprintf_r+0x12c>
 800aad4:	06d1      	lsls	r1, r2, #27
 800aad6:	bf44      	itt	mi
 800aad8:	2320      	movmi	r3, #32
 800aada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aade:	0713      	lsls	r3, r2, #28
 800aae0:	bf44      	itt	mi
 800aae2:	232b      	movmi	r3, #43	; 0x2b
 800aae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae8:	f89a 3000 	ldrb.w	r3, [sl]
 800aaec:	2b2a      	cmp	r3, #42	; 0x2a
 800aaee:	d015      	beq.n	800ab1c <_vfiprintf_r+0x13c>
 800aaf0:	9a07      	ldr	r2, [sp, #28]
 800aaf2:	4654      	mov	r4, sl
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f04f 0c0a 	mov.w	ip, #10
 800aafa:	4621      	mov	r1, r4
 800aafc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab00:	3b30      	subs	r3, #48	; 0x30
 800ab02:	2b09      	cmp	r3, #9
 800ab04:	d94e      	bls.n	800aba4 <_vfiprintf_r+0x1c4>
 800ab06:	b1b0      	cbz	r0, 800ab36 <_vfiprintf_r+0x156>
 800ab08:	9207      	str	r2, [sp, #28]
 800ab0a:	e014      	b.n	800ab36 <_vfiprintf_r+0x156>
 800ab0c:	eba0 0308 	sub.w	r3, r0, r8
 800ab10:	fa09 f303 	lsl.w	r3, r9, r3
 800ab14:	4313      	orrs	r3, r2
 800ab16:	9304      	str	r3, [sp, #16]
 800ab18:	46a2      	mov	sl, r4
 800ab1a:	e7d2      	b.n	800aac2 <_vfiprintf_r+0xe2>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	1d19      	adds	r1, r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	9103      	str	r1, [sp, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	bfbb      	ittet	lt
 800ab28:	425b      	neglt	r3, r3
 800ab2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab2e:	9307      	strge	r3, [sp, #28]
 800ab30:	9307      	strlt	r3, [sp, #28]
 800ab32:	bfb8      	it	lt
 800ab34:	9204      	strlt	r2, [sp, #16]
 800ab36:	7823      	ldrb	r3, [r4, #0]
 800ab38:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3a:	d10c      	bne.n	800ab56 <_vfiprintf_r+0x176>
 800ab3c:	7863      	ldrb	r3, [r4, #1]
 800ab3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab40:	d135      	bne.n	800abae <_vfiprintf_r+0x1ce>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	1d1a      	adds	r2, r3, #4
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	9203      	str	r2, [sp, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bfb8      	it	lt
 800ab4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab52:	3402      	adds	r4, #2
 800ab54:	9305      	str	r3, [sp, #20]
 800ab56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac3c <_vfiprintf_r+0x25c>
 800ab5a:	7821      	ldrb	r1, [r4, #0]
 800ab5c:	2203      	movs	r2, #3
 800ab5e:	4650      	mov	r0, sl
 800ab60:	f7f5 fb3e 	bl	80001e0 <memchr>
 800ab64:	b140      	cbz	r0, 800ab78 <_vfiprintf_r+0x198>
 800ab66:	2340      	movs	r3, #64	; 0x40
 800ab68:	eba0 000a 	sub.w	r0, r0, sl
 800ab6c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab70:	9b04      	ldr	r3, [sp, #16]
 800ab72:	4303      	orrs	r3, r0
 800ab74:	3401      	adds	r4, #1
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7c:	482c      	ldr	r0, [pc, #176]	; (800ac30 <_vfiprintf_r+0x250>)
 800ab7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab82:	2206      	movs	r2, #6
 800ab84:	f7f5 fb2c 	bl	80001e0 <memchr>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d03f      	beq.n	800ac0c <_vfiprintf_r+0x22c>
 800ab8c:	4b29      	ldr	r3, [pc, #164]	; (800ac34 <_vfiprintf_r+0x254>)
 800ab8e:	bb1b      	cbnz	r3, 800abd8 <_vfiprintf_r+0x1f8>
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	3307      	adds	r3, #7
 800ab94:	f023 0307 	bic.w	r3, r3, #7
 800ab98:	3308      	adds	r3, #8
 800ab9a:	9303      	str	r3, [sp, #12]
 800ab9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9e:	443b      	add	r3, r7
 800aba0:	9309      	str	r3, [sp, #36]	; 0x24
 800aba2:	e767      	b.n	800aa74 <_vfiprintf_r+0x94>
 800aba4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aba8:	460c      	mov	r4, r1
 800abaa:	2001      	movs	r0, #1
 800abac:	e7a5      	b.n	800aafa <_vfiprintf_r+0x11a>
 800abae:	2300      	movs	r3, #0
 800abb0:	3401      	adds	r4, #1
 800abb2:	9305      	str	r3, [sp, #20]
 800abb4:	4619      	mov	r1, r3
 800abb6:	f04f 0c0a 	mov.w	ip, #10
 800abba:	4620      	mov	r0, r4
 800abbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc0:	3a30      	subs	r2, #48	; 0x30
 800abc2:	2a09      	cmp	r2, #9
 800abc4:	d903      	bls.n	800abce <_vfiprintf_r+0x1ee>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0c5      	beq.n	800ab56 <_vfiprintf_r+0x176>
 800abca:	9105      	str	r1, [sp, #20]
 800abcc:	e7c3      	b.n	800ab56 <_vfiprintf_r+0x176>
 800abce:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd2:	4604      	mov	r4, r0
 800abd4:	2301      	movs	r3, #1
 800abd6:	e7f0      	b.n	800abba <_vfiprintf_r+0x1da>
 800abd8:	ab03      	add	r3, sp, #12
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	462a      	mov	r2, r5
 800abde:	4b16      	ldr	r3, [pc, #88]	; (800ac38 <_vfiprintf_r+0x258>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	4630      	mov	r0, r6
 800abe4:	f3af 8000 	nop.w
 800abe8:	4607      	mov	r7, r0
 800abea:	1c78      	adds	r0, r7, #1
 800abec:	d1d6      	bne.n	800ab9c <_vfiprintf_r+0x1bc>
 800abee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf0:	07d9      	lsls	r1, r3, #31
 800abf2:	d405      	bmi.n	800ac00 <_vfiprintf_r+0x220>
 800abf4:	89ab      	ldrh	r3, [r5, #12]
 800abf6:	059a      	lsls	r2, r3, #22
 800abf8:	d402      	bmi.n	800ac00 <_vfiprintf_r+0x220>
 800abfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abfc:	f7ff f950 	bl	8009ea0 <__retarget_lock_release_recursive>
 800ac00:	89ab      	ldrh	r3, [r5, #12]
 800ac02:	065b      	lsls	r3, r3, #25
 800ac04:	f53f af12 	bmi.w	800aa2c <_vfiprintf_r+0x4c>
 800ac08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac0a:	e711      	b.n	800aa30 <_vfiprintf_r+0x50>
 800ac0c:	ab03      	add	r3, sp, #12
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	462a      	mov	r2, r5
 800ac12:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <_vfiprintf_r+0x258>)
 800ac14:	a904      	add	r1, sp, #16
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f880 	bl	800ad1c <_printf_i>
 800ac1c:	e7e4      	b.n	800abe8 <_vfiprintf_r+0x208>
 800ac1e:	bf00      	nop
 800ac20:	0800b318 	.word	0x0800b318
 800ac24:	0800b338 	.word	0x0800b338
 800ac28:	0800b2f8 	.word	0x0800b2f8
 800ac2c:	0800b45d 	.word	0x0800b45d
 800ac30:	0800b467 	.word	0x0800b467
 800ac34:	00000000 	.word	0x00000000
 800ac38:	0800a9bb 	.word	0x0800a9bb
 800ac3c:	0800b463 	.word	0x0800b463

0800ac40 <_printf_common>:
 800ac40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	4616      	mov	r6, r2
 800ac46:	4699      	mov	r9, r3
 800ac48:	688a      	ldr	r2, [r1, #8]
 800ac4a:	690b      	ldr	r3, [r1, #16]
 800ac4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac50:	4293      	cmp	r3, r2
 800ac52:	bfb8      	it	lt
 800ac54:	4613      	movlt	r3, r2
 800ac56:	6033      	str	r3, [r6, #0]
 800ac58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	b10a      	cbz	r2, 800ac66 <_printf_common+0x26>
 800ac62:	3301      	adds	r3, #1
 800ac64:	6033      	str	r3, [r6, #0]
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	0699      	lsls	r1, r3, #26
 800ac6a:	bf42      	ittt	mi
 800ac6c:	6833      	ldrmi	r3, [r6, #0]
 800ac6e:	3302      	addmi	r3, #2
 800ac70:	6033      	strmi	r3, [r6, #0]
 800ac72:	6825      	ldr	r5, [r4, #0]
 800ac74:	f015 0506 	ands.w	r5, r5, #6
 800ac78:	d106      	bne.n	800ac88 <_printf_common+0x48>
 800ac7a:	f104 0a19 	add.w	sl, r4, #25
 800ac7e:	68e3      	ldr	r3, [r4, #12]
 800ac80:	6832      	ldr	r2, [r6, #0]
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	42ab      	cmp	r3, r5
 800ac86:	dc26      	bgt.n	800acd6 <_printf_common+0x96>
 800ac88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac8c:	1e13      	subs	r3, r2, #0
 800ac8e:	6822      	ldr	r2, [r4, #0]
 800ac90:	bf18      	it	ne
 800ac92:	2301      	movne	r3, #1
 800ac94:	0692      	lsls	r2, r2, #26
 800ac96:	d42b      	bmi.n	800acf0 <_printf_common+0xb0>
 800ac98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	4638      	mov	r0, r7
 800aca0:	47c0      	blx	r8
 800aca2:	3001      	adds	r0, #1
 800aca4:	d01e      	beq.n	800ace4 <_printf_common+0xa4>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	68e5      	ldr	r5, [r4, #12]
 800acaa:	6832      	ldr	r2, [r6, #0]
 800acac:	f003 0306 	and.w	r3, r3, #6
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	bf08      	it	eq
 800acb4:	1aad      	subeq	r5, r5, r2
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	6922      	ldr	r2, [r4, #16]
 800acba:	bf0c      	ite	eq
 800acbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acc0:	2500      	movne	r5, #0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	bfc4      	itt	gt
 800acc6:	1a9b      	subgt	r3, r3, r2
 800acc8:	18ed      	addgt	r5, r5, r3
 800acca:	2600      	movs	r6, #0
 800accc:	341a      	adds	r4, #26
 800acce:	42b5      	cmp	r5, r6
 800acd0:	d11a      	bne.n	800ad08 <_printf_common+0xc8>
 800acd2:	2000      	movs	r0, #0
 800acd4:	e008      	b.n	800ace8 <_printf_common+0xa8>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4652      	mov	r2, sl
 800acda:	4649      	mov	r1, r9
 800acdc:	4638      	mov	r0, r7
 800acde:	47c0      	blx	r8
 800ace0:	3001      	adds	r0, #1
 800ace2:	d103      	bne.n	800acec <_printf_common+0xac>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acec:	3501      	adds	r5, #1
 800acee:	e7c6      	b.n	800ac7e <_printf_common+0x3e>
 800acf0:	18e1      	adds	r1, r4, r3
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	2030      	movs	r0, #48	; 0x30
 800acf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acfa:	4422      	add	r2, r4
 800acfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad04:	3302      	adds	r3, #2
 800ad06:	e7c7      	b.n	800ac98 <_printf_common+0x58>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	4638      	mov	r0, r7
 800ad10:	47c0      	blx	r8
 800ad12:	3001      	adds	r0, #1
 800ad14:	d0e6      	beq.n	800ace4 <_printf_common+0xa4>
 800ad16:	3601      	adds	r6, #1
 800ad18:	e7d9      	b.n	800acce <_printf_common+0x8e>
	...

0800ad1c <_printf_i>:
 800ad1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	7e0f      	ldrb	r7, [r1, #24]
 800ad22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad24:	2f78      	cmp	r7, #120	; 0x78
 800ad26:	4691      	mov	r9, r2
 800ad28:	4680      	mov	r8, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	469a      	mov	sl, r3
 800ad2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad32:	d807      	bhi.n	800ad44 <_printf_i+0x28>
 800ad34:	2f62      	cmp	r7, #98	; 0x62
 800ad36:	d80a      	bhi.n	800ad4e <_printf_i+0x32>
 800ad38:	2f00      	cmp	r7, #0
 800ad3a:	f000 80d8 	beq.w	800aeee <_printf_i+0x1d2>
 800ad3e:	2f58      	cmp	r7, #88	; 0x58
 800ad40:	f000 80a3 	beq.w	800ae8a <_printf_i+0x16e>
 800ad44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad4c:	e03a      	b.n	800adc4 <_printf_i+0xa8>
 800ad4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad52:	2b15      	cmp	r3, #21
 800ad54:	d8f6      	bhi.n	800ad44 <_printf_i+0x28>
 800ad56:	a101      	add	r1, pc, #4	; (adr r1, 800ad5c <_printf_i+0x40>)
 800ad58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad5c:	0800adb5 	.word	0x0800adb5
 800ad60:	0800adc9 	.word	0x0800adc9
 800ad64:	0800ad45 	.word	0x0800ad45
 800ad68:	0800ad45 	.word	0x0800ad45
 800ad6c:	0800ad45 	.word	0x0800ad45
 800ad70:	0800ad45 	.word	0x0800ad45
 800ad74:	0800adc9 	.word	0x0800adc9
 800ad78:	0800ad45 	.word	0x0800ad45
 800ad7c:	0800ad45 	.word	0x0800ad45
 800ad80:	0800ad45 	.word	0x0800ad45
 800ad84:	0800ad45 	.word	0x0800ad45
 800ad88:	0800aed5 	.word	0x0800aed5
 800ad8c:	0800adf9 	.word	0x0800adf9
 800ad90:	0800aeb7 	.word	0x0800aeb7
 800ad94:	0800ad45 	.word	0x0800ad45
 800ad98:	0800ad45 	.word	0x0800ad45
 800ad9c:	0800aef7 	.word	0x0800aef7
 800ada0:	0800ad45 	.word	0x0800ad45
 800ada4:	0800adf9 	.word	0x0800adf9
 800ada8:	0800ad45 	.word	0x0800ad45
 800adac:	0800ad45 	.word	0x0800ad45
 800adb0:	0800aebf 	.word	0x0800aebf
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	1d1a      	adds	r2, r3, #4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	602a      	str	r2, [r5, #0]
 800adbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adc4:	2301      	movs	r3, #1
 800adc6:	e0a3      	b.n	800af10 <_printf_i+0x1f4>
 800adc8:	6820      	ldr	r0, [r4, #0]
 800adca:	6829      	ldr	r1, [r5, #0]
 800adcc:	0606      	lsls	r6, r0, #24
 800adce:	f101 0304 	add.w	r3, r1, #4
 800add2:	d50a      	bpl.n	800adea <_printf_i+0xce>
 800add4:	680e      	ldr	r6, [r1, #0]
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	2e00      	cmp	r6, #0
 800adda:	da03      	bge.n	800ade4 <_printf_i+0xc8>
 800addc:	232d      	movs	r3, #45	; 0x2d
 800adde:	4276      	negs	r6, r6
 800ade0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ade4:	485e      	ldr	r0, [pc, #376]	; (800af60 <_printf_i+0x244>)
 800ade6:	230a      	movs	r3, #10
 800ade8:	e019      	b.n	800ae1e <_printf_i+0x102>
 800adea:	680e      	ldr	r6, [r1, #0]
 800adec:	602b      	str	r3, [r5, #0]
 800adee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adf2:	bf18      	it	ne
 800adf4:	b236      	sxthne	r6, r6
 800adf6:	e7ef      	b.n	800add8 <_printf_i+0xbc>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	6820      	ldr	r0, [r4, #0]
 800adfc:	1d19      	adds	r1, r3, #4
 800adfe:	6029      	str	r1, [r5, #0]
 800ae00:	0601      	lsls	r1, r0, #24
 800ae02:	d501      	bpl.n	800ae08 <_printf_i+0xec>
 800ae04:	681e      	ldr	r6, [r3, #0]
 800ae06:	e002      	b.n	800ae0e <_printf_i+0xf2>
 800ae08:	0646      	lsls	r6, r0, #25
 800ae0a:	d5fb      	bpl.n	800ae04 <_printf_i+0xe8>
 800ae0c:	881e      	ldrh	r6, [r3, #0]
 800ae0e:	4854      	ldr	r0, [pc, #336]	; (800af60 <_printf_i+0x244>)
 800ae10:	2f6f      	cmp	r7, #111	; 0x6f
 800ae12:	bf0c      	ite	eq
 800ae14:	2308      	moveq	r3, #8
 800ae16:	230a      	movne	r3, #10
 800ae18:	2100      	movs	r1, #0
 800ae1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae1e:	6865      	ldr	r5, [r4, #4]
 800ae20:	60a5      	str	r5, [r4, #8]
 800ae22:	2d00      	cmp	r5, #0
 800ae24:	bfa2      	ittt	ge
 800ae26:	6821      	ldrge	r1, [r4, #0]
 800ae28:	f021 0104 	bicge.w	r1, r1, #4
 800ae2c:	6021      	strge	r1, [r4, #0]
 800ae2e:	b90e      	cbnz	r6, 800ae34 <_printf_i+0x118>
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	d04d      	beq.n	800aed0 <_printf_i+0x1b4>
 800ae34:	4615      	mov	r5, r2
 800ae36:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae3a:	fb03 6711 	mls	r7, r3, r1, r6
 800ae3e:	5dc7      	ldrb	r7, [r0, r7]
 800ae40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae44:	4637      	mov	r7, r6
 800ae46:	42bb      	cmp	r3, r7
 800ae48:	460e      	mov	r6, r1
 800ae4a:	d9f4      	bls.n	800ae36 <_printf_i+0x11a>
 800ae4c:	2b08      	cmp	r3, #8
 800ae4e:	d10b      	bne.n	800ae68 <_printf_i+0x14c>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	07de      	lsls	r6, r3, #31
 800ae54:	d508      	bpl.n	800ae68 <_printf_i+0x14c>
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	6861      	ldr	r1, [r4, #4]
 800ae5a:	4299      	cmp	r1, r3
 800ae5c:	bfde      	ittt	le
 800ae5e:	2330      	movle	r3, #48	; 0x30
 800ae60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae68:	1b52      	subs	r2, r2, r5
 800ae6a:	6122      	str	r2, [r4, #16]
 800ae6c:	f8cd a000 	str.w	sl, [sp]
 800ae70:	464b      	mov	r3, r9
 800ae72:	aa03      	add	r2, sp, #12
 800ae74:	4621      	mov	r1, r4
 800ae76:	4640      	mov	r0, r8
 800ae78:	f7ff fee2 	bl	800ac40 <_printf_common>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d14c      	bne.n	800af1a <_printf_i+0x1fe>
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae84:	b004      	add	sp, #16
 800ae86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8a:	4835      	ldr	r0, [pc, #212]	; (800af60 <_printf_i+0x244>)
 800ae8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae90:	6829      	ldr	r1, [r5, #0]
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae98:	6029      	str	r1, [r5, #0]
 800ae9a:	061d      	lsls	r5, r3, #24
 800ae9c:	d514      	bpl.n	800aec8 <_printf_i+0x1ac>
 800ae9e:	07df      	lsls	r7, r3, #31
 800aea0:	bf44      	itt	mi
 800aea2:	f043 0320 	orrmi.w	r3, r3, #32
 800aea6:	6023      	strmi	r3, [r4, #0]
 800aea8:	b91e      	cbnz	r6, 800aeb2 <_printf_i+0x196>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	f023 0320 	bic.w	r3, r3, #32
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	e7b0      	b.n	800ae18 <_printf_i+0xfc>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	f043 0320 	orr.w	r3, r3, #32
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	2378      	movs	r3, #120	; 0x78
 800aec0:	4828      	ldr	r0, [pc, #160]	; (800af64 <_printf_i+0x248>)
 800aec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aec6:	e7e3      	b.n	800ae90 <_printf_i+0x174>
 800aec8:	0659      	lsls	r1, r3, #25
 800aeca:	bf48      	it	mi
 800aecc:	b2b6      	uxthmi	r6, r6
 800aece:	e7e6      	b.n	800ae9e <_printf_i+0x182>
 800aed0:	4615      	mov	r5, r2
 800aed2:	e7bb      	b.n	800ae4c <_printf_i+0x130>
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	6826      	ldr	r6, [r4, #0]
 800aed8:	6961      	ldr	r1, [r4, #20]
 800aeda:	1d18      	adds	r0, r3, #4
 800aedc:	6028      	str	r0, [r5, #0]
 800aede:	0635      	lsls	r5, r6, #24
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	d501      	bpl.n	800aee8 <_printf_i+0x1cc>
 800aee4:	6019      	str	r1, [r3, #0]
 800aee6:	e002      	b.n	800aeee <_printf_i+0x1d2>
 800aee8:	0670      	lsls	r0, r6, #25
 800aeea:	d5fb      	bpl.n	800aee4 <_printf_i+0x1c8>
 800aeec:	8019      	strh	r1, [r3, #0]
 800aeee:	2300      	movs	r3, #0
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	4615      	mov	r5, r2
 800aef4:	e7ba      	b.n	800ae6c <_printf_i+0x150>
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	1d1a      	adds	r2, r3, #4
 800aefa:	602a      	str	r2, [r5, #0]
 800aefc:	681d      	ldr	r5, [r3, #0]
 800aefe:	6862      	ldr	r2, [r4, #4]
 800af00:	2100      	movs	r1, #0
 800af02:	4628      	mov	r0, r5
 800af04:	f7f5 f96c 	bl	80001e0 <memchr>
 800af08:	b108      	cbz	r0, 800af0e <_printf_i+0x1f2>
 800af0a:	1b40      	subs	r0, r0, r5
 800af0c:	6060      	str	r0, [r4, #4]
 800af0e:	6863      	ldr	r3, [r4, #4]
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	2300      	movs	r3, #0
 800af14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af18:	e7a8      	b.n	800ae6c <_printf_i+0x150>
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	462a      	mov	r2, r5
 800af1e:	4649      	mov	r1, r9
 800af20:	4640      	mov	r0, r8
 800af22:	47d0      	blx	sl
 800af24:	3001      	adds	r0, #1
 800af26:	d0ab      	beq.n	800ae80 <_printf_i+0x164>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	079b      	lsls	r3, r3, #30
 800af2c:	d413      	bmi.n	800af56 <_printf_i+0x23a>
 800af2e:	68e0      	ldr	r0, [r4, #12]
 800af30:	9b03      	ldr	r3, [sp, #12]
 800af32:	4298      	cmp	r0, r3
 800af34:	bfb8      	it	lt
 800af36:	4618      	movlt	r0, r3
 800af38:	e7a4      	b.n	800ae84 <_printf_i+0x168>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4632      	mov	r2, r6
 800af3e:	4649      	mov	r1, r9
 800af40:	4640      	mov	r0, r8
 800af42:	47d0      	blx	sl
 800af44:	3001      	adds	r0, #1
 800af46:	d09b      	beq.n	800ae80 <_printf_i+0x164>
 800af48:	3501      	adds	r5, #1
 800af4a:	68e3      	ldr	r3, [r4, #12]
 800af4c:	9903      	ldr	r1, [sp, #12]
 800af4e:	1a5b      	subs	r3, r3, r1
 800af50:	42ab      	cmp	r3, r5
 800af52:	dcf2      	bgt.n	800af3a <_printf_i+0x21e>
 800af54:	e7eb      	b.n	800af2e <_printf_i+0x212>
 800af56:	2500      	movs	r5, #0
 800af58:	f104 0619 	add.w	r6, r4, #25
 800af5c:	e7f5      	b.n	800af4a <_printf_i+0x22e>
 800af5e:	bf00      	nop
 800af60:	0800b46e 	.word	0x0800b46e
 800af64:	0800b47f 	.word	0x0800b47f

0800af68 <_read_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	; (800af88 <_read_r+0x20>)
 800af6c:	4604      	mov	r4, r0
 800af6e:	4608      	mov	r0, r1
 800af70:	4611      	mov	r1, r2
 800af72:	2200      	movs	r2, #0
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f6 fd7c 	bl	8001a74 <_read>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_read_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_read_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20004334 	.word	0x20004334

0800af8c <_fstat_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	; (800afac <_fstat_r+0x20>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	4611      	mov	r1, r2
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	f7f6 fd94 	bl	8001ac6 <_fstat>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d102      	bne.n	800afa8 <_fstat_r+0x1c>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	b103      	cbz	r3, 800afa8 <_fstat_r+0x1c>
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	bd38      	pop	{r3, r4, r5, pc}
 800afaa:	bf00      	nop
 800afac:	20004334 	.word	0x20004334

0800afb0 <_isatty_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d06      	ldr	r5, [pc, #24]	; (800afcc <_isatty_r+0x1c>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	f7f6 fd93 	bl	8001ae6 <_isatty>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_isatty_r+0x1a>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_isatty_r+0x1a>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20004334 	.word	0x20004334

0800afd0 <_init>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	bf00      	nop
 800afd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afd6:	bc08      	pop	{r3}
 800afd8:	469e      	mov	lr, r3
 800afda:	4770      	bx	lr

0800afdc <_fini>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	bf00      	nop
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr
